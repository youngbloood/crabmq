<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="315601"><g><title>std::sys::pal::unix::time::Timespec::now (36 samples, 0.01%)</title><rect x="0.0127%" y="325" width="0.0114%" height="15" fill="rgb(227,0,7)" fg:x="40" fg:w="36"/><text x="0.2627%" y="335.50"></text></g><g><title>&lt;Unknown Address&gt; (91 samples, 0.03%)</title><rect x="0.0063%" y="341" width="0.0288%" height="15" fill="rgb(217,0,24)" fg:x="20" fg:w="91"/><text x="0.2563%" y="351.50"></text></g><g><title>0x7ff8067f7717 (132 samples, 0.04%)</title><rect x="0.1736%" y="325" width="0.0418%" height="15" fill="rgb(221,193,54)" fg:x="548" fg:w="132"/><text x="0.4236%" y="335.50"></text></g><g><title>0x7ff80699f892 (46 samples, 0.01%)</title><rect x="0.2348%" y="325" width="0.0146%" height="15" fill="rgb(248,212,6)" fg:x="741" fg:w="46"/><text x="0.4848%" y="335.50"></text></g><g><title>&lt;Unknown Address&gt; (69 samples, 0.02%)</title><rect x="0.2614%" y="325" width="0.0219%" height="15" fill="rgb(208,68,35)" fg:x="825" fg:w="69"/><text x="0.5114%" y="335.50"></text></g><g><title>0x7ff8067d6844 (40 samples, 0.01%)</title><rect x="0.7357%" y="309" width="0.0127%" height="15" fill="rgb(232,128,0)" fg:x="2322" fg:w="40"/><text x="0.9857%" y="319.50"></text></g><g><title>0x7ff8067d68aa (171 samples, 0.05%)</title><rect x="0.7497%" y="309" width="0.0542%" height="15" fill="rgb(207,160,47)" fg:x="2366" fg:w="171"/><text x="0.9997%" y="319.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (171 samples, 0.05%)</title><rect x="0.7497%" y="293" width="0.0542%" height="15" fill="rgb(228,23,34)" fg:x="2366" fg:w="171"/><text x="0.9997%" y="303.50"></text></g><g><title>0x7ff8067d6984 (89 samples, 0.03%)</title><rect x="0.8229%" y="309" width="0.0282%" height="15" fill="rgb(218,30,26)" fg:x="2597" fg:w="89"/><text x="1.0729%" y="319.50"></text></g><g><title>0x7ff8067d6844 (56 samples, 0.02%)</title><rect x="1.0228%" y="293" width="0.0177%" height="15" fill="rgb(220,122,19)" fg:x="3228" fg:w="56"/><text x="1.2728%" y="303.50"></text></g><g><title>0x7ff8067d68aa (5,352 samples, 1.70%)</title><rect x="1.0469%" y="293" width="1.6958%" height="15" fill="rgb(250,228,42)" fg:x="3304" fg:w="5352"/><text x="1.2969%" y="303.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (5,337 samples, 1.69%)</title><rect x="1.0516%" y="277" width="1.6911%" height="15" fill="rgb(240,193,28)" fg:x="3319" fg:w="5337"/><text x="1.3016%" y="287.50"></text></g><g><title>0x7ff8067d6984 (86 samples, 0.03%)</title><rect x="2.7646%" y="293" width="0.0272%" height="15" fill="rgb(216,20,37)" fg:x="8725" fg:w="86"/><text x="3.0146%" y="303.50"></text></g><g><title>pthread_mutex_destroy (281 samples, 0.09%)</title><rect x="2.8127%" y="277" width="0.0890%" height="15" fill="rgb(206,188,39)" fg:x="8877" fg:w="281"/><text x="3.0627%" y="287.50"></text></g><g><title>&lt;std::sys::sync::mutex::pthread::Mutex as core::ops::drop::Drop&gt;::drop (513 samples, 0.16%)</title><rect x="2.7997%" y="293" width="0.1625%" height="15" fill="rgb(217,207,13)" fg:x="8836" fg:w="513"/><text x="3.0497%" y="303.50"></text></g><g><title>pthread_mutex_unlock (191 samples, 0.06%)</title><rect x="2.9018%" y="277" width="0.0605%" height="15" fill="rgb(231,73,38)" fg:x="9158" fg:w="191"/><text x="3.1518%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (6,616 samples, 2.10%)</title><rect x="0.9236%" y="309" width="2.0963%" height="15" fill="rgb(225,20,46)" fg:x="2915" fg:w="6616"/><text x="1.1736%" y="319.50">a..</text></g><g><title>pthread_mutex_trylock (145 samples, 0.05%)</title><rect x="2.9740%" y="293" width="0.0459%" height="15" fill="rgb(210,31,41)" fg:x="9386" fg:w="145"/><text x="3.2240%" y="303.50"></text></g><g><title>futures_timer::native::global::raw_clone (136 samples, 0.04%)</title><rect x="3.0200%" y="309" width="0.0431%" height="15" fill="rgb(221,200,47)" fg:x="9531" fg:w="136"/><text x="3.2700%" y="319.50"></text></g><g><title>futures_timer::native::global::raw_drop (37 samples, 0.01%)</title><rect x="3.0630%" y="309" width="0.0117%" height="15" fill="rgb(226,26,5)" fg:x="9667" fg:w="37"/><text x="3.3130%" y="319.50"></text></g><g><title>futures_timer::native::heap::Heap&lt;T&gt;::push (672 samples, 0.21%)</title><rect x="3.0754%" y="309" width="0.2129%" height="15" fill="rgb(249,33,26)" fg:x="9706" fg:w="672"/><text x="3.3254%" y="319.50"></text></g><g><title>futures_timer::native::heap::Heap&lt;T&gt;::percolate_up (525 samples, 0.17%)</title><rect x="3.1220%" y="293" width="0.1663%" height="15" fill="rgb(235,183,28)" fg:x="9853" fg:w="525"/><text x="3.3720%" y="303.50"></text></g><g><title>pthread_mutex_unlock (467 samples, 0.15%)</title><rect x="3.2883%" y="309" width="0.1480%" height="15" fill="rgb(221,5,38)" fg:x="10378" fg:w="467"/><text x="3.5383%" y="319.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (600 samples, 0.19%)</title><rect x="3.4363%" y="309" width="0.1901%" height="15" fill="rgb(247,18,42)" fg:x="10845" fg:w="600"/><text x="3.6863%" y="319.50"></text></g><g><title>pthread_mutex_lock (593 samples, 0.19%)</title><rect x="3.4385%" y="293" width="0.1879%" height="15" fill="rgb(241,131,45)" fg:x="10852" fg:w="593"/><text x="3.6885%" y="303.50"></text></g><g><title>0x7ff8067b5208 (101 samples, 0.03%)</title><rect x="3.7335%" y="293" width="0.0320%" height="15" fill="rgb(249,31,29)" fg:x="11783" fg:w="101"/><text x="3.9835%" y="303.50"></text></g><g><title>0x7ff8067b5225 (48 samples, 0.02%)</title><rect x="3.7687%" y="293" width="0.0152%" height="15" fill="rgb(225,111,53)" fg:x="11894" fg:w="48"/><text x="4.0187%" y="303.50"></text></g><g><title>0x7ff8067b523b (43 samples, 0.01%)</title><rect x="3.7877%" y="293" width="0.0136%" height="15" fill="rgb(238,160,17)" fg:x="11954" fg:w="43"/><text x="4.0377%" y="303.50"></text></g><g><title>0x7ff8067b5313 (338 samples, 0.11%)</title><rect x="3.8178%" y="293" width="0.1071%" height="15" fill="rgb(214,148,48)" fg:x="12049" fg:w="338"/><text x="4.0678%" y="303.50"></text></g><g><title>0x7ff8067b5330 (94 samples, 0.03%)</title><rect x="3.9322%" y="293" width="0.0298%" height="15" fill="rgb(232,36,49)" fg:x="12410" fg:w="94"/><text x="4.1822%" y="303.50"></text></g><g><title>0x7ff8067d6607 (85 samples, 0.03%)</title><rect x="3.9670%" y="277" width="0.0269%" height="15" fill="rgb(209,103,24)" fg:x="12520" fg:w="85"/><text x="4.2170%" y="287.50"></text></g><g><title>0x7ff8067b53c7 (96 samples, 0.03%)</title><rect x="3.9642%" y="293" width="0.0304%" height="15" fill="rgb(229,88,8)" fg:x="12511" fg:w="96"/><text x="4.2142%" y="303.50"></text></g><g><title>pthread_mutex_init (114 samples, 0.04%)</title><rect x="4.0085%" y="293" width="0.0361%" height="15" fill="rgb(213,181,19)" fg:x="12651" fg:w="114"/><text x="4.2585%" y="303.50"></text></g><g><title>pthread_mutexattr_destroy (32 samples, 0.01%)</title><rect x="4.0447%" y="293" width="0.0101%" height="15" fill="rgb(254,191,54)" fg:x="12765" fg:w="32"/><text x="4.2947%" y="303.50"></text></g><g><title>std::sys::sync::once_box::OnceBox$LT$T$GT$::initialize::h1db14ccd83739d5b (.llvm.8465266497648202264) (1,423 samples, 0.45%)</title><rect x="3.6315%" y="309" width="0.4509%" height="15" fill="rgb(241,83,37)" fg:x="11461" fg:w="1423"/><text x="3.8815%" y="319.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::init (40 samples, 0.01%)</title><rect x="4.0697%" y="293" width="0.0127%" height="15" fill="rgb(233,36,39)" fg:x="12844" fg:w="40"/><text x="4.3197%" y="303.50"></text></g><g><title>&lt;futures_timer::native::timer::Timer as core::future::future::Future&gt;::poll (11,991 samples, 3.80%)</title><rect x="0.2833%" y="325" width="3.7994%" height="15" fill="rgb(226,3,54)" fg:x="894" fg:w="11991"/><text x="0.5333%" y="335.50">&lt;fut..</text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (74 samples, 0.02%)</title><rect x="4.0827%" y="325" width="0.0234%" height="15" fill="rgb(245,192,40)" fg:x="12885" fg:w="74"/><text x="4.3327%" y="335.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (43 samples, 0.01%)</title><rect x="4.0925%" y="309" width="0.0136%" height="15" fill="rgb(238,167,29)" fg:x="12916" fg:w="43"/><text x="4.3425%" y="319.50"></text></g><g><title>0x7ff80684e83f (66 samples, 0.02%)</title><rect x="4.4113%" y="309" width="0.0209%" height="15" fill="rgb(232,182,51)" fg:x="13922" fg:w="66"/><text x="4.6613%" y="319.50"></text></g><g><title>&lt;Unknown Address&gt; (46 samples, 0.01%)</title><rect x="4.4322%" y="309" width="0.0146%" height="15" fill="rgb(231,60,39)" fg:x="13988" fg:w="46"/><text x="4.6822%" y="319.50"></text></g><g><title>futures_timer::native::heap::Heap&lt;T&gt;::remove (2,089 samples, 0.66%)</title><rect x="4.4499%" y="309" width="0.6619%" height="15" fill="rgb(208,69,12)" fg:x="14044" fg:w="2089"/><text x="4.6999%" y="319.50"></text></g><g><title>pthread_mutex_unlock (92 samples, 0.03%)</title><rect x="5.1118%" y="309" width="0.0292%" height="15" fill="rgb(235,93,37)" fg:x="16133" fg:w="92"/><text x="5.3618%" y="319.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (525 samples, 0.17%)</title><rect x="5.1410%" y="309" width="0.1663%" height="15" fill="rgb(213,116,39)" fg:x="16225" fg:w="525"/><text x="5.3910%" y="319.50"></text></g><g><title>pthread_mutex_lock (521 samples, 0.17%)</title><rect x="5.1423%" y="293" width="0.1651%" height="15" fill="rgb(222,207,29)" fg:x="16229" fg:w="521"/><text x="5.3923%" y="303.50"></text></g><g><title>0x7ff80683f7dd (53 samples, 0.02%)</title><rect x="5.3229%" y="293" width="0.0168%" height="15" fill="rgb(206,96,30)" fg:x="16799" fg:w="53"/><text x="5.5729%" y="303.50"></text></g><g><title>0x7ff80683f8c6 (3,868 samples, 1.23%)</title><rect x="5.3568%" y="277" width="1.2256%" height="15" fill="rgb(218,138,4)" fg:x="16906" fg:w="3868"/><text x="5.6068%" y="287.50"></text></g><g><title>mach_timebase_info (3,868 samples, 1.23%)</title><rect x="5.3568%" y="261" width="1.2256%" height="15" fill="rgb(250,191,14)" fg:x="16906" fg:w="3868"/><text x="5.6068%" y="271.50"></text></g><g><title>0x7ff80683f91d (210 samples, 0.07%)</title><rect x="6.5896%" y="277" width="0.0665%" height="15" fill="rgb(239,60,40)" fg:x="20797" fg:w="210"/><text x="6.8396%" y="287.50"></text></g><g><title>mach_absolute_time (210 samples, 0.07%)</title><rect x="6.5896%" y="261" width="0.0665%" height="15" fill="rgb(206,27,48)" fg:x="20797" fg:w="210"/><text x="6.8396%" y="271.50"></text></g><g><title>0x7ff80683f93d (106 samples, 0.03%)</title><rect x="6.6584%" y="277" width="0.0336%" height="15" fill="rgb(225,35,8)" fg:x="21014" fg:w="106"/><text x="6.9084%" y="287.50"></text></g><g><title>0x7ff8068be5cb (38 samples, 0.01%)</title><rect x="6.6948%" y="277" width="0.0120%" height="15" fill="rgb(250,213,24)" fg:x="21129" fg:w="38"/><text x="6.9448%" y="287.50"></text></g><g><title>0x7ff80684e86d (4,289 samples, 1.36%)</title><rect x="5.3504%" y="293" width="1.3590%" height="15" fill="rgb(247,123,22)" fg:x="16886" fg:w="4289"/><text x="5.6004%" y="303.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (4,463 samples, 1.41%)</title><rect x="5.3077%" y="309" width="1.4141%" height="15" fill="rgb(231,138,38)" fg:x="16751" fg:w="4463"/><text x="5.5577%" y="319.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (8,519 samples, 2.70%)</title><rect x="6.8577%" y="277" width="2.6993%" height="15" fill="rgb(231,145,46)" fg:x="21643" fg:w="8519"/><text x="7.1077%" y="287.50">to..</text></g><g><title>mio::waker::Waker::wake (8,419 samples, 2.67%)</title><rect x="6.8894%" y="261" width="2.6676%" height="15" fill="rgb(251,118,11)" fg:x="21743" fg:w="8419"/><text x="7.1394%" y="271.50">mi..</text></g><g><title>kevent (8,298 samples, 2.63%)</title><rect x="6.9277%" y="245" width="2.6293%" height="15" fill="rgb(217,147,25)" fg:x="21864" fg:w="8298"/><text x="7.1777%" y="255.50">ke..</text></g><g><title>tokio::runtime::context::with_scheduler (9,046 samples, 2.87%)</title><rect x="6.8045%" y="293" width="2.8663%" height="15" fill="rgb(247,81,37)" fg:x="21475" fg:w="9046"/><text x="7.0545%" y="303.50">to..</text></g><g><title>tokio::runtime::scheduler::inject::Inject&lt;T&gt;::push (359 samples, 0.11%)</title><rect x="9.5570%" y="277" width="0.1138%" height="15" fill="rgb(209,12,38)" fg:x="30162" fg:w="359"/><text x="9.8070%" y="287.50"></text></g><g><title>tokio::runtime::task::raw::schedule (62 samples, 0.02%)</title><rect x="9.6755%" y="293" width="0.0196%" height="15" fill="rgb(227,1,9)" fg:x="30536" fg:w="62"/><text x="9.9255%" y="303.50"></text></g><g><title>futures_timer::native::timer::Timer::advance (18,347 samples, 5.81%)</title><rect x="4.1106%" y="325" width="5.8134%" height="15" fill="rgb(248,47,43)" fg:x="12973" fg:w="18347"/><text x="4.3606%" y="335.50">futures..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (10,082 samples, 3.19%)</title><rect x="6.7294%" y="309" width="3.1945%" height="15" fill="rgb(221,10,30)" fg:x="21238" fg:w="10082"/><text x="6.9794%" y="319.50">tok..</text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (722 samples, 0.23%)</title><rect x="9.6952%" y="293" width="0.2288%" height="15" fill="rgb(210,229,1)" fg:x="30598" fg:w="722"/><text x="9.9452%" y="303.50"></text></g><g><title>0x7ff80683f8c6 (137 samples, 0.04%)</title><rect x="9.9572%" y="293" width="0.0434%" height="15" fill="rgb(222,148,37)" fg:x="31425" fg:w="137"/><text x="10.2072%" y="303.50"></text></g><g><title>mach_timebase_info (137 samples, 0.04%)</title><rect x="9.9572%" y="277" width="0.0434%" height="15" fill="rgb(234,67,33)" fg:x="31425" fg:w="137"/><text x="10.2072%" y="287.50"></text></g><g><title>0x7ff80683f91d (183 samples, 0.06%)</title><rect x="10.0060%" y="293" width="0.0580%" height="15" fill="rgb(247,98,35)" fg:x="31579" fg:w="183"/><text x="10.2560%" y="303.50"></text></g><g><title>mach_absolute_time (183 samples, 0.06%)</title><rect x="10.0060%" y="277" width="0.0580%" height="15" fill="rgb(247,138,52)" fg:x="31579" fg:w="183"/><text x="10.2560%" y="287.50"></text></g><g><title>0x7ff80683f93d (99 samples, 0.03%)</title><rect x="10.0665%" y="293" width="0.0314%" height="15" fill="rgb(213,79,30)" fg:x="31770" fg:w="99"/><text x="10.3165%" y="303.50"></text></g><g><title>0x7ff80684e86d (461 samples, 0.15%)</title><rect x="9.9534%" y="309" width="0.1461%" height="15" fill="rgb(246,177,23)" fg:x="31413" fg:w="461"/><text x="10.2034%" y="319.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (579 samples, 0.18%)</title><rect x="9.9246%" y="325" width="0.1835%" height="15" fill="rgb(230,62,27)" fg:x="31322" fg:w="579"/><text x="10.1746%" y="335.50"></text></g><g><title>0x7ff806824cc4 (79 samples, 0.03%)</title><rect x="10.3748%" y="277" width="0.0250%" height="15" fill="rgb(216,154,8)" fg:x="32743" fg:w="79"/><text x="10.6248%" y="287.50"></text></g><g><title>mach_absolute_time (79 samples, 0.03%)</title><rect x="10.3748%" y="261" width="0.0250%" height="15" fill="rgb(244,35,45)" fg:x="32743" fg:w="79"/><text x="10.6248%" y="271.50"></text></g><g><title>0x7ff8067f72e6 (101 samples, 0.03%)</title><rect x="10.3729%" y="293" width="0.0320%" height="15" fill="rgb(251,115,12)" fg:x="32737" fg:w="101"/><text x="10.6229%" y="303.50"></text></g><g><title>0x7ff8067f730d (5,852 samples, 1.85%)</title><rect x="10.4125%" y="293" width="1.8542%" height="15" fill="rgb(240,54,50)" fg:x="32862" fg:w="5852"/><text x="10.6625%" y="303.50">0..</text></g><g><title>semaphore_timedwait_trap (5,731 samples, 1.82%)</title><rect x="10.4509%" y="277" width="1.8159%" height="15" fill="rgb(233,84,52)" fg:x="32983" fg:w="5731"/><text x="10.7009%" y="287.50">s..</text></g><g><title>0x7ff8067f7313 (42 samples, 0.01%)</title><rect x="12.2671%" y="293" width="0.0133%" height="15" fill="rgb(207,117,47)" fg:x="38715" fg:w="42"/><text x="12.5171%" y="303.50"></text></g><g><title>0x7ff8067f7759 (6,103 samples, 1.93%)</title><rect x="10.3656%" y="309" width="1.9338%" height="15" fill="rgb(249,43,39)" fg:x="32714" fg:w="6103"/><text x="10.6156%" y="319.50">0..</text></g><g><title>0x7ff8067f7762 (69 samples, 0.02%)</title><rect x="12.3000%" y="309" width="0.0219%" height="15" fill="rgb(209,38,44)" fg:x="38819" fg:w="69"/><text x="12.5500%" y="319.50"></text></g><g><title>0x7ff8067f728c (285 samples, 0.09%)</title><rect x="12.3323%" y="293" width="0.0903%" height="15" fill="rgb(236,212,23)" fg:x="38921" fg:w="285"/><text x="12.5823%" y="303.50"></text></g><g><title>semaphore_wait_trap (281 samples, 0.09%)</title><rect x="12.3336%" y="277" width="0.0890%" height="15" fill="rgb(242,79,21)" fg:x="38925" fg:w="281"/><text x="12.5836%" y="287.50"></text></g><g><title>0x7ff8067f7781 (305 samples, 0.10%)</title><rect x="12.3317%" y="309" width="0.0966%" height="15" fill="rgb(211,96,35)" fg:x="38919" fg:w="305"/><text x="12.5817%" y="319.50"></text></g><g><title>0x7ff8068249ac (130 samples, 0.04%)</title><rect x="12.4331%" y="309" width="0.0412%" height="15" fill="rgb(253,215,40)" fg:x="39239" fg:w="130"/><text x="12.6831%" y="319.50"></text></g><g><title>mach_absolute_time (130 samples, 0.04%)</title><rect x="12.4331%" y="293" width="0.0412%" height="15" fill="rgb(211,81,21)" fg:x="39239" fg:w="130"/><text x="12.6831%" y="303.50"></text></g><g><title>std::thread::park_timeout (7,495 samples, 2.37%)</title><rect x="10.1109%" y="325" width="2.3748%" height="15" fill="rgb(208,190,38)" fg:x="31910" fg:w="7495"/><text x="10.3609%" y="335.50">st..</text></g><g><title>futures_timer::native::global::run (39,305 samples, 12.45%)</title><rect x="0.0352%" y="341" width="12.4540%" height="15" fill="rgb(235,213,38)" fg:x="111" fg:w="39305"/><text x="0.2852%" y="351.50">futures_timer::nati..</text></g><g><title>&lt;tokio::task::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop (49 samples, 0.02%)</title><rect x="12.5598%" y="261" width="0.0155%" height="15" fill="rgb(237,122,38)" fg:x="39639" fg:w="49"/><text x="12.8098%" y="271.50"></text></g><g><title>_platform_memcmp$VARIANT$Base (35 samples, 0.01%)</title><rect x="12.6346%" y="229" width="0.0111%" height="15" fill="rgb(244,218,35)" fg:x="39875" fg:w="35"/><text x="12.8846%" y="239.50"></text></g><g><title>std::path::Components::len_before_body (106 samples, 0.03%)</title><rect x="12.8919%" y="197" width="0.0336%" height="15" fill="rgb(240,68,47)" fg:x="40687" fg:w="106"/><text x="13.1419%" y="207.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (883 samples, 0.28%)</title><rect x="12.7142%" y="213" width="0.2798%" height="15" fill="rgb(210,16,53)" fg:x="40126" fg:w="883"/><text x="12.9642%" y="223.50"></text></g><g><title>std::path::Components::parse_next_component_back (216 samples, 0.07%)</title><rect x="12.9255%" y="197" width="0.0684%" height="15" fill="rgb(235,124,12)" fg:x="40793" fg:w="216"/><text x="13.1755%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::eq_by (1,248 samples, 0.40%)</title><rect x="12.6460%" y="229" width="0.3954%" height="15" fill="rgb(224,169,11)" fg:x="39911" fg:w="1248"/><text x="12.8960%" y="239.50"></text></g><g><title>std::path::Components::len_before_body (135 samples, 0.04%)</title><rect x="12.9987%" y="213" width="0.0428%" height="15" fill="rgb(250,166,2)" fg:x="41024" fg:w="135"/><text x="13.2487%" y="223.50"></text></g><g><title>0x7ff806877123 (40 samples, 0.01%)</title><rect x="13.0560%" y="117" width="0.0127%" height="15" fill="rgb(242,216,29)" fg:x="41205" fg:w="40"/><text x="13.3060%" y="127.50"></text></g><g><title>0x7ff806846923 (58 samples, 0.02%)</title><rect x="13.0697%" y="101" width="0.0184%" height="15" fill="rgb(230,116,27)" fg:x="41248" fg:w="58"/><text x="13.3197%" y="111.50"></text></g><g><title>__commpage_gettimeofday_internal (57 samples, 0.02%)</title><rect x="13.0700%" y="85" width="0.0181%" height="15" fill="rgb(228,99,48)" fg:x="41249" fg:w="57"/><text x="13.3200%" y="95.50"></text></g><g><title>mach_absolute_time (43 samples, 0.01%)</title><rect x="13.0744%" y="69" width="0.0136%" height="15" fill="rgb(253,11,6)" fg:x="41263" fg:w="43"/><text x="13.3244%" y="79.50"></text></g><g><title>0x7ff80687712c (64 samples, 0.02%)</title><rect x="13.0690%" y="117" width="0.0203%" height="15" fill="rgb(247,143,39)" fg:x="41246" fg:w="64"/><text x="13.3190%" y="127.50"></text></g><g><title>0x7ff806877137 (35 samples, 0.01%)</title><rect x="13.0893%" y="117" width="0.0111%" height="15" fill="rgb(236,97,10)" fg:x="41310" fg:w="35"/><text x="13.3393%" y="127.50"></text></g><g><title>0x7ff80684e8f6 (150 samples, 0.05%)</title><rect x="13.0551%" y="133" width="0.0475%" height="15" fill="rgb(233,208,19)" fg:x="41202" fg:w="150"/><text x="13.3051%" y="143.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (184 samples, 0.06%)</title><rect x="13.0472%" y="197" width="0.0583%" height="15" fill="rgb(216,164,2)" fg:x="41177" fg:w="184"/><text x="13.2972%" y="207.50"></text></g><g><title>once_cell::imp::initialize_or_wait (184 samples, 0.06%)</title><rect x="13.0472%" y="181" width="0.0583%" height="15" fill="rgb(220,129,5)" fg:x="41177" fg:w="184"/><text x="13.2972%" y="191.50"></text></g><g><title>once_cell::imp::OnceCell$LT$T$GT$::initialize::_$u7b$$u7b$closure$u7d$$u7d$::hd12ae1697f79bd24 (.llvm.16041530799740990472) (184 samples, 0.06%)</title><rect x="13.0472%" y="165" width="0.0583%" height="15" fill="rgb(242,17,10)" fg:x="41177" fg:w="184"/><text x="13.2972%" y="175.50"></text></g><g><title>quanta::Calibration::calibrate (180 samples, 0.06%)</title><rect x="13.0484%" y="149" width="0.0570%" height="15" fill="rgb(242,107,0)" fg:x="41181" fg:w="180"/><text x="13.2984%" y="159.50"></text></g><g><title>governor::state::direct::_&lt;impl governor::state::RateLimiter&lt;governor::state::direct::NotKeyed,governor::state::in_memory::InMemoryState,governor::clock::quanta::QuantaClock,governor::middleware::NoOpMiddleware&lt;governor::clock::quanta::QuantaInstant&gt;&gt;&gt;::direct (200 samples, 0.06%)</title><rect x="13.0469%" y="229" width="0.0634%" height="15" fill="rgb(251,28,31)" fg:x="41176" fg:w="200"/><text x="13.2969%" y="239.50"></text></g><g><title>&lt;quanta::Clock as core::default::Default&gt;::default (199 samples, 0.06%)</title><rect x="13.0472%" y="213" width="0.0631%" height="15" fill="rgb(233,223,10)" fg:x="41177" fg:w="199"/><text x="13.2972%" y="223.50"></text></g><g><title>std::path::Path::components (41 samples, 0.01%)</title><rect x="13.1102%" y="229" width="0.0130%" height="15" fill="rgb(215,21,27)" fg:x="41376" fg:w="41"/><text x="13.3602%" y="239.50"></text></g><g><title>storagev2::disk::writer::flusher::Flusher::get_partition_metrics (36 samples, 0.01%)</title><rect x="13.1235%" y="229" width="0.0114%" height="15" fill="rgb(232,23,21)" fg:x="41418" fg:w="36"/><text x="13.3735%" y="239.50"></text></g><g><title>storagev2::disk::writer::test::run_flush_benchmark::_$u7b$$u7b$closure$u7d$$u7d$::he02f1855f2419fa4 (.llvm.10882443414997323894) (1,786 samples, 0.57%)</title><rect x="12.5754%" y="261" width="0.5659%" height="15" fill="rgb(244,5,23)" fg:x="39688" fg:w="1786"/><text x="12.8254%" y="271.50"></text></g><g><title>storagev2::disk::writer::test::test_flush_speed_with_dynamic_rate_multi_partition::_{{closure}} (1,765 samples, 0.56%)</title><rect x="12.5820%" y="245" width="0.5593%" height="15" fill="rgb(226,81,46)" fg:x="39709" fg:w="1765"/><text x="12.8320%" y="255.50"></text></g><g><title>0x7ff80683f91d (43 samples, 0.01%)</title><rect x="13.1536%" y="197" width="0.0136%" height="15" fill="rgb(247,70,30)" fg:x="41513" fg:w="43"/><text x="13.4036%" y="207.50"></text></g><g><title>mach_absolute_time (43 samples, 0.01%)</title><rect x="13.1536%" y="181" width="0.0136%" height="15" fill="rgb(212,68,19)" fg:x="41513" fg:w="43"/><text x="13.4036%" y="191.50"></text></g><g><title>0x7ff80684e86d (77 samples, 0.02%)</title><rect x="13.1498%" y="213" width="0.0244%" height="15" fill="rgb(240,187,13)" fg:x="41501" fg:w="77"/><text x="13.3998%" y="223.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (96 samples, 0.03%)</title><rect x="13.1457%" y="229" width="0.0304%" height="15" fill="rgb(223,113,26)" fg:x="41488" fg:w="96"/><text x="13.3957%" y="239.50"></text></g><g><title>tokio::runtime::metrics::batch::MetricsBatch::end_processing_scheduled_tasks (117 samples, 0.04%)</title><rect x="13.1416%" y="261" width="0.0371%" height="15" fill="rgb(206,192,2)" fg:x="41475" fg:w="117"/><text x="13.3916%" y="271.50"></text></g><g><title>std::time::Instant::elapsed (110 samples, 0.03%)</title><rect x="13.1438%" y="245" width="0.0349%" height="15" fill="rgb(241,108,4)" fg:x="41482" fg:w="110"/><text x="13.3938%" y="255.50"></text></g><g><title>0x7ff80683f91d (43 samples, 0.01%)</title><rect x="13.1923%" y="213" width="0.0136%" height="15" fill="rgb(247,173,49)" fg:x="41635" fg:w="43"/><text x="13.4423%" y="223.50"></text></g><g><title>mach_absolute_time (43 samples, 0.01%)</title><rect x="13.1923%" y="197" width="0.0136%" height="15" fill="rgb(224,114,35)" fg:x="41635" fg:w="43"/><text x="13.4423%" y="207.50"></text></g><g><title>0x7ff80684e86d (70 samples, 0.02%)</title><rect x="13.1888%" y="229" width="0.0222%" height="15" fill="rgb(245,159,27)" fg:x="41624" fg:w="70"/><text x="13.4388%" y="239.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (88 samples, 0.03%)</title><rect x="13.1853%" y="245" width="0.0279%" height="15" fill="rgb(245,172,44)" fg:x="41613" fg:w="88"/><text x="13.4353%" y="255.50"></text></g><g><title>tokio::runtime::metrics::batch::MetricsBatch::start_processing_scheduled_tasks (110 samples, 0.03%)</title><rect x="13.1787%" y="261" width="0.0349%" height="15" fill="rgb(236,23,11)" fg:x="41592" fg:w="110"/><text x="13.4287%" y="271.50"></text></g><g><title>&lt;Unknown Address&gt; (34 samples, 0.01%)</title><rect x="13.2509%" y="245" width="0.0108%" height="15" fill="rgb(205,117,38)" fg:x="41820" fg:w="34"/><text x="13.5009%" y="255.50"></text></g><g><title>0x7ff80684e83f (33 samples, 0.01%)</title><rect x="13.3010%" y="229" width="0.0105%" height="15" fill="rgb(237,72,25)" fg:x="41978" fg:w="33"/><text x="13.5510%" y="239.50"></text></g><g><title>0x7ff80683f8c6 (2,465 samples, 0.78%)</title><rect x="13.3406%" y="197" width="0.7810%" height="15" fill="rgb(244,70,9)" fg:x="42103" fg:w="2465"/><text x="13.5906%" y="207.50"></text></g><g><title>mach_timebase_info (2,465 samples, 0.78%)</title><rect x="13.3406%" y="181" width="0.7810%" height="15" fill="rgb(217,125,39)" fg:x="42103" fg:w="2465"/><text x="13.5906%" y="191.50"></text></g><g><title>0x7ff80683f91d (77 samples, 0.02%)</title><rect x="14.1242%" y="197" width="0.0244%" height="15" fill="rgb(235,36,10)" fg:x="44576" fg:w="77"/><text x="14.3742%" y="207.50"></text></g><g><title>mach_absolute_time (77 samples, 0.02%)</title><rect x="14.1242%" y="181" width="0.0244%" height="15" fill="rgb(251,123,47)" fg:x="44576" fg:w="77"/><text x="14.3742%" y="191.50"></text></g><g><title>0x7ff80683f93d (49 samples, 0.02%)</title><rect x="14.1501%" y="197" width="0.0155%" height="15" fill="rgb(221,13,13)" fg:x="44658" fg:w="49"/><text x="14.4001%" y="207.50"></text></g><g><title>0x7ff80684e86d (2,646 samples, 0.84%)</title><rect x="13.3339%" y="213" width="0.8384%" height="15" fill="rgb(238,131,9)" fg:x="42082" fg:w="2646"/><text x="13.5839%" y="223.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2,725 samples, 0.86%)</title><rect x="13.3143%" y="229" width="0.8634%" height="15" fill="rgb(211,50,8)" fg:x="42020" fg:w="2725"/><text x="13.5643%" y="239.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (233 samples, 0.07%)</title><rect x="14.1859%" y="229" width="0.0738%" height="15" fill="rgb(245,182,24)" fg:x="44771" fg:w="233"/><text x="14.4359%" y="239.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn::hdc27603f1e2477ca (.llvm.11592589432301260788) (2,525 samples, 0.80%)</title><rect x="14.2598%" y="229" width="0.8001%" height="15" fill="rgb(242,14,37)" fg:x="45004" fg:w="2525"/><text x="14.5098%" y="239.50"></text></g><g><title>mio::poll::Poll::poll (2,384 samples, 0.76%)</title><rect x="14.3045%" y="213" width="0.7554%" height="15" fill="rgb(246,228,12)" fg:x="45145" fg:w="2384"/><text x="14.5545%" y="223.50"></text></g><g><title>kevent (2,276 samples, 0.72%)</title><rect x="14.3387%" y="197" width="0.7212%" height="15" fill="rgb(213,55,15)" fg:x="45253" fg:w="2276"/><text x="14.5887%" y="207.50"></text></g><g><title>tokio::runtime::signal::Driver::process::h0b419bc7ac4e5673 (.llvm.589261732243785605) (56 samples, 0.02%)</title><rect x="15.0598%" y="229" width="0.0177%" height="15" fill="rgb(209,9,3)" fg:x="47529" fg:w="56"/><text x="15.3098%" y="239.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal::h05d49ce90ffebeb3 (.llvm.11592589432301260788) (5,757 samples, 1.82%)</title><rect x="13.2649%" y="245" width="1.8241%" height="15" fill="rgb(230,59,30)" fg:x="41864" fg:w="5757"/><text x="13.5149%" y="255.50">t..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration::h9a70c45c200aace9 (.llvm.589261732243785605) (36 samples, 0.01%)</title><rect x="15.0776%" y="229" width="0.0114%" height="15" fill="rgb(209,121,21)" fg:x="47585" fg:w="36"/><text x="15.3276%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (6,133 samples, 1.94%)</title><rect x="13.2135%" y="261" width="1.9433%" height="15" fill="rgb(220,109,13)" fg:x="41702" fg:w="6133"/><text x="13.4635%" y="271.50">t..</text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (214 samples, 0.07%)</title><rect x="15.0890%" y="245" width="0.0678%" height="15" fill="rgb(232,18,1)" fg:x="47621" fg:w="214"/><text x="15.3390%" y="255.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (94 samples, 0.03%)</title><rect x="15.1270%" y="229" width="0.0298%" height="15" fill="rgb(215,41,42)" fg:x="47741" fg:w="94"/><text x="15.3770%" y="239.50"></text></g><g><title>0x7ff80683f8c6 (59 samples, 0.02%)</title><rect x="15.1628%" y="197" width="0.0187%" height="15" fill="rgb(224,123,36)" fg:x="47854" fg:w="59"/><text x="15.4128%" y="207.50"></text></g><g><title>mach_timebase_info (59 samples, 0.02%)</title><rect x="15.1628%" y="181" width="0.0187%" height="15" fill="rgb(240,125,3)" fg:x="47854" fg:w="59"/><text x="15.4128%" y="191.50"></text></g><g><title>0x7ff80684e86d (65 samples, 0.02%)</title><rect x="15.1628%" y="213" width="0.0206%" height="15" fill="rgb(205,98,50)" fg:x="47854" fg:w="65"/><text x="15.4128%" y="223.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (69 samples, 0.02%)</title><rect x="15.1622%" y="229" width="0.0219%" height="15" fill="rgb(205,185,37)" fg:x="47852" fg:w="69"/><text x="15.4122%" y="239.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn::hdc27603f1e2477ca (.llvm.11592589432301260788) (182 samples, 0.06%)</title><rect x="15.1894%" y="229" width="0.0577%" height="15" fill="rgb(238,207,15)" fg:x="47938" fg:w="182"/><text x="15.4394%" y="239.50"></text></g><g><title>mio::poll::Poll::poll (175 samples, 0.06%)</title><rect x="15.1917%" y="213" width="0.0554%" height="15" fill="rgb(213,199,42)" fg:x="47945" fg:w="175"/><text x="15.4417%" y="223.50"></text></g><g><title>kevent (165 samples, 0.05%)</title><rect x="15.1948%" y="197" width="0.0523%" height="15" fill="rgb(235,201,11)" fg:x="47955" fg:w="165"/><text x="15.4448%" y="207.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal::h05d49ce90ffebeb3 (.llvm.11592589432301260788) (277 samples, 0.09%)</title><rect x="15.1606%" y="245" width="0.0878%" height="15" fill="rgb(207,46,11)" fg:x="47847" fg:w="277"/><text x="15.4106%" y="255.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (104 samples, 0.03%)</title><rect x="15.2633%" y="229" width="0.0330%" height="15" fill="rgb(241,35,35)" fg:x="48171" fg:w="104"/><text x="15.5133%" y="239.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (70 samples, 0.02%)</title><rect x="15.2740%" y="213" width="0.0222%" height="15" fill="rgb(243,32,47)" fg:x="48205" fg:w="70"/><text x="15.5240%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park_yield (590 samples, 0.19%)</title><rect x="15.1568%" y="261" width="0.1869%" height="15" fill="rgb(247,202,23)" fg:x="47835" fg:w="590"/><text x="15.4068%" y="271.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (301 samples, 0.10%)</title><rect x="15.2484%" y="245" width="0.0954%" height="15" fill="rgb(219,102,11)" fg:x="48124" fg:w="301"/><text x="15.4984%" y="255.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (150 samples, 0.05%)</title><rect x="15.2962%" y="229" width="0.0475%" height="15" fill="rgb(243,110,44)" fg:x="48275" fg:w="150"/><text x="15.5462%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (773 samples, 0.24%)</title><rect x="15.3437%" y="261" width="0.2449%" height="15" fill="rgb(222,74,54)" fg:x="48425" fg:w="773"/><text x="15.5937%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Handle::reset_woken (68 samples, 0.02%)</title><rect x="15.5887%" y="261" width="0.0215%" height="15" fill="rgb(216,99,12)" fg:x="49198" fg:w="68"/><text x="15.8387%" y="271.50"></text></g><g><title>&lt;Unknown Address&gt; (74 samples, 0.02%)</title><rect x="15.7170%" y="229" width="0.0234%" height="15" fill="rgb(226,22,26)" fg:x="49603" fg:w="74"/><text x="15.9670%" y="239.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (40 samples, 0.01%)</title><rect x="15.7420%" y="229" width="0.0127%" height="15" fill="rgb(217,163,10)" fg:x="49682" fg:w="40"/><text x="15.9920%" y="239.50"></text></g><g><title>0x7ff8068449e1 (32 samples, 0.01%)</title><rect x="15.8022%" y="165" width="0.0101%" height="15" fill="rgb(213,25,53)" fg:x="49872" fg:w="32"/><text x="16.0522%" y="175.50"></text></g><g><title>open$NOCANCEL (32 samples, 0.01%)</title><rect x="15.8022%" y="149" width="0.0101%" height="15" fill="rgb(252,105,26)" fg:x="49872" fg:w="32"/><text x="16.0522%" y="159.50"></text></g><g><title>__open_nocancel (32 samples, 0.01%)</title><rect x="15.8022%" y="133" width="0.0101%" height="15" fill="rgb(220,39,43)" fg:x="49872" fg:w="32"/><text x="16.0522%" y="143.50"></text></g><g><title>std::sys::pal::unix::fs::readdir (38 samples, 0.01%)</title><rect x="15.8022%" y="181" width="0.0120%" height="15" fill="rgb(229,68,48)" fg:x="49872" fg:w="38"/><text x="16.0522%" y="191.50"></text></g><g><title>common::util::other::dir_recursive (100 samples, 0.03%)</title><rect x="15.7870%" y="197" width="0.0317%" height="15" fill="rgb(252,8,32)" fg:x="49824" fg:w="100"/><text x="16.0370%" y="207.50"></text></g><g><title>storagev2::disk::fd_cache::create_writer_fd (173 samples, 0.05%)</title><rect x="15.8288%" y="197" width="0.0548%" height="15" fill="rgb(223,20,43)" fg:x="49956" fg:w="173"/><text x="16.0788%" y="207.50"></text></g><g><title>std::fs::OpenOptions::_open (156 samples, 0.05%)</title><rect x="15.8342%" y="181" width="0.0494%" height="15" fill="rgb(229,81,49)" fg:x="49973" fg:w="156"/><text x="16.0842%" y="191.50"></text></g><g><title>open (156 samples, 0.05%)</title><rect x="15.8342%" y="165" width="0.0494%" height="15" fill="rgb(236,28,36)" fg:x="49973" fg:w="156"/><text x="16.0842%" y="175.50"></text></g><g><title>__open (156 samples, 0.05%)</title><rect x="15.8342%" y="149" width="0.0494%" height="15" fill="rgb(249,185,26)" fg:x="49973" fg:w="156"/><text x="16.0842%" y="159.50"></text></g><g><title>std::fs::OpenOptions::_open (171 samples, 0.05%)</title><rect x="15.8856%" y="165" width="0.0542%" height="15" fill="rgb(249,174,33)" fg:x="50135" fg:w="171"/><text x="16.1356%" y="175.50"></text></g><g><title>open (171 samples, 0.05%)</title><rect x="15.8856%" y="149" width="0.0542%" height="15" fill="rgb(233,201,37)" fg:x="50135" fg:w="171"/><text x="16.1356%" y="159.50"></text></g><g><title>__open (171 samples, 0.05%)</title><rect x="15.8856%" y="133" width="0.0542%" height="15" fill="rgb(221,78,26)" fg:x="50135" fg:w="171"/><text x="16.1356%" y="143.50"></text></g><g><title>storagev2::disk::meta::WriterPositionPtr::new (178 samples, 0.06%)</title><rect x="15.8837%" y="197" width="0.0564%" height="15" fill="rgb(250,127,30)" fg:x="50129" fg:w="178"/><text x="16.1337%" y="207.50"></text></g><g><title>storagev2::disk::fd_cache::create_writer_fd (176 samples, 0.06%)</title><rect x="15.8843%" y="181" width="0.0558%" height="15" fill="rgb(230,49,44)" fg:x="50131" fg:w="176"/><text x="16.1343%" y="191.50"></text></g><g><title>storagev2::disk::writer::TopicPartitionManager::get_or_create_topic_partition::_{{closure}} (549 samples, 0.17%)</title><rect x="15.7734%" y="213" width="0.1740%" height="15" fill="rgb(229,67,23)" fg:x="49781" fg:w="549"/><text x="16.0234%" y="223.50"></text></g><g><title>storagev2::disk::writer::DiskStorageWriter::new::_$u7b$$u7b$closure$u7d$$u7d$::h0d45c312d0cbc88e (.llvm.724537013135552685) (569 samples, 0.18%)</title><rect x="15.7690%" y="229" width="0.1803%" height="15" fill="rgb(249,83,47)" fg:x="49767" fg:w="569"/><text x="16.0190%" y="239.50"></text></g><g><title>&lt;core::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (40 samples, 0.01%)</title><rect x="15.9521%" y="213" width="0.0127%" height="15" fill="rgb(215,43,3)" fg:x="50345" fg:w="40"/><text x="16.2021%" y="223.50"></text></g><g><title>_platform_memcmp$VARIANT$Base (55 samples, 0.02%)</title><rect x="16.5918%" y="133" width="0.0174%" height="15" fill="rgb(238,154,13)" fg:x="52364" fg:w="55"/><text x="16.8418%" y="143.50"></text></g><g><title>_$LT$std..path..PathBuf$u20$as$u20$core..cmp..PartialEq$GT$::eq::ha8ca9e43c08bccd1 (.llvm.7082537364009689419) (506 samples, 0.16%)</title><rect x="16.5769%" y="149" width="0.1603%" height="15" fill="rgb(219,56,2)" fg:x="52317" fg:w="506"/><text x="16.8269%" y="159.50"></text></g><g><title>std::path::Path::components (396 samples, 0.13%)</title><rect x="16.6118%" y="133" width="0.1255%" height="15" fill="rgb(233,0,4)" fg:x="52427" fg:w="396"/><text x="16.8618%" y="143.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (3,078 samples, 0.98%)</title><rect x="16.2712%" y="165" width="0.9753%" height="15" fill="rgb(235,30,7)" fg:x="51352" fg:w="3078"/><text x="16.5212%" y="175.50"></text></g><g><title>dashmap::DashMap$LT$K$C$V$C$S$GT$::hash_u64::hbd53c616c4e8f94e (.llvm.7082537364009689419) (1,607 samples, 0.51%)</title><rect x="16.7373%" y="149" width="0.5092%" height="15" fill="rgb(250,79,13)" fg:x="52823" fg:w="1607"/><text x="16.9873%" y="159.50"></text></g><g><title>&lt;std::path::PathBuf as core::hash::Hash&gt;::hash (1,435 samples, 0.45%)</title><rect x="16.7918%" y="133" width="0.4547%" height="15" fill="rgb(211,146,34)" fg:x="52995" fg:w="1435"/><text x="17.0418%" y="143.50"></text></g><g><title>_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$::write::hb824622b973a5f90 (.llvm.7082537364009689419) (514 samples, 0.16%)</title><rect x="17.0836%" y="117" width="0.1629%" height="15" fill="rgb(228,22,38)" fg:x="53916" fg:w="514"/><text x="17.3336%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,965 samples, 1.26%)</title><rect x="16.0602%" y="181" width="1.2563%" height="15" fill="rgb(235,168,5)" fg:x="50686" fg:w="3965"/><text x="16.3102%" y="191.50"></text></g><g><title>&lt;dashmap::iter::Iter&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (221 samples, 0.07%)</title><rect x="17.2465%" y="165" width="0.0700%" height="15" fill="rgb(221,155,16)" fg:x="54430" fg:w="221"/><text x="17.4965%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,054 samples, 1.28%)</title><rect x="16.0541%" y="197" width="1.2845%" height="15" fill="rgb(215,215,53)" fg:x="50667" fg:w="4054"/><text x="16.3041%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (70 samples, 0.02%)</title><rect x="17.3165%" y="181" width="0.0222%" height="15" fill="rgb(223,4,10)" fg:x="54651" fg:w="70"/><text x="17.5665%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow::h14a3ae5848e00c88 (.llvm.15150753405431101526) (66 samples, 0.02%)</title><rect x="17.3178%" y="165" width="0.0209%" height="15" fill="rgb(234,103,6)" fg:x="54655" fg:w="66"/><text x="17.5678%" y="175.50"></text></g><g><title>0x7ff8067e026b (59 samples, 0.02%)</title><rect x="17.3200%" y="149" width="0.0187%" height="15" fill="rgb(227,97,0)" fg:x="54662" fg:w="59"/><text x="17.5700%" y="159.50"></text></g><g><title>0x7ff8067dfb9f (57 samples, 0.02%)</title><rect x="17.3206%" y="133" width="0.0181%" height="15" fill="rgb(234,150,53)" fg:x="54664" fg:w="57"/><text x="17.5706%" y="143.50"></text></g><g><title>storagev2::disk::writer::flusher::Flusher::flush_by_state (4,374 samples, 1.39%)</title><rect x="15.9651%" y="213" width="1.3859%" height="15" fill="rgb(228,201,54)" fg:x="50386" fg:w="4374"/><text x="16.2151%" y="223.50"></text></g><g><title>storagev2::disk::writer::DiskStorageWriter::new::_$u7b$$u7b$closure$u7d$$u7d$::h71dd674823a42fca (.llvm.724537013135552685) (4,443 samples, 1.41%)</title><rect x="15.9493%" y="229" width="1.4078%" height="15" fill="rgb(222,22,37)" fg:x="50336" fg:w="4443"/><text x="16.1993%" y="239.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (40 samples, 0.01%)</title><rect x="17.3694%" y="213" width="0.0127%" height="15" fill="rgb(237,53,32)" fg:x="54818" fg:w="40"/><text x="17.6194%" y="223.50"></text></g><g><title>__psynch_cvsignal (249 samples, 0.08%)</title><rect x="17.4062%" y="133" width="0.0789%" height="15" fill="rgb(233,25,53)" fg:x="54934" fg:w="249"/><text x="17.6562%" y="143.50"></text></g><g><title>pthread_cond_signal (253 samples, 0.08%)</title><rect x="17.4052%" y="149" width="0.0802%" height="15" fill="rgb(210,40,34)" fg:x="54931" fg:w="253"/><text x="17.6552%" y="159.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::start_seek (335 samples, 0.11%)</title><rect x="17.3821%" y="213" width="0.1061%" height="15" fill="rgb(241,220,44)" fg:x="54858" fg:w="335"/><text x="17.6321%" y="223.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (331 samples, 0.10%)</title><rect x="17.3833%" y="197" width="0.1049%" height="15" fill="rgb(235,28,35)" fg:x="54862" fg:w="331"/><text x="17.6333%" y="207.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (301 samples, 0.10%)</title><rect x="17.3928%" y="181" width="0.0954%" height="15" fill="rgb(210,56,17)" fg:x="54892" fg:w="301"/><text x="17.6428%" y="191.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (265 samples, 0.08%)</title><rect x="17.4043%" y="165" width="0.0840%" height="15" fill="rgb(224,130,29)" fg:x="54928" fg:w="265"/><text x="17.6543%" y="175.50"></text></g><g><title>__psynch_cvsignal (237 samples, 0.08%)</title><rect x="17.5136%" y="133" width="0.0751%" height="15" fill="rgb(235,212,8)" fg:x="55273" fg:w="237"/><text x="17.7636%" y="143.50"></text></g><g><title>pthread_cond_signal (240 samples, 0.08%)</title><rect x="17.5129%" y="149" width="0.0760%" height="15" fill="rgb(223,33,50)" fg:x="55271" fg:w="240"/><text x="17.7629%" y="159.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (326 samples, 0.10%)</title><rect x="17.4882%" y="213" width="0.1033%" height="15" fill="rgb(219,149,13)" fg:x="55193" fg:w="326"/><text x="17.7382%" y="223.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (315 samples, 0.10%)</title><rect x="17.4917%" y="197" width="0.0998%" height="15" fill="rgb(250,156,29)" fg:x="55204" fg:w="315"/><text x="17.7417%" y="207.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (298 samples, 0.09%)</title><rect x="17.4971%" y="181" width="0.0944%" height="15" fill="rgb(216,193,19)" fg:x="55221" fg:w="298"/><text x="17.7471%" y="191.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (249 samples, 0.08%)</title><rect x="17.5126%" y="165" width="0.0789%" height="15" fill="rgb(216,135,14)" fg:x="55270" fg:w="249"/><text x="17.7626%" y="175.50"></text></g><g><title>tokio::fs::file::Inner::poll_complete_inflight (38 samples, 0.01%)</title><rect x="17.6093%" y="197" width="0.0120%" height="15" fill="rgb(241,47,5)" fg:x="55575" fg:w="38"/><text x="17.8593%" y="207.50"></text></g><g><title>tokio::fs::file::Inner::poll_flush (37 samples, 0.01%)</title><rect x="17.6096%" y="181" width="0.0117%" height="15" fill="rgb(233,42,35)" fg:x="55576" fg:w="37"/><text x="17.8596%" y="191.50"></text></g><g><title>__psynch_cvsignal (251 samples, 0.08%)</title><rect x="17.6340%" y="133" width="0.0795%" height="15" fill="rgb(231,13,6)" fg:x="55653" fg:w="251"/><text x="17.8840%" y="143.50"></text></g><g><title>pthread_cond_signal (256 samples, 0.08%)</title><rect x="17.6330%" y="149" width="0.0811%" height="15" fill="rgb(207,181,40)" fg:x="55650" fg:w="256"/><text x="17.8830%" y="159.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (297 samples, 0.09%)</title><rect x="17.6223%" y="181" width="0.0941%" height="15" fill="rgb(254,173,49)" fg:x="55616" fg:w="297"/><text x="17.8723%" y="191.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (263 samples, 0.08%)</title><rect x="17.6330%" y="165" width="0.0833%" height="15" fill="rgb(221,1,38)" fg:x="55650" fg:w="263"/><text x="17.8830%" y="175.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (326 samples, 0.10%)</title><rect x="17.6213%" y="197" width="0.1033%" height="15" fill="rgb(206,124,46)" fg:x="55613" fg:w="326"/><text x="17.8713%" y="207.50"></text></g><g><title>tokio::fs::file::File::set_len::_{{closure}} (408 samples, 0.13%)</title><rect x="17.6023%" y="213" width="0.1293%" height="15" fill="rgb(249,21,11)" fg:x="55553" fg:w="408"/><text x="17.8523%" y="223.50"></text></g><g><title>storagev2::disk::writer::flusher::Flusher::new::_$u7b$$u7b$closure$u7d$$u7d$::h1864b876068895a2 (.llvm.724537013135552685) (1,203 samples, 0.38%)</title><rect x="17.3570%" y="229" width="0.3812%" height="15" fill="rgb(222,201,40)" fg:x="54779" fg:w="1203"/><text x="17.6070%" y="239.50"></text></g><g><title>&lt;Unknown Address&gt; (64 samples, 0.02%)</title><rect x="17.9014%" y="213" width="0.0203%" height="15" fill="rgb(235,61,29)" fg:x="56497" fg:w="64"/><text x="18.1514%" y="223.50"></text></g><g><title>&lt;tokio_util::sync::cancellation_token::WaitForCancellationFuture as core::future::future::Future&gt;::poll (42 samples, 0.01%)</title><rect x="17.9315%" y="197" width="0.0133%" height="15" fill="rgb(219,207,3)" fg:x="56592" fg:w="42"/><text x="18.1815%" y="207.50"></text></g><g><title>tokio::sync::mpsc::list::Rx$LT$T$GT$::pop::h12c51d67c608f638 (.llvm.15150753405431101526) (39 samples, 0.01%)</title><rect x="17.9562%" y="181" width="0.0124%" height="15" fill="rgb(222,56,46)" fg:x="56670" fg:w="39"/><text x="18.2062%" y="191.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (80 samples, 0.03%)</title><rect x="17.9470%" y="197" width="0.0253%" height="15" fill="rgb(239,76,54)" fg:x="56641" fg:w="80"/><text x="18.1970%" y="207.50"></text></g><g><title>&lt;core::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (153 samples, 0.05%)</title><rect x="17.9242%" y="213" width="0.0485%" height="15" fill="rgb(231,124,27)" fg:x="56569" fg:w="153"/><text x="18.1742%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;storagev2::disk::writer::buffer::PartitionWriterBuffer::flush::{{closure}}&gt; (37 samples, 0.01%)</title><rect x="17.9835%" y="213" width="0.0117%" height="15" fill="rgb(249,195,6)" fg:x="56756" fg:w="37"/><text x="18.2335%" y="223.50"></text></g><g><title>0x7ff8067b5225 (67 samples, 0.02%)</title><rect x="19.0056%" y="197" width="0.0212%" height="15" fill="rgb(237,174,47)" fg:x="59982" fg:w="67"/><text x="19.2556%" y="207.50"></text></g><g><title>0x7ff8067b5313 (42 samples, 0.01%)</title><rect x="19.0487%" y="197" width="0.0133%" height="15" fill="rgb(206,201,31)" fg:x="60118" fg:w="42"/><text x="19.2987%" y="207.50"></text></g><g><title>0x7ff8067b742f (57 samples, 0.02%)</title><rect x="19.0858%" y="181" width="0.0181%" height="15" fill="rgb(231,57,52)" fg:x="60235" fg:w="57"/><text x="19.3358%" y="191.50"></text></g><g><title>0x7ff8067b622a (88 samples, 0.03%)</title><rect x="19.0826%" y="197" width="0.0279%" height="15" fill="rgb(248,177,22)" fg:x="60225" fg:w="88"/><text x="19.3326%" y="207.50"></text></g><g><title>0x7ff8067b9d11 (49 samples, 0.02%)</title><rect x="19.1514%" y="197" width="0.0155%" height="15" fill="rgb(215,211,37)" fg:x="60442" fg:w="49"/><text x="19.4014%" y="207.50"></text></g><g><title>0x7ff8067ce738 (75 samples, 0.02%)</title><rect x="19.1723%" y="149" width="0.0238%" height="15" fill="rgb(241,128,51)" fg:x="60508" fg:w="75"/><text x="19.4223%" y="159.50"></text></g><g><title>madvise (75 samples, 0.02%)</title><rect x="19.1723%" y="133" width="0.0238%" height="15" fill="rgb(227,165,31)" fg:x="60508" fg:w="75"/><text x="19.4223%" y="143.50"></text></g><g><title>0x7ff8067befc6 (76 samples, 0.02%)</title><rect x="19.1723%" y="165" width="0.0241%" height="15" fill="rgb(228,167,24)" fg:x="60508" fg:w="76"/><text x="19.4223%" y="175.50"></text></g><g><title>0x7ff8067d7043 (78 samples, 0.02%)</title><rect x="19.1723%" y="181" width="0.0247%" height="15" fill="rgb(228,143,12)" fg:x="60508" fg:w="78"/><text x="19.4223%" y="191.50"></text></g><g><title>0x7ff8067bef81 (79 samples, 0.03%)</title><rect x="19.1723%" y="197" width="0.0250%" height="15" fill="rgb(249,149,8)" fg:x="60508" fg:w="79"/><text x="19.4223%" y="207.50"></text></g><g><title>0x7ff8067d67df (74 samples, 0.02%)</title><rect x="19.2382%" y="197" width="0.0234%" height="15" fill="rgb(243,35,44)" fg:x="60716" fg:w="74"/><text x="19.4882%" y="207.50"></text></g><g><title>0x7ff8067d6844 (84 samples, 0.03%)</title><rect x="19.2724%" y="197" width="0.0266%" height="15" fill="rgb(246,89,9)" fg:x="60824" fg:w="84"/><text x="19.5224%" y="207.50"></text></g><g><title>0x7ff8067d68aa (164 samples, 0.05%)</title><rect x="19.3095%" y="197" width="0.0520%" height="15" fill="rgb(233,213,13)" fg:x="60941" fg:w="164"/><text x="19.5595%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (160 samples, 0.05%)</title><rect x="19.3108%" y="181" width="0.0507%" height="15" fill="rgb(233,141,41)" fg:x="60945" fg:w="160"/><text x="19.5608%" y="191.50"></text></g><g><title>0x7ff8067d6961 (55 samples, 0.02%)</title><rect x="19.3798%" y="197" width="0.0174%" height="15" fill="rgb(239,167,4)" fg:x="61163" fg:w="55"/><text x="19.6298%" y="207.50"></text></g><g><title>0x7ff8067d6984 (152 samples, 0.05%)</title><rect x="19.3998%" y="197" width="0.0482%" height="15" fill="rgb(209,217,16)" fg:x="61226" fg:w="152"/><text x="19.6498%" y="207.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (56 samples, 0.02%)</title><rect x="19.7949%" y="165" width="0.0177%" height="15" fill="rgb(219,88,35)" fg:x="62473" fg:w="56"/><text x="20.0449%" y="175.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (243 samples, 0.08%)</title><rect x="19.7439%" y="181" width="0.0770%" height="15" fill="rgb(220,193,23)" fg:x="62312" fg:w="243"/><text x="19.9939%" y="191.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (23,497 samples, 7.45%)</title><rect x="19.8260%" y="181" width="7.4452%" height="15" fill="rgb(230,90,52)" fg:x="62571" fg:w="23497"/><text x="20.0760%" y="191.50">_platform_..</text></g><g><title>0x7ff8067ce2b0 (60 samples, 0.02%)</title><rect x="27.2829%" y="69" width="0.0190%" height="15" fill="rgb(252,106,19)" fg:x="86105" fg:w="60"/><text x="27.5329%" y="79.50"></text></g><g><title>mach_vm_map (60 samples, 0.02%)</title><rect x="27.2829%" y="53" width="0.0190%" height="15" fill="rgb(206,74,20)" fg:x="86105" fg:w="60"/><text x="27.5329%" y="63.50"></text></g><g><title>_kernelrpc_mach_vm_map_trap (59 samples, 0.02%)</title><rect x="27.2832%" y="37" width="0.0187%" height="15" fill="rgb(230,138,44)" fg:x="86106" fg:w="59"/><text x="27.5332%" y="47.50"></text></g><g><title>0x7ff8067bfcaf (61 samples, 0.02%)</title><rect x="27.2829%" y="85" width="0.0193%" height="15" fill="rgb(235,182,43)" fg:x="86105" fg:w="61"/><text x="27.5329%" y="95.50"></text></g><g><title>0x7ff8067b936f (64 samples, 0.02%)</title><rect x="27.2825%" y="117" width="0.0203%" height="15" fill="rgb(242,16,51)" fg:x="86104" fg:w="64"/><text x="27.5325%" y="127.50"></text></g><g><title>0x7ff8067b62da (63 samples, 0.02%)</title><rect x="27.2829%" y="101" width="0.0200%" height="15" fill="rgb(248,9,4)" fg:x="86105" fg:w="63"/><text x="27.5329%" y="111.50"></text></g><g><title>0x7ff8067b93b0 (2,887 samples, 0.91%)</title><rect x="27.3028%" y="117" width="0.9148%" height="15" fill="rgb(210,31,22)" fg:x="86168" fg:w="2887"/><text x="27.5528%" y="127.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (2,887 samples, 0.91%)</title><rect x="27.3028%" y="101" width="0.9148%" height="15" fill="rgb(239,54,39)" fg:x="86168" fg:w="2887"/><text x="27.5528%" y="111.50"></text></g><g><title>0x7ff8067ce62e (436 samples, 0.14%)</title><rect x="28.2255%" y="69" width="0.1381%" height="15" fill="rgb(230,99,41)" fg:x="89080" fg:w="436"/><text x="28.4755%" y="79.50"></text></g><g><title>mach_vm_deallocate (436 samples, 0.14%)</title><rect x="28.2255%" y="53" width="0.1381%" height="15" fill="rgb(253,106,12)" fg:x="89080" fg:w="436"/><text x="28.4755%" y="63.50"></text></g><g><title>_kernelrpc_mach_vm_deallocate_trap (434 samples, 0.14%)</title><rect x="28.2261%" y="37" width="0.1375%" height="15" fill="rgb(213,46,41)" fg:x="89082" fg:w="434"/><text x="28.4761%" y="47.50"></text></g><g><title>0x7ff8067bfeda (438 samples, 0.14%)</title><rect x="28.2255%" y="85" width="0.1388%" height="15" fill="rgb(215,133,35)" fg:x="89080" fg:w="438"/><text x="28.4755%" y="95.50"></text></g><g><title>0x7ff8067dfb9f (3,514 samples, 1.11%)</title><rect x="27.2734%" y="133" width="1.1134%" height="15" fill="rgb(213,28,5)" fg:x="86075" fg:w="3514"/><text x="27.5234%" y="143.50"></text></g><g><title>0x7ff8067b93bd (534 samples, 0.17%)</title><rect x="28.2176%" y="117" width="0.1692%" height="15" fill="rgb(215,77,49)" fg:x="89055" fg:w="534"/><text x="28.4676%" y="127.50"></text></g><g><title>0x7ff8067caaa5 (534 samples, 0.17%)</title><rect x="28.2176%" y="101" width="0.1692%" height="15" fill="rgb(248,100,22)" fg:x="89055" fg:w="534"/><text x="28.4676%" y="111.50"></text></g><g><title>0x7ff8067c002d (64 samples, 0.02%)</title><rect x="28.3665%" y="85" width="0.0203%" height="15" fill="rgb(208,67,9)" fg:x="89525" fg:w="64"/><text x="28.6165%" y="95.50"></text></g><g><title>madvise (63 samples, 0.02%)</title><rect x="28.3668%" y="69" width="0.0200%" height="15" fill="rgb(219,133,21)" fg:x="89526" fg:w="63"/><text x="28.6168%" y="79.50"></text></g><g><title>0x7ff8067e026b (3,517 samples, 1.11%)</title><rect x="27.2730%" y="149" width="1.1144%" height="15" fill="rgb(246,46,29)" fg:x="86074" fg:w="3517"/><text x="27.5230%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3,524 samples, 1.12%)</title><rect x="27.2711%" y="181" width="1.1166%" height="15" fill="rgb(246,185,52)" fg:x="86068" fg:w="3524"/><text x="27.5211%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow::hf558d70e8ae63120 (.llvm.3614328785669206289) (3,523 samples, 1.12%)</title><rect x="27.2715%" y="165" width="1.1163%" height="15" fill="rgb(252,136,11)" fg:x="86069" fg:w="3523"/><text x="27.5215%" y="175.50"></text></g><g><title>0x7ff8067bbb4e (35 samples, 0.01%)</title><rect x="28.5110%" y="133" width="0.0111%" height="15" fill="rgb(219,138,53)" fg:x="89981" fg:w="35"/><text x="28.7610%" y="143.50"></text></g><g><title>0x7ff8067b7306 (33 samples, 0.01%)</title><rect x="28.5554%" y="101" width="0.0105%" height="15" fill="rgb(211,51,23)" fg:x="90121" fg:w="33"/><text x="28.8054%" y="111.50"></text></g><g><title>0x7ff8067b734b (48 samples, 0.02%)</title><rect x="28.5696%" y="101" width="0.0152%" height="15" fill="rgb(247,221,28)" fg:x="90166" fg:w="48"/><text x="28.8196%" y="111.50"></text></g><g><title>0x7ff8067b7b46 (42 samples, 0.01%)</title><rect x="28.6007%" y="85" width="0.0133%" height="15" fill="rgb(251,222,45)" fg:x="90264" fg:w="42"/><text x="28.8507%" y="95.50"></text></g><g><title>0x7ff8067b80ce (60 samples, 0.02%)</title><rect x="28.6710%" y="85" width="0.0190%" height="15" fill="rgb(217,162,53)" fg:x="90486" fg:w="60"/><text x="28.9210%" y="95.50"></text></g><g><title>0x7ff8067b742f (390 samples, 0.12%)</title><rect x="28.5861%" y="101" width="0.1236%" height="15" fill="rgb(229,93,14)" fg:x="90218" fg:w="390"/><text x="28.8361%" y="111.50"></text></g><g><title>0x7ff8067b76f2 (33 samples, 0.01%)</title><rect x="28.7116%" y="101" width="0.0105%" height="15" fill="rgb(209,67,49)" fg:x="90614" fg:w="33"/><text x="28.9616%" y="111.50"></text></g><g><title>0x7ff8067bdd8f (605 samples, 0.19%)</title><rect x="28.5547%" y="117" width="0.1917%" height="15" fill="rgb(213,87,29)" fg:x="90119" fg:w="605"/><text x="28.8047%" y="127.50"></text></g><g><title>0x7ff8067bdf2a (36 samples, 0.01%)</title><rect x="28.7502%" y="117" width="0.0114%" height="15" fill="rgb(205,151,52)" fg:x="90736" fg:w="36"/><text x="29.0002%" y="127.50"></text></g><g><title>0x7ff8067ba8a7 (32 samples, 0.01%)</title><rect x="28.8361%" y="69" width="0.0101%" height="15" fill="rgb(253,215,39)" fg:x="91007" fg:w="32"/><text x="29.0861%" y="79.50"></text></g><g><title>0x7ff8067ba2bc (74 samples, 0.02%)</title><rect x="28.8291%" y="85" width="0.0234%" height="15" fill="rgb(221,220,41)" fg:x="90985" fg:w="74"/><text x="29.0791%" y="95.50"></text></g><g><title>0x7ff8067c5a47 (36 samples, 0.01%)</title><rect x="28.8611%" y="85" width="0.0114%" height="15" fill="rgb(218,133,21)" fg:x="91086" fg:w="36"/><text x="29.1111%" y="95.50"></text></g><g><title>0x7ff8067b9d11 (216 samples, 0.07%)</title><rect x="28.8044%" y="101" width="0.0684%" height="15" fill="rgb(221,193,43)" fg:x="90907" fg:w="216"/><text x="29.0544%" y="111.50"></text></g><g><title>0x7ff8067b9d24 (32 samples, 0.01%)</title><rect x="28.8735%" y="101" width="0.0101%" height="15" fill="rgb(240,128,52)" fg:x="91125" fg:w="32"/><text x="29.1235%" y="111.50"></text></g><g><title>0x7ff8067be058 (337 samples, 0.11%)</title><rect x="28.7813%" y="117" width="0.1068%" height="15" fill="rgb(253,114,12)" fg:x="90834" fg:w="337"/><text x="29.0313%" y="127.50"></text></g><g><title>0x7ff8067dfd99 (1,103 samples, 0.35%)</title><rect x="28.5395%" y="133" width="0.3495%" height="15" fill="rgb(215,223,47)" fg:x="90071" fg:w="1103"/><text x="28.7895%" y="143.50"></text></g><g><title>0x7ff8067e0345 (1,237 samples, 0.39%)</title><rect x="28.5024%" y="149" width="0.3920%" height="15" fill="rgb(248,225,23)" fg:x="89954" fg:w="1237"/><text x="28.7524%" y="159.50"></text></g><g><title>__rdl_alloc (1,255 samples, 0.40%)</title><rect x="28.4977%" y="165" width="0.3977%" height="15" fill="rgb(250,108,0)" fg:x="89939" fg:w="1255"/><text x="28.7477%" y="175.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (800 samples, 0.25%)</title><rect x="29.0012%" y="149" width="0.2535%" height="15" fill="rgb(228,208,7)" fg:x="91528" fg:w="800"/><text x="29.2512%" y="159.50"></text></g><g><title>_pthread_mutex_firstfit_wake (780 samples, 0.25%)</title><rect x="29.0075%" y="133" width="0.2471%" height="15" fill="rgb(244,45,10)" fg:x="91548" fg:w="780"/><text x="29.2575%" y="143.50"></text></g><g><title>__psynch_mutexdrop (778 samples, 0.25%)</title><rect x="29.0081%" y="117" width="0.2465%" height="15" fill="rgb(207,125,25)" fg:x="91550" fg:w="778"/><text x="29.2581%" y="127.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (457 samples, 0.14%)</title><rect x="29.2547%" y="149" width="0.1448%" height="15" fill="rgb(210,195,18)" fg:x="92328" fg:w="457"/><text x="29.5047%" y="159.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (146 samples, 0.05%)</title><rect x="29.3532%" y="133" width="0.0463%" height="15" fill="rgb(249,80,12)" fg:x="92639" fg:w="146"/><text x="29.6032%" y="143.50"></text></g><g><title>__psynch_cvwait (232 samples, 0.07%)</title><rect x="29.4974%" y="117" width="0.0735%" height="15" fill="rgb(221,65,9)" fg:x="93094" fg:w="232"/><text x="29.7474%" y="127.50"></text></g><g><title>_pthread_cond_wait (263 samples, 0.08%)</title><rect x="29.4955%" y="133" width="0.0833%" height="15" fill="rgb(235,49,36)" fg:x="93088" fg:w="263"/><text x="29.7455%" y="143.50"></text></g><g><title>cthread_yield (536 samples, 0.17%)</title><rect x="29.5788%" y="133" width="0.1698%" height="15" fill="rgb(225,32,20)" fg:x="93351" fg:w="536"/><text x="29.8288%" y="143.50"></text></g><g><title>swtch_pri (517 samples, 0.16%)</title><rect x="29.5848%" y="117" width="0.1638%" height="15" fill="rgb(215,141,46)" fg:x="93370" fg:w="517"/><text x="29.8348%" y="127.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1,116 samples, 0.35%)</title><rect x="29.3995%" y="149" width="0.3536%" height="15" fill="rgb(250,160,47)" fg:x="92785" fg:w="1116"/><text x="29.6495%" y="159.50"></text></g><g><title>__psynch_cvsignal (19,595 samples, 6.21%)</title><rect x="29.8507%" y="117" width="6.2088%" height="15" fill="rgb(216,222,40)" fg:x="94209" fg:w="19595"/><text x="30.1007%" y="127.50">__psynch..</text></g><g><title>pthread_cond_signal (19,808 samples, 6.28%)</title><rect x="29.8123%" y="133" width="6.2763%" height="15" fill="rgb(234,217,39)" fg:x="94088" fg:w="19808"/><text x="30.0623%" y="143.50">pthread_..</text></g><g><title>_pthread_cond_updateval (92 samples, 0.03%)</title><rect x="36.0595%" y="117" width="0.0292%" height="15" fill="rgb(207,178,40)" fg:x="113804" fg:w="92"/><text x="36.3095%" y="127.50"></text></g><g><title>pthread_mutex_lock (245 samples, 0.08%)</title><rect x="36.0886%" y="133" width="0.0776%" height="15" fill="rgb(221,136,13)" fg:x="113896" fg:w="245"/><text x="36.3386%" y="143.50"></text></g><g><title>0x7ff80683f8c6 (101 samples, 0.03%)</title><rect x="36.1729%" y="101" width="0.0320%" height="15" fill="rgb(249,199,10)" fg:x="114162" fg:w="101"/><text x="36.4229%" y="111.50"></text></g><g><title>mach_timebase_info (101 samples, 0.03%)</title><rect x="36.1729%" y="85" width="0.0320%" height="15" fill="rgb(249,222,13)" fg:x="114162" fg:w="101"/><text x="36.4229%" y="95.50"></text></g><g><title>0x7ff80683f91d (72 samples, 0.02%)</title><rect x="36.2077%" y="101" width="0.0228%" height="15" fill="rgb(244,185,38)" fg:x="114272" fg:w="72"/><text x="36.4577%" y="111.50"></text></g><g><title>mach_absolute_time (72 samples, 0.02%)</title><rect x="36.2077%" y="85" width="0.0228%" height="15" fill="rgb(236,202,9)" fg:x="114272" fg:w="72"/><text x="36.4577%" y="95.50"></text></g><g><title>0x7ff80684e86d (225 samples, 0.07%)</title><rect x="36.1716%" y="117" width="0.0713%" height="15" fill="rgb(250,229,37)" fg:x="114158" fg:w="225"/><text x="36.4216%" y="127.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (253 samples, 0.08%)</title><rect x="36.1662%" y="133" width="0.0802%" height="15" fill="rgb(206,174,23)" fg:x="114141" fg:w="253"/><text x="36.4162%" y="143.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (20,495 samples, 6.49%)</title><rect x="29.7531%" y="149" width="6.4940%" height="15" fill="rgb(211,33,43)" fg:x="93901" fg:w="20495"/><text x="30.0031%" y="159.50">parking_l..</text></g><g><title>pthread_mutex_unlock (74 samples, 0.02%)</title><rect x="36.2470%" y="149" width="0.0234%" height="15" fill="rgb(245,58,50)" fg:x="114396" fg:w="74"/><text x="36.4970%" y="159.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (24,891 samples, 7.89%)</title><rect x="28.3877%" y="181" width="7.8869%" height="15" fill="rgb(244,68,36)" fg:x="89592" fg:w="24891"/><text x="28.6377%" y="191.50">tokio::runt..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (23,258 samples, 7.37%)</title><rect x="28.9052%" y="165" width="7.3694%" height="15" fill="rgb(232,229,15)" fg:x="91225" fg:w="23258"/><text x="29.1552%" y="175.50">tokio::run..</text></g><g><title>_platform_bzero$VARIANT$Haswell (61 samples, 0.02%)</title><rect x="36.3174%" y="149" width="0.0193%" height="15" fill="rgb(254,30,23)" fg:x="114618" fg:w="61"/><text x="36.5674%" y="159.50"></text></g><g><title>0x7ff8067b9b8b (90 samples, 0.03%)</title><rect x="36.3174%" y="165" width="0.0285%" height="15" fill="rgb(235,160,14)" fg:x="114618" fg:w="90"/><text x="36.5674%" y="175.50"></text></g><g><title>0x7ff8067b9ba8 (48 samples, 0.02%)</title><rect x="36.3475%" y="165" width="0.0152%" height="15" fill="rgb(212,155,44)" fg:x="114713" fg:w="48"/><text x="36.5975%" y="175.50"></text></g><g><title>0x7ff8067bac2e (91 samples, 0.03%)</title><rect x="36.3833%" y="133" width="0.0288%" height="15" fill="rgb(226,2,50)" fg:x="114826" fg:w="91"/><text x="36.6333%" y="143.50"></text></g><g><title>0x7ff8067ba0f3 (111 samples, 0.04%)</title><rect x="36.3804%" y="149" width="0.0352%" height="15" fill="rgb(234,177,6)" fg:x="114817" fg:w="111"/><text x="36.6304%" y="159.50"></text></g><g><title>0x7ff8067bac2e (48 samples, 0.02%)</title><rect x="36.4387%" y="133" width="0.0152%" height="15" fill="rgb(217,24,9)" fg:x="115001" fg:w="48"/><text x="36.6887%" y="143.50"></text></g><g><title>0x7ff8067ba222 (124 samples, 0.04%)</title><rect x="36.4337%" y="149" width="0.0393%" height="15" fill="rgb(220,13,46)" fg:x="114985" fg:w="124"/><text x="36.6837%" y="159.50"></text></g><g><title>0x7ff8067ba8a7 (40 samples, 0.01%)</title><rect x="36.4894%" y="133" width="0.0127%" height="15" fill="rgb(239,221,27)" fg:x="115161" fg:w="40"/><text x="36.7394%" y="143.50"></text></g><g><title>0x7ff8067ba2bc (113 samples, 0.04%)</title><rect x="36.4742%" y="149" width="0.0358%" height="15" fill="rgb(222,198,25)" fg:x="115113" fg:w="113"/><text x="36.7242%" y="159.50"></text></g><g><title>0x7ff8067c5a47 (68 samples, 0.02%)</title><rect x="36.5271%" y="149" width="0.0215%" height="15" fill="rgb(211,99,13)" fg:x="115280" fg:w="68"/><text x="36.7771%" y="159.50"></text></g><g><title>0x7ff8067b9d11 (583 samples, 0.18%)</title><rect x="36.3643%" y="165" width="0.1847%" height="15" fill="rgb(232,111,31)" fg:x="114766" fg:w="583"/><text x="36.6143%" y="175.50"></text></g><g><title>0x7ff8067b9d6d (66 samples, 0.02%)</title><rect x="36.5601%" y="165" width="0.0209%" height="15" fill="rgb(245,82,37)" fg:x="115384" fg:w="66"/><text x="36.8101%" y="175.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (1,149 samples, 0.36%)</title><rect x="36.2746%" y="181" width="0.3641%" height="15" fill="rgb(227,149,46)" fg:x="114483" fg:w="1149"/><text x="36.5246%" y="191.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (43 samples, 0.01%)</title><rect x="36.6250%" y="165" width="0.0136%" height="15" fill="rgb(218,36,50)" fg:x="115589" fg:w="43"/><text x="36.8750%" y="175.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (54,190 samples, 17.17%)</title><rect x="19.4686%" y="197" width="17.1704%" height="15" fill="rgb(226,80,48)" fg:x="61443" fg:w="54190"/><text x="19.7186%" y="207.50">&lt;tokio::fs::file::File as t..</text></g><g><title>bytes::bytes::owned_drop (255 samples, 0.08%)</title><rect x="36.6675%" y="197" width="0.0808%" height="15" fill="rgb(238,224,15)" fg:x="115723" fg:w="255"/><text x="36.9175%" y="207.50"></text></g><g><title>bytes::bytes::shared_drop::h2f4486fd7f0a6f4b (.llvm.6858511044588184240) (214 samples, 0.07%)</title><rect x="36.7483%" y="197" width="0.0678%" height="15" fill="rgb(241,136,10)" fg:x="115978" fg:w="214"/><text x="36.9983%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u64,std::io::error::Error&gt;&gt; (51 samples, 0.02%)</title><rect x="36.8161%" y="197" width="0.0162%" height="15" fill="rgb(208,32,45)" fg:x="116192" fg:w="51"/><text x="37.0661%" y="207.50"></text></g><g><title>0x7ff8067b894c (39 samples, 0.01%)</title><rect x="37.4577%" y="181" width="0.0124%" height="15" fill="rgb(207,135,9)" fg:x="118217" fg:w="39"/><text x="37.7077%" y="191.50"></text></g><g><title>0x7ff8067b8982 (32 samples, 0.01%)</title><rect x="37.4701%" y="181" width="0.0101%" height="15" fill="rgb(206,86,44)" fg:x="118256" fg:w="32"/><text x="37.7201%" y="191.50"></text></g><g><title>0x7ff8067b8b90 (54 samples, 0.02%)</title><rect x="37.4951%" y="181" width="0.0171%" height="15" fill="rgb(245,177,15)" fg:x="118335" fg:w="54"/><text x="37.7451%" y="191.50"></text></g><g><title>0x7ff8067b8c70 (59 samples, 0.02%)</title><rect x="37.5138%" y="181" width="0.0187%" height="15" fill="rgb(206,64,50)" fg:x="118394" fg:w="59"/><text x="37.7638%" y="191.50"></text></g><g><title>0x7ff8067b8ca8 (35 samples, 0.01%)</title><rect x="37.5325%" y="181" width="0.0111%" height="15" fill="rgb(234,36,40)" fg:x="118453" fg:w="35"/><text x="37.7825%" y="191.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::pop (2,333 samples, 0.74%)</title><rect x="36.8323%" y="197" width="0.7392%" height="15" fill="rgb(213,64,8)" fg:x="116243" fg:w="2333"/><text x="37.0823%" y="207.50"></text></g><g><title>0x7ff8068468f7 (35 samples, 0.01%)</title><rect x="37.5899%" y="181" width="0.0111%" height="15" fill="rgb(210,75,36)" fg:x="118634" fg:w="35"/><text x="37.8399%" y="191.50"></text></g><g><title>0x7ff80683f91d (151 samples, 0.05%)</title><rect x="37.6298%" y="165" width="0.0478%" height="15" fill="rgb(229,88,21)" fg:x="118760" fg:w="151"/><text x="37.8798%" y="175.50"></text></g><g><title>mach_absolute_time (151 samples, 0.05%)</title><rect x="37.6298%" y="149" width="0.0478%" height="15" fill="rgb(252,204,47)" fg:x="118760" fg:w="151"/><text x="37.8798%" y="159.50"></text></g><g><title>0x7ff80683f93d (88 samples, 0.03%)</title><rect x="37.6808%" y="165" width="0.0279%" height="15" fill="rgb(208,77,27)" fg:x="118921" fg:w="88"/><text x="37.9308%" y="175.50"></text></g><g><title>0x7ff80684e86d (301 samples, 0.10%)</title><rect x="37.6139%" y="181" width="0.0954%" height="15" fill="rgb(221,76,26)" fg:x="118710" fg:w="301"/><text x="37.8639%" y="191.50"></text></g><g><title>0x7ff806846923 (347 samples, 0.11%)</title><rect x="37.7207%" y="165" width="0.1099%" height="15" fill="rgb(225,139,18)" fg:x="119047" fg:w="347"/><text x="37.9707%" y="175.50"></text></g><g><title>__commpage_gettimeofday_internal (346 samples, 0.11%)</title><rect x="37.7210%" y="149" width="0.1096%" height="15" fill="rgb(230,137,11)" fg:x="119048" fg:w="346"/><text x="37.9710%" y="159.50"></text></g><g><title>mach_absolute_time (184 samples, 0.06%)</title><rect x="37.7724%" y="133" width="0.0583%" height="15" fill="rgb(212,28,1)" fg:x="119210" fg:w="184"/><text x="38.0224%" y="143.50"></text></g><g><title>0x7ff80684e8b3 (441 samples, 0.14%)</title><rect x="37.7150%" y="181" width="0.1397%" height="15" fill="rgb(248,164,17)" fg:x="119029" fg:w="441"/><text x="37.9650%" y="191.50"></text></g><g><title>__commpage_gettimeofday (53 samples, 0.02%)</title><rect x="37.8380%" y="165" width="0.0168%" height="15" fill="rgb(222,171,42)" fg:x="119417" fg:w="53"/><text x="38.0880%" y="175.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (919 samples, 0.29%)</title><rect x="37.5715%" y="197" width="0.2912%" height="15" fill="rgb(243,84,45)" fg:x="118576" fg:w="919"/><text x="37.8215%" y="207.50"></text></g><g><title>0x7ff80683f8c6 (117 samples, 0.04%)</title><rect x="37.8766%" y="149" width="0.0371%" height="15" fill="rgb(252,49,23)" fg:x="119539" fg:w="117"/><text x="38.1266%" y="159.50"></text></g><g><title>mach_timebase_info (117 samples, 0.04%)</title><rect x="37.8766%" y="133" width="0.0371%" height="15" fill="rgb(215,19,7)" fg:x="119539" fg:w="117"/><text x="38.1266%" y="143.50"></text></g><g><title>0x7ff80683f91d (65 samples, 0.02%)</title><rect x="37.9150%" y="149" width="0.0206%" height="15" fill="rgb(238,81,41)" fg:x="119660" fg:w="65"/><text x="38.1650%" y="159.50"></text></g><g><title>mach_absolute_time (65 samples, 0.02%)</title><rect x="37.9150%" y="133" width="0.0206%" height="15" fill="rgb(210,199,37)" fg:x="119660" fg:w="65"/><text x="38.1650%" y="143.50"></text></g><g><title>0x7ff80684e86d (227 samples, 0.07%)</title><rect x="37.8750%" y="165" width="0.0719%" height="15" fill="rgb(244,192,49)" fg:x="119534" fg:w="227"/><text x="38.1250%" y="175.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (266 samples, 0.08%)</title><rect x="37.8671%" y="181" width="0.0843%" height="15" fill="rgb(226,211,11)" fg:x="119509" fg:w="266"/><text x="38.1171%" y="191.50"></text></g><g><title>std::time::Instant::elapsed (293 samples, 0.09%)</title><rect x="37.8627%" y="197" width="0.0928%" height="15" fill="rgb(236,162,54)" fg:x="119495" fg:w="293"/><text x="38.1127%" y="207.50"></text></g><g><title>std::time::SystemTime::duration_since (70 samples, 0.02%)</title><rect x="37.9562%" y="197" width="0.0222%" height="15" fill="rgb(220,229,9)" fg:x="119790" fg:w="70"/><text x="38.2062%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (37 samples, 0.01%)</title><rect x="37.9666%" y="181" width="0.0117%" height="15" fill="rgb(250,87,22)" fg:x="119823" fg:w="37"/><text x="38.2166%" y="191.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked::h75cb40919419cfec (.llvm.6710397505999662456) (53 samples, 0.02%)</title><rect x="37.9812%" y="197" width="0.0168%" height="15" fill="rgb(239,43,17)" fg:x="119869" fg:w="53"/><text x="38.2312%" y="207.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (58 samples, 0.02%)</title><rect x="38.1203%" y="181" width="0.0184%" height="15" fill="rgb(231,177,25)" fg:x="120308" fg:w="58"/><text x="38.3703%" y="191.50"></text></g><g><title>storagev2::disk::writer::buffer::PartitionWriterBuffer::flush::_{{closure}} (63,575 samples, 20.14%)</title><rect x="17.9965%" y="213" width="20.1441%" height="15" fill="rgb(219,179,1)" fg:x="56797" fg:w="63575"/><text x="18.2465%" y="223.50">storagev2::disk::writer::buffer:..</text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::write::_{{closure}} (450 samples, 0.14%)</title><rect x="37.9980%" y="197" width="0.1426%" height="15" fill="rgb(238,219,53)" fg:x="119922" fg:w="450"/><text x="38.2480%" y="207.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (35 samples, 0.01%)</title><rect x="38.1406%" y="213" width="0.0111%" height="15" fill="rgb(232,167,36)" fg:x="120372" fg:w="35"/><text x="38.3906%" y="223.50"></text></g><g><title>storagev2::disk::writer::flusher::Flusher::new::_$u7b$$u7b$closure$u7d$$u7d$::hfdd5c17341b69c6f (.llvm.724537013135552685) (64,432 samples, 20.42%)</title><rect x="17.7382%" y="229" width="20.4157%" height="15" fill="rgb(244,19,51)" fg:x="55982" fg:w="64432"/><text x="17.9882%" y="239.50">storagev2::disk::writer::flusher..</text></g><g><title>0x7ff8067b7306 (103 samples, 0.03%)</title><rect x="38.6076%" y="197" width="0.0326%" height="15" fill="rgb(224,6,22)" fg:x="121846" fg:w="103"/><text x="38.8576%" y="207.50"></text></g><g><title>0x7ff8067b734b (97 samples, 0.03%)</title><rect x="38.6463%" y="197" width="0.0307%" height="15" fill="rgb(224,145,5)" fg:x="121968" fg:w="97"/><text x="38.8963%" y="207.50"></text></g><g><title>0x7ff8067b809a (34 samples, 0.01%)</title><rect x="38.7480%" y="181" width="0.0108%" height="15" fill="rgb(234,130,49)" fg:x="122289" fg:w="34"/><text x="38.9980%" y="191.50"></text></g><g><title>0x7ff8067b80ce (98 samples, 0.03%)</title><rect x="38.7594%" y="181" width="0.0311%" height="15" fill="rgb(254,6,2)" fg:x="122325" fg:w="98"/><text x="39.0094%" y="191.50"></text></g><g><title>0x7ff8067b742f (451 samples, 0.14%)</title><rect x="38.6827%" y="197" width="0.1429%" height="15" fill="rgb(208,96,46)" fg:x="122083" fg:w="451"/><text x="38.9327%" y="207.50"></text></g><g><title>0x7ff8067b76f2 (70 samples, 0.02%)</title><rect x="38.8281%" y="197" width="0.0222%" height="15" fill="rgb(239,3,39)" fg:x="122542" fg:w="70"/><text x="39.0781%" y="207.50"></text></g><g><title>0x7ff8067b622a (896 samples, 0.28%)</title><rect x="38.6029%" y="213" width="0.2839%" height="15" fill="rgb(233,210,1)" fg:x="121831" fg:w="896"/><text x="38.8529%" y="223.50"></text></g><g><title>0x7ff8067cdfda (63 samples, 0.02%)</title><rect x="38.8668%" y="197" width="0.0200%" height="15" fill="rgb(244,137,37)" fg:x="122664" fg:w="63"/><text x="39.1168%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (112 samples, 0.04%)</title><rect x="38.9131%" y="197" width="0.0355%" height="15" fill="rgb(240,136,2)" fg:x="122810" fg:w="112"/><text x="39.1631%" y="207.50"></text></g><g><title>0x7ff8067b9b8b (139 samples, 0.04%)</title><rect x="38.9131%" y="213" width="0.0440%" height="15" fill="rgb(239,18,37)" fg:x="122810" fg:w="139"/><text x="39.1631%" y="223.50"></text></g><g><title>0x7ff8067b9ba8 (120 samples, 0.04%)</title><rect x="38.9600%" y="213" width="0.0380%" height="15" fill="rgb(218,185,22)" fg:x="122958" fg:w="120"/><text x="39.2100%" y="223.50"></text></g><g><title>0x7ff8067ba0f3 (73 samples, 0.02%)</title><rect x="39.0601%" y="197" width="0.0231%" height="15" fill="rgb(225,218,4)" fg:x="123274" fg:w="73"/><text x="39.3101%" y="207.50"></text></g><g><title>0x7ff8067ba2bc (109 samples, 0.03%)</title><rect x="39.0908%" y="197" width="0.0345%" height="15" fill="rgb(230,182,32)" fg:x="123371" fg:w="109"/><text x="39.3408%" y="207.50"></text></g><g><title>0x7ff8067b9d11 (475 samples, 0.15%)</title><rect x="39.0091%" y="213" width="0.1505%" height="15" fill="rgb(242,56,43)" fg:x="123113" fg:w="475"/><text x="39.2591%" y="223.50"></text></g><g><title>0x7ff8067b9d24 (71 samples, 0.02%)</title><rect x="39.1605%" y="213" width="0.0225%" height="15" fill="rgb(233,99,24)" fg:x="123591" fg:w="71"/><text x="39.4105%" y="223.50"></text></g><g><title>&lt;Unknown Address&gt; (62 samples, 0.02%)</title><rect x="39.2958%" y="213" width="0.0196%" height="15" fill="rgb(234,209,42)" fg:x="124018" fg:w="62"/><text x="39.5458%" y="223.50"></text></g><g><title>&lt;futures_timer::native::delay::Delay as core::future::future::Future&gt;::poll (356 samples, 0.11%)</title><rect x="39.3155%" y="213" width="0.1128%" height="15" fill="rgb(227,7,12)" fg:x="124080" fg:w="356"/><text x="39.5655%" y="223.50"></text></g><g><title>0x7ff8067f724b (1,890 samples, 0.60%)</title><rect x="39.6694%" y="165" width="0.5989%" height="15" fill="rgb(245,203,43)" fg:x="125197" fg:w="1890"/><text x="39.9194%" y="175.50"></text></g><g><title>semaphore_signal_trap (1,880 samples, 0.60%)</title><rect x="39.6726%" y="149" width="0.5957%" height="15" fill="rgb(238,205,33)" fg:x="125207" fg:w="1880"/><text x="39.9226%" y="159.50"></text></g><g><title>0x7ff8067f76f7 (1,925 samples, 0.61%)</title><rect x="39.6665%" y="181" width="0.6099%" height="15" fill="rgb(231,56,7)" fg:x="125188" fg:w="1925"/><text x="39.9165%" y="191.50"></text></g><g><title>futures_timer::native::global::raw_wake (2,052 samples, 0.65%)</title><rect x="39.6393%" y="197" width="0.6502%" height="15" fill="rgb(244,186,29)" fg:x="125102" fg:w="2052"/><text x="39.8893%" y="207.50"></text></g><g><title>std::sys::sync::thread_parking::darwin::Parker::unpark (37 samples, 0.01%)</title><rect x="40.2778%" y="181" width="0.0117%" height="15" fill="rgb(234,111,31)" fg:x="127117" fg:w="37"/><text x="40.5278%" y="191.50"></text></g><g><title>pthread_mutex_unlock (95 samples, 0.03%)</title><rect x="40.2895%" y="197" width="0.0301%" height="15" fill="rgb(241,149,10)" fg:x="127154" fg:w="95"/><text x="40.5395%" y="207.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (358 samples, 0.11%)</title><rect x="40.3196%" y="197" width="0.1134%" height="15" fill="rgb(249,206,44)" fg:x="127249" fg:w="358"/><text x="40.5696%" y="207.50"></text></g><g><title>pthread_mutex_lock (351 samples, 0.11%)</title><rect x="40.3218%" y="181" width="0.1112%" height="15" fill="rgb(251,153,30)" fg:x="127256" fg:w="351"/><text x="40.5718%" y="191.50"></text></g><g><title>&lt;futures_timer::native::delay::Delay as core::ops::drop::Drop&gt;::drop (3,173 samples, 1.01%)</title><rect x="39.4283%" y="213" width="1.0054%" height="15" fill="rgb(239,152,38)" fg:x="124436" fg:w="3173"/><text x="39.6783%" y="223.50"></text></g><g><title>&lt;futures_timer::native::timer::TimerHandle as core::default::Default&gt;::default (193 samples, 0.06%)</title><rect x="40.4336%" y="213" width="0.0612%" height="15" fill="rgb(249,139,47)" fg:x="127609" fg:w="193"/><text x="40.6836%" y="223.50"></text></g><g><title>&lt;governor::clock::quanta::QuantaClock as governor::clock::Clock&gt;::now (99 samples, 0.03%)</title><rect x="40.4948%" y="213" width="0.0314%" height="15" fill="rgb(244,64,35)" fg:x="127802" fg:w="99"/><text x="40.7448%" y="223.50"></text></g><g><title>&lt;governor::jitter::Jitter as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (34 samples, 0.01%)</title><rect x="40.5350%" y="213" width="0.0108%" height="15" fill="rgb(216,46,15)" fg:x="127929" fg:w="34"/><text x="40.7850%" y="223.50"></text></g><g><title>&lt;governor::state::in_memory::InMemoryState as governor::state::StateStore&gt;::measure_and_replace (164 samples, 0.05%)</title><rect x="40.5458%" y="213" width="0.0520%" height="15" fill="rgb(250,74,19)" fg:x="127963" fg:w="164"/><text x="40.7958%" y="223.50"></text></g><g><title>0x7ff8067b51fe (41 samples, 0.01%)</title><rect x="41.3899%" y="197" width="0.0130%" height="15" fill="rgb(249,42,33)" fg:x="130627" fg:w="41"/><text x="41.6399%" y="207.50"></text></g><g><title>0x7ff8067b5208 (179 samples, 0.06%)</title><rect x="41.4032%" y="197" width="0.0567%" height="15" fill="rgb(242,149,17)" fg:x="130669" fg:w="179"/><text x="41.6532%" y="207.50"></text></g><g><title>0x7ff8067b5225 (79 samples, 0.03%)</title><rect x="41.4672%" y="197" width="0.0250%" height="15" fill="rgb(244,29,21)" fg:x="130871" fg:w="79"/><text x="41.7172%" y="207.50"></text></g><g><title>0x7ff8067b523b (98 samples, 0.03%)</title><rect x="41.4970%" y="197" width="0.0311%" height="15" fill="rgb(220,130,37)" fg:x="130965" fg:w="98"/><text x="41.7470%" y="207.50"></text></g><g><title>0x7ff8067b52ef (88 samples, 0.03%)</title><rect x="41.5579%" y="197" width="0.0279%" height="15" fill="rgb(211,67,2)" fg:x="131157" fg:w="88"/><text x="41.8079%" y="207.50"></text></g><g><title>0x7ff8067b5313 (367 samples, 0.12%)</title><rect x="41.5918%" y="197" width="0.1163%" height="15" fill="rgb(235,68,52)" fg:x="131264" fg:w="367"/><text x="41.8418%" y="207.50"></text></g><g><title>0x7ff8067b5330 (197 samples, 0.06%)</title><rect x="41.7156%" y="197" width="0.0624%" height="15" fill="rgb(246,142,3)" fg:x="131655" fg:w="197"/><text x="41.9656%" y="207.50"></text></g><g><title>0x7ff8067b53c7 (38 samples, 0.01%)</title><rect x="41.7835%" y="197" width="0.0120%" height="15" fill="rgb(241,25,7)" fg:x="131869" fg:w="38"/><text x="42.0335%" y="207.50"></text></g><g><title>0x7ff8067d6844 (42 samples, 0.01%)</title><rect x="41.8408%" y="197" width="0.0133%" height="15" fill="rgb(242,119,39)" fg:x="132050" fg:w="42"/><text x="42.0908%" y="207.50"></text></g><g><title>0x7ff8067d68aa (33 samples, 0.01%)</title><rect x="41.8582%" y="197" width="0.0105%" height="15" fill="rgb(241,98,45)" fg:x="132105" fg:w="33"/><text x="42.1082%" y="207.50"></text></g><g><title>0x7ff8067d6984 (67 samples, 0.02%)</title><rect x="41.8861%" y="197" width="0.0212%" height="15" fill="rgb(254,28,30)" fg:x="132193" fg:w="67"/><text x="42.1361%" y="207.50"></text></g><g><title>&lt;Unknown Address&gt; (37 samples, 0.01%)</title><rect x="41.9184%" y="197" width="0.0117%" height="15" fill="rgb(241,142,54)" fg:x="132295" fg:w="37"/><text x="42.1684%" y="207.50"></text></g><g><title>_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$::write::hb824622b973a5f90 (.llvm.7082537364009689419) (244 samples, 0.08%)</title><rect x="42.3177%" y="181" width="0.0773%" height="15" fill="rgb(222,85,15)" fg:x="133555" fg:w="244"/><text x="42.5677%" y="191.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (2,072 samples, 0.66%)</title><rect x="41.9302%" y="197" width="0.6565%" height="15" fill="rgb(210,85,47)" fg:x="132332" fg:w="2072"/><text x="42.1802%" y="207.50"></text></g><g><title>_platform_memcmp$VARIANT$Base (605 samples, 0.19%)</title><rect x="42.3950%" y="181" width="0.1917%" height="15" fill="rgb(224,206,25)" fg:x="133799" fg:w="605"/><text x="42.6450%" y="191.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (728 samples, 0.23%)</title><rect x="42.5968%" y="197" width="0.2307%" height="15" fill="rgb(243,201,19)" fg:x="134436" fg:w="728"/><text x="42.8468%" y="207.50"></text></g><g><title>bytes::bytes::shared_drop::h2f4486fd7f0a6f4b (.llvm.6858511044588184240) (98 samples, 0.03%)</title><rect x="42.8284%" y="197" width="0.0311%" height="15" fill="rgb(236,59,4)" fg:x="135167" fg:w="98"/><text x="43.0784%" y="207.50"></text></g><g><title>0x7ff8067d6844 (39 samples, 0.01%)</title><rect x="43.0623%" y="181" width="0.0124%" height="15" fill="rgb(254,179,45)" fg:x="135905" fg:w="39"/><text x="43.3123%" y="191.50"></text></g><g><title>0x7ff8067d68aa (52 samples, 0.02%)</title><rect x="43.0778%" y="181" width="0.0165%" height="15" fill="rgb(226,14,10)" fg:x="135954" fg:w="52"/><text x="43.3278%" y="191.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (49 samples, 0.02%)</title><rect x="43.0788%" y="165" width="0.0155%" height="15" fill="rgb(244,27,41)" fg:x="135957" fg:w="49"/><text x="43.3288%" y="175.50"></text></g><g><title>0x7ff8067d6984 (37 samples, 0.01%)</title><rect x="43.1177%" y="181" width="0.0117%" height="15" fill="rgb(235,35,32)" fg:x="136080" fg:w="37"/><text x="43.3677%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;storagev2::disk::writer::buffer::PartitionWriterBuffer&gt; (864 samples, 0.27%)</title><rect x="42.8595%" y="197" width="0.2738%" height="15" fill="rgb(218,68,31)" fg:x="135265" fg:w="864"/><text x="43.1095%" y="207.50"></text></g><g><title>0x7ff8067b6b32 (57 samples, 0.02%)</title><rect x="43.6203%" y="149" width="0.0181%" height="15" fill="rgb(207,120,37)" fg:x="137666" fg:w="57"/><text x="43.8703%" y="159.50"></text></g><g><title>0x7ff8067baee4 (59 samples, 0.02%)</title><rect x="43.6567%" y="133" width="0.0187%" height="15" fill="rgb(227,98,0)" fg:x="137781" fg:w="59"/><text x="43.9067%" y="143.50"></text></g><g><title>0x7ff8067b6c33 (71 samples, 0.02%)</title><rect x="43.6551%" y="149" width="0.0225%" height="15" fill="rgb(207,7,3)" fg:x="137776" fg:w="71"/><text x="43.9051%" y="159.50"></text></g><g><title>0x7ff8067b643d (198 samples, 0.06%)</title><rect x="43.6190%" y="165" width="0.0627%" height="15" fill="rgb(206,98,19)" fg:x="137662" fg:w="198"/><text x="43.8690%" y="175.50"></text></g><g><title>0x7ff8067b6254 (252 samples, 0.08%)</title><rect x="43.6101%" y="181" width="0.0798%" height="15" fill="rgb(217,5,26)" fg:x="137634" fg:w="252"/><text x="43.8601%" y="191.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::push (1,803 samples, 0.57%)</title><rect x="43.1333%" y="197" width="0.5713%" height="15" fill="rgb(235,190,38)" fg:x="136129" fg:w="1803"/><text x="43.3833%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (45 samples, 0.01%)</title><rect x="43.6903%" y="181" width="0.0143%" height="15" fill="rgb(247,86,24)" fg:x="137887" fg:w="45"/><text x="43.9403%" y="191.50"></text></g><g><title>_platform_memcmp$VARIANT$Base (88 samples, 0.03%)</title><rect x="44.1808%" y="149" width="0.0279%" height="15" fill="rgb(205,101,16)" fg:x="139435" fg:w="88"/><text x="44.4308%" y="159.50"></text></g><g><title>_$LT$std..path..PathBuf$u20$as$u20$core..cmp..PartialEq$GT$::eq::ha8ca9e43c08bccd1 (.llvm.7082537364009689419) (602 samples, 0.19%)</title><rect x="44.1646%" y="165" width="0.1907%" height="15" fill="rgb(246,168,33)" fg:x="139384" fg:w="602"/><text x="44.4146%" y="175.50"></text></g><g><title>std::path::Path::components (434 samples, 0.14%)</title><rect x="44.2179%" y="149" width="0.1375%" height="15" fill="rgb(231,114,1)" fg:x="139552" fg:w="434"/><text x="44.4679%" y="159.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get_mut (3,069 samples, 0.97%)</title><rect x="43.7644%" y="181" width="0.9724%" height="15" fill="rgb(207,184,53)" fg:x="138121" fg:w="3069"/><text x="44.0144%" y="191.50"></text></g><g><title>dashmap::DashMap$LT$K$C$V$C$S$GT$::hash_u64::hbd53c616c4e8f94e (.llvm.7082537364009689419) (1,204 samples, 0.38%)</title><rect x="44.3554%" y="165" width="0.3815%" height="15" fill="rgb(224,95,51)" fg:x="139986" fg:w="1204"/><text x="44.6054%" y="175.50"></text></g><g><title>&lt;std::path::PathBuf as core::hash::Hash&gt;::hash (1,016 samples, 0.32%)</title><rect x="44.4149%" y="149" width="0.3219%" height="15" fill="rgb(212,188,45)" fg:x="140174" fg:w="1016"/><text x="44.6649%" y="159.50"></text></g><g><title>_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$::write::hb824622b973a5f90 (.llvm.7082537364009689419) (589 samples, 0.19%)</title><rect x="44.5502%" y="133" width="0.1866%" height="15" fill="rgb(223,154,38)" fg:x="140601" fg:w="589"/><text x="44.8002%" y="143.50"></text></g><g><title>0x7ff80683f8c6 (57 samples, 0.02%)</title><rect x="44.7860%" y="149" width="0.0181%" height="15" fill="rgb(251,22,52)" fg:x="141345" fg:w="57"/><text x="45.0360%" y="159.50"></text></g><g><title>mach_timebase_info (57 samples, 0.02%)</title><rect x="44.7860%" y="133" width="0.0181%" height="15" fill="rgb(229,209,22)" fg:x="141345" fg:w="57"/><text x="45.0360%" y="143.50"></text></g><g><title>0x7ff80683f91d (464 samples, 0.15%)</title><rect x="44.8126%" y="149" width="0.1470%" height="15" fill="rgb(234,138,34)" fg:x="141429" fg:w="464"/><text x="45.0626%" y="159.50"></text></g><g><title>mach_absolute_time (464 samples, 0.15%)</title><rect x="44.8126%" y="133" width="0.1470%" height="15" fill="rgb(212,95,11)" fg:x="141429" fg:w="464"/><text x="45.0626%" y="143.50"></text></g><g><title>0x7ff80683f93d (248 samples, 0.08%)</title><rect x="44.9666%" y="149" width="0.0786%" height="15" fill="rgb(240,179,47)" fg:x="141915" fg:w="248"/><text x="45.2166%" y="159.50"></text></g><g><title>0x7ff80684e86d (869 samples, 0.28%)</title><rect x="44.7743%" y="165" width="0.2753%" height="15" fill="rgb(240,163,11)" fg:x="141308" fg:w="869"/><text x="45.0243%" y="175.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1,054 samples, 0.33%)</title><rect x="44.7391%" y="181" width="0.3340%" height="15" fill="rgb(236,37,12)" fg:x="141197" fg:w="1054"/><text x="44.9891%" y="191.50"></text></g><g><title>std::time::Instant::duration_since (49 samples, 0.02%)</title><rect x="45.0731%" y="181" width="0.0155%" height="15" fill="rgb(232,164,16)" fg:x="142251" fg:w="49"/><text x="45.3231%" y="191.50"></text></g><g><title>_$LT$storagev2..disk..writer..DiskStorageWriter$u20$as$u20$storagev2..StorageWriter$GT$::store::_$u7b$$u7b$closure$u7d$$u7d$::h209f07eea55c7d7c (.llvm.545498345717494327) (14,132 samples, 4.48%)</title><rect x="40.6120%" y="213" width="4.4778%" height="15" fill="rgb(244,205,15)" fg:x="128172" fg:w="14132"/><text x="40.8620%" y="223.50">_$LT$..</text></g><g><title>storagev2::disk::writer::flusher::Flusher::update_partition_write_count (4,371 samples, 1.38%)</title><rect x="43.7049%" y="197" width="1.3850%" height="15" fill="rgb(223,117,47)" fg:x="137933" fg:w="4371"/><text x="43.9549%" y="207.50"></text></g><g><title>__rdl_alloc (32 samples, 0.01%)</title><rect x="45.0898%" y="213" width="0.0101%" height="15" fill="rgb(244,107,35)" fg:x="142304" fg:w="32"/><text x="45.3398%" y="223.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (326 samples, 0.10%)</title><rect x="45.1057%" y="213" width="0.1033%" height="15" fill="rgb(205,140,8)" fg:x="142354" fg:w="326"/><text x="45.3557%" y="223.50"></text></g><g><title>bytes::bytes::promotable_even_clone (255 samples, 0.08%)</title><rect x="45.2109%" y="213" width="0.0808%" height="15" fill="rgb(228,84,46)" fg:x="142686" fg:w="255"/><text x="45.4609%" y="223.50"></text></g><g><title>bytes::bytes::shared_clone::had8607b974c311e6 (.llvm.6858511044588184240) (77 samples, 0.02%)</title><rect x="45.2917%" y="213" width="0.0244%" height="15" fill="rgb(254,188,9)" fg:x="142941" fg:w="77"/><text x="45.5417%" y="223.50"></text></g><g><title>0x7ff8067b5225 (58 samples, 0.02%)</title><rect x="45.5578%" y="197" width="0.0184%" height="15" fill="rgb(206,112,54)" fg:x="143781" fg:w="58"/><text x="45.8078%" y="207.50"></text></g><g><title>0x7ff8067b523b (41 samples, 0.01%)</title><rect x="45.5781%" y="197" width="0.0130%" height="15" fill="rgb(216,84,49)" fg:x="143845" fg:w="41"/><text x="45.8281%" y="207.50"></text></g><g><title>0x7ff8067b5313 (244 samples, 0.08%)</title><rect x="45.5987%" y="197" width="0.0773%" height="15" fill="rgb(214,194,35)" fg:x="143910" fg:w="244"/><text x="45.8487%" y="207.50"></text></g><g><title>0x7ff8067b5330 (94 samples, 0.03%)</title><rect x="45.6792%" y="197" width="0.0298%" height="15" fill="rgb(249,28,3)" fg:x="144164" fg:w="94"/><text x="45.9292%" y="207.50"></text></g><g><title>0x7ff8067d6607 (53 samples, 0.02%)</title><rect x="45.7128%" y="181" width="0.0168%" height="15" fill="rgb(222,56,52)" fg:x="144270" fg:w="53"/><text x="45.9628%" y="191.50"></text></g><g><title>0x7ff8067b53c7 (61 samples, 0.02%)</title><rect x="45.7106%" y="197" width="0.0193%" height="15" fill="rgb(245,217,50)" fg:x="144263" fg:w="61"/><text x="45.9606%" y="207.50"></text></g><g><title>0x7ff8067f7709 (49 samples, 0.02%)</title><rect x="45.7334%" y="197" width="0.0155%" height="15" fill="rgb(213,201,24)" fg:x="144335" fg:w="49"/><text x="45.9834%" y="207.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (43 samples, 0.01%)</title><rect x="45.7492%" y="197" width="0.0136%" height="15" fill="rgb(248,116,28)" fg:x="144385" fg:w="43"/><text x="45.9992%" y="207.50"></text></g><g><title>0x7ff8067f724b (2,614 samples, 0.83%)</title><rect x="45.7958%" y="165" width="0.8283%" height="15" fill="rgb(219,72,43)" fg:x="144532" fg:w="2614"/><text x="46.0458%" y="175.50"></text></g><g><title>semaphore_signal_trap (2,602 samples, 0.82%)</title><rect x="45.7996%" y="149" width="0.8245%" height="15" fill="rgb(209,138,14)" fg:x="144544" fg:w="2602"/><text x="46.0496%" y="159.50"></text></g><g><title>0x7ff8067f76f7 (2,654 samples, 0.84%)</title><rect x="45.7926%" y="181" width="0.8409%" height="15" fill="rgb(222,18,33)" fg:x="144522" fg:w="2654"/><text x="46.0426%" y="191.50"></text></g><g><title>futures_timer::native::delay::Delay::new_handle (4,196 samples, 1.33%)</title><rect x="45.3224%" y="213" width="1.3295%" height="15" fill="rgb(213,199,7)" fg:x="143038" fg:w="4196"/><text x="45.5724%" y="223.50"></text></g><g><title>futures_timer::native::global::raw_wake (2,806 samples, 0.89%)</title><rect x="45.7628%" y="197" width="0.8891%" height="15" fill="rgb(250,110,10)" fg:x="144428" fg:w="2806"/><text x="46.0128%" y="207.50"></text></g><g><title>std::sys::sync::thread_parking::darwin::Parker::unpark (51 samples, 0.02%)</title><rect x="46.6358%" y="181" width="0.0162%" height="15" fill="rgb(248,123,6)" fg:x="147183" fg:w="51"/><text x="46.8858%" y="191.50"></text></g><g><title>quanta::Clock::raw (170 samples, 0.05%)</title><rect x="46.6519%" y="213" width="0.0539%" height="15" fill="rgb(206,91,31)" fg:x="147234" fg:w="170"/><text x="46.9019%" y="223.50"></text></g><g><title>rand::rngs::thread::rng (151 samples, 0.05%)</title><rect x="46.7112%" y="213" width="0.0478%" height="15" fill="rgb(211,154,13)" fg:x="147421" fg:w="151"/><text x="46.9612%" y="223.50"></text></g><g><title>0x7ff80683f91d (124 samples, 0.04%)</title><rect x="46.7910%" y="181" width="0.0393%" height="15" fill="rgb(225,148,7)" fg:x="147673" fg:w="124"/><text x="47.0410%" y="191.50"></text></g><g><title>mach_absolute_time (124 samples, 0.04%)</title><rect x="46.7910%" y="165" width="0.0393%" height="15" fill="rgb(220,160,43)" fg:x="147673" fg:w="124"/><text x="47.0410%" y="175.50"></text></g><g><title>0x7ff80683f93d (60 samples, 0.02%)</title><rect x="46.8319%" y="181" width="0.0190%" height="15" fill="rgb(213,52,39)" fg:x="147802" fg:w="60"/><text x="47.0819%" y="191.50"></text></g><g><title>0x7ff80684e86d (232 samples, 0.07%)</title><rect x="46.7809%" y="197" width="0.0735%" height="15" fill="rgb(243,137,7)" fg:x="147641" fg:w="232"/><text x="47.0309%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (293 samples, 0.09%)</title><rect x="46.7701%" y="213" width="0.0928%" height="15" fill="rgb(230,79,13)" fg:x="147607" fg:w="293"/><text x="47.0201%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (54 samples, 0.02%)</title><rect x="46.8636%" y="213" width="0.0171%" height="15" fill="rgb(247,105,23)" fg:x="147902" fg:w="54"/><text x="47.1136%" y="223.50"></text></g><g><title>0x7ff80683f8c6 (91 samples, 0.03%)</title><rect x="46.9431%" y="165" width="0.0288%" height="15" fill="rgb(223,179,41)" fg:x="148153" fg:w="91"/><text x="47.1931%" y="175.50"></text></g><g><title>mach_timebase_info (91 samples, 0.03%)</title><rect x="46.9431%" y="149" width="0.0288%" height="15" fill="rgb(218,9,34)" fg:x="148153" fg:w="91"/><text x="47.1931%" y="159.50"></text></g><g><title>0x7ff80683f91d (440 samples, 0.14%)</title><rect x="46.9799%" y="165" width="0.1394%" height="15" fill="rgb(222,106,8)" fg:x="148269" fg:w="440"/><text x="47.2299%" y="175.50"></text></g><g><title>mach_absolute_time (440 samples, 0.14%)</title><rect x="46.9799%" y="149" width="0.1394%" height="15" fill="rgb(211,220,0)" fg:x="148269" fg:w="440"/><text x="47.2299%" y="159.50"></text></g><g><title>0x7ff80683f93d (241 samples, 0.08%)</title><rect x="47.1244%" y="165" width="0.0764%" height="15" fill="rgb(229,52,16)" fg:x="148725" fg:w="241"/><text x="47.3744%" y="175.50"></text></g><g><title>0x7ff80684e86d (846 samples, 0.27%)</title><rect x="46.9365%" y="181" width="0.2681%" height="15" fill="rgb(212,155,18)" fg:x="148132" fg:w="846"/><text x="47.1865%" y="191.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1,027 samples, 0.33%)</title><rect x="46.9038%" y="197" width="0.3254%" height="15" fill="rgb(242,21,14)" fg:x="148029" fg:w="1027"/><text x="47.1538%" y="207.50"></text></g><g><title>std::time::Instant::duration_since (122 samples, 0.04%)</title><rect x="47.2293%" y="197" width="0.0387%" height="15" fill="rgb(222,19,48)" fg:x="149056" fg:w="122"/><text x="47.4793%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (71 samples, 0.02%)</title><rect x="47.2454%" y="181" width="0.0225%" height="15" fill="rgb(232,45,27)" fg:x="149107" fg:w="71"/><text x="47.4954%" y="191.50"></text></g><g><title>storagev2::disk::writer::test::test_flush_speed_with_dynamic_rate_multi_partition::_$u7b$$u7b$closure$u7d$$u7d$::_$u7b$$u7b$closure$u7d$$u7d$::h4c7fffdf3b56e342 (.llvm.724537013135552685) (28,782 samples, 9.12%)</title><rect x="38.1539%" y="229" width="9.1197%" height="15" fill="rgb(249,103,42)" fg:x="120414" fg:w="28782"/><text x="38.4039%" y="239.50">storagev2::di..</text></g><g><title>tokio::time::instant::Instant::elapsed (1,236 samples, 0.39%)</title><rect x="46.8820%" y="213" width="0.3916%" height="15" fill="rgb(246,81,33)" fg:x="147960" fg:w="1236"/><text x="47.1320%" y="223.50"></text></g><g><title>0x7ff8067b622a (48 samples, 0.02%)</title><rect x="47.3047%" y="213" width="0.0152%" height="15" fill="rgb(252,33,42)" fg:x="149294" fg:w="48"/><text x="47.5547%" y="223.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::reregister (33 samples, 0.01%)</title><rect x="47.3636%" y="181" width="0.0105%" height="15" fill="rgb(209,212,41)" fg:x="149480" fg:w="33"/><text x="47.6136%" y="191.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (121 samples, 0.04%)</title><rect x="47.3522%" y="213" width="0.0383%" height="15" fill="rgb(207,154,6)" fg:x="149444" fg:w="121"/><text x="47.6022%" y="223.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::poll_elapsed (110 samples, 0.03%)</title><rect x="47.3557%" y="197" width="0.0349%" height="15" fill="rgb(223,64,47)" fg:x="149455" fg:w="110"/><text x="47.6057%" y="207.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (38 samples, 0.01%)</title><rect x="47.3785%" y="181" width="0.0120%" height="15" fill="rgb(211,161,38)" fg:x="149527" fg:w="38"/><text x="47.6285%" y="191.50"></text></g><g><title>0x7ff8067b5313 (47 samples, 0.01%)</title><rect x="47.4960%" y="197" width="0.0149%" height="15" fill="rgb(219,138,40)" fg:x="149898" fg:w="47"/><text x="47.7460%" y="207.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (223 samples, 0.07%)</title><rect x="47.5315%" y="197" width="0.0707%" height="15" fill="rgb(241,228,46)" fg:x="150010" fg:w="223"/><text x="47.7815%" y="207.50"></text></g><g><title>_platform_memcmp$VARIANT$Base (67 samples, 0.02%)</title><rect x="47.5810%" y="181" width="0.0212%" height="15" fill="rgb(223,209,38)" fg:x="150166" fg:w="67"/><text x="47.8310%" y="191.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (94 samples, 0.03%)</title><rect x="47.6035%" y="197" width="0.0298%" height="15" fill="rgb(236,164,45)" fg:x="150237" fg:w="94"/><text x="47.8535%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;storagev2::disk::writer::buffer::PartitionWriterBuffer&gt; (70 samples, 0.02%)</title><rect x="47.6393%" y="197" width="0.0222%" height="15" fill="rgb(231,15,5)" fg:x="150350" fg:w="70"/><text x="47.8893%" y="207.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::push (172 samples, 0.05%)</title><rect x="47.6614%" y="197" width="0.0545%" height="15" fill="rgb(252,35,15)" fg:x="150420" fg:w="172"/><text x="47.9114%" y="207.50"></text></g><g><title>_$LT$std..path..PathBuf$u20$as$u20$core..cmp..PartialEq$GT$::eq::ha8ca9e43c08bccd1 (.llvm.7082537364009689419) (81 samples, 0.03%)</title><rect x="47.7613%" y="165" width="0.0257%" height="15" fill="rgb(248,181,18)" fg:x="150735" fg:w="81"/><text x="48.0113%" y="175.50"></text></g><g><title>std::path::Path::components (57 samples, 0.02%)</title><rect x="47.7689%" y="149" width="0.0181%" height="15" fill="rgb(233,39,42)" fg:x="150759" fg:w="57"/><text x="48.0189%" y="159.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get_mut (301 samples, 0.10%)</title><rect x="47.7223%" y="181" width="0.0954%" height="15" fill="rgb(238,110,33)" fg:x="150612" fg:w="301"/><text x="47.9723%" y="191.50"></text></g><g><title>dashmap::DashMap$LT$K$C$V$C$S$GT$::hash_u64::hbd53c616c4e8f94e (.llvm.7082537364009689419) (97 samples, 0.03%)</title><rect x="47.7869%" y="165" width="0.0307%" height="15" fill="rgb(233,195,10)" fg:x="150816" fg:w="97"/><text x="48.0369%" y="175.50"></text></g><g><title>&lt;std::path::PathBuf as core::hash::Hash&gt;::hash (82 samples, 0.03%)</title><rect x="47.7917%" y="149" width="0.0260%" height="15" fill="rgb(254,105,3)" fg:x="150831" fg:w="82"/><text x="48.0417%" y="159.50"></text></g><g><title>_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$::write::hb824622b973a5f90 (.llvm.7082537364009689419) (49 samples, 0.02%)</title><rect x="47.8021%" y="133" width="0.0155%" height="15" fill="rgb(221,225,9)" fg:x="150864" fg:w="49"/><text x="48.0521%" y="143.50"></text></g><g><title>0x7ff80683f91d (36 samples, 0.01%)</title><rect x="47.8211%" y="149" width="0.0114%" height="15" fill="rgb(224,227,45)" fg:x="150924" fg:w="36"/><text x="48.0711%" y="159.50"></text></g><g><title>mach_absolute_time (36 samples, 0.01%)</title><rect x="47.8211%" y="133" width="0.0114%" height="15" fill="rgb(229,198,43)" fg:x="150924" fg:w="36"/><text x="48.0711%" y="143.50"></text></g><g><title>0x7ff80684e86d (65 samples, 0.02%)</title><rect x="47.8189%" y="165" width="0.0206%" height="15" fill="rgb(206,209,35)" fg:x="150917" fg:w="65"/><text x="48.0689%" y="175.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (76 samples, 0.02%)</title><rect x="47.8183%" y="181" width="0.0241%" height="15" fill="rgb(245,195,53)" fg:x="150915" fg:w="76"/><text x="48.0683%" y="191.50"></text></g><g><title>storagev2::disk::writer::flusher::Flusher::update_partition_write_count (397 samples, 0.13%)</title><rect x="47.7175%" y="197" width="0.1258%" height="15" fill="rgb(240,92,26)" fg:x="150597" fg:w="397"/><text x="47.9675%" y="207.50"></text></g><g><title>_$LT$storagev2..disk..writer..DiskStorageWriter$u20$as$u20$storagev2..StorageWriter$GT$::store::_$u7b$$u7b$closure$u7d$$u7d$::h209f07eea55c7d7c (.llvm.545498345717494327) (1,432 samples, 0.45%)</title><rect x="47.3909%" y="213" width="0.4537%" height="15" fill="rgb(207,40,23)" fg:x="149566" fg:w="1432"/><text x="47.6409%" y="223.50"></text></g><g><title>0x7ff80684e86d (37 samples, 0.01%)</title><rect x="47.8703%" y="181" width="0.0117%" height="15" fill="rgb(223,111,35)" fg:x="151079" fg:w="37"/><text x="48.1203%" y="191.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (45 samples, 0.01%)</title><rect x="47.8690%" y="197" width="0.0143%" height="15" fill="rgb(229,147,28)" fg:x="151075" fg:w="45"/><text x="48.1190%" y="207.50"></text></g><g><title>tokio::time::instant::Instant::elapsed (61 samples, 0.02%)</title><rect x="47.8661%" y="213" width="0.0193%" height="15" fill="rgb(211,29,28)" fg:x="151066" fg:w="61"/><text x="48.1161%" y="223.50"></text></g><g><title>storagev2::disk::writer::test::test_flush_speed_with_dynamic_rate_multi_partition::_$u7b$$u7b$closure$u7d$$u7d$::_$u7b$$u7b$closure$u7d$$u7d$::h5ba6c53d5c33bfb0 (.llvm.724537013135552685) (1,984 samples, 0.63%)</title><rect x="47.2736%" y="229" width="0.6286%" height="15" fill="rgb(228,72,33)" fg:x="149196" fg:w="1984"/><text x="47.5236%" y="239.50"></text></g><g><title>tokio::time::sleep::sleep (53 samples, 0.02%)</title><rect x="47.8855%" y="213" width="0.0168%" height="15" fill="rgb(205,214,31)" fg:x="151127" fg:w="53"/><text x="48.1355%" y="223.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (35 samples, 0.01%)</title><rect x="47.8912%" y="197" width="0.0111%" height="15" fill="rgb(224,111,15)" fg:x="151145" fg:w="35"/><text x="48.1412%" y="207.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (101,831 samples, 32.27%)</title><rect x="15.6444%" y="245" width="32.2657%" height="15" fill="rgb(253,21,26)" fg:x="49374" fg:w="101831"/><text x="15.8944%" y="255.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (118 samples, 0.04%)</title><rect x="47.9156%" y="245" width="0.0374%" height="15" fill="rgb(245,139,43)" fg:x="151222" fg:w="118"/><text x="48.1656%" y="255.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (102,159 samples, 32.37%)</title><rect x="15.6105%" y="261" width="32.3697%" height="15" fill="rgb(252,170,7)" fg:x="49267" fg:w="102159"/><text x="15.8605%" y="271.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::state::State::transition_to_running (86 samples, 0.03%)</title><rect x="47.9530%" y="245" width="0.0272%" height="15" fill="rgb(231,118,14)" fg:x="151340" fg:w="86"/><text x="48.2030%" y="255.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (96 samples, 0.03%)</title><rect x="47.9802%" y="261" width="0.0304%" height="15" fill="rgb(238,83,0)" fg:x="151426" fg:w="96"/><text x="48.2302%" y="271.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (112,062 samples, 35.51%)</title><rect x="12.5072%" y="277" width="35.5075%" height="15" fill="rgb(221,39,39)" fg:x="39473" fg:w="112062"/><text x="12.7572%" y="287.50">tokio::runtime::runtime::Runtime::block_on</text></g><g><title>test::run_test::_{{closure}} (112,121 samples, 35.53%)</title><rect x="12.4905%" y="341" width="35.5262%" height="15" fill="rgb(222,119,46)" fg:x="39420" fg:w="112121"/><text x="12.7405%" y="351.50">test::run_test::_{{closure}}</text></g><g><title>test::__rust_begin_short_backtrace (112,121 samples, 35.53%)</title><rect x="12.4905%" y="325" width="35.5262%" height="15" fill="rgb(222,165,49)" fg:x="39420" fg:w="112121"/><text x="12.7405%" y="335.50">test::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (112,121 samples, 35.53%)</title><rect x="12.4905%" y="309" width="35.5262%" height="15" fill="rgb(219,113,52)" fg:x="39420" fg:w="112121"/><text x="12.7405%" y="319.50">core::ops::function::FnOnce::call_once</text></g><g><title>storagev2::disk::writer::test::run_flush_benchmark (112,121 samples, 35.53%)</title><rect x="12.4905%" y="293" width="35.5262%" height="15" fill="rgb(214,7,15)" fg:x="39420" fg:w="112121"/><text x="12.7405%" y="303.50">storagev2::disk::writer::test::run_flush_benchmark</text></g><g><title>0x7ff8068468f7 (55 samples, 0.02%)</title><rect x="48.2780%" y="325" width="0.0174%" height="15" fill="rgb(235,32,4)" fg:x="152366" fg:w="55"/><text x="48.5280%" y="335.50"></text></g><g><title>0x7ff80684e83f (50 samples, 0.02%)</title><rect x="48.3021%" y="325" width="0.0158%" height="15" fill="rgb(238,90,54)" fg:x="152442" fg:w="50"/><text x="48.5521%" y="335.50"></text></g><g><title>0x7ff80699f892 (35 samples, 0.01%)</title><rect x="48.3180%" y="325" width="0.0111%" height="15" fill="rgb(213,208,19)" fg:x="152492" fg:w="35"/><text x="48.5680%" y="335.50"></text></g><g><title>0x7ff80699f89f (154 samples, 0.05%)</title><rect x="48.3322%" y="325" width="0.0488%" height="15" fill="rgb(233,156,4)" fg:x="152537" fg:w="154"/><text x="48.5822%" y="335.50"></text></g><g><title>&lt;Unknown Address&gt; (50 samples, 0.02%)</title><rect x="48.3813%" y="325" width="0.0158%" height="15" fill="rgb(207,194,5)" fg:x="152692" fg:w="50"/><text x="48.6313%" y="335.50"></text></g><g><title>DYLD-STUB$$pthread_mutex_unlock (51 samples, 0.02%)</title><rect x="48.4038%" y="325" width="0.0162%" height="15" fill="rgb(206,111,30)" fg:x="152763" fg:w="51"/><text x="48.6538%" y="335.50"></text></g><g><title>0x7ff806846923 (103 samples, 0.03%)</title><rect x="48.7201%" y="309" width="0.0326%" height="15" fill="rgb(243,70,54)" fg:x="153761" fg:w="103"/><text x="48.9701%" y="319.50"></text></g><g><title>__commpage_gettimeofday_internal (101 samples, 0.03%)</title><rect x="48.7207%" y="293" width="0.0320%" height="15" fill="rgb(242,28,8)" fg:x="153763" fg:w="101"/><text x="48.9707%" y="303.50"></text></g><g><title>mach_absolute_time (50 samples, 0.02%)</title><rect x="48.7369%" y="277" width="0.0158%" height="15" fill="rgb(219,106,18)" fg:x="153814" fg:w="50"/><text x="48.9869%" y="287.50"></text></g><g><title>&lt;Unknown Address&gt; (40 samples, 0.01%)</title><rect x="48.7644%" y="309" width="0.0127%" height="15" fill="rgb(244,222,10)" fg:x="153901" fg:w="40"/><text x="49.0144%" y="319.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (39 samples, 0.01%)</title><rect x="48.7771%" y="309" width="0.0124%" height="15" fill="rgb(236,179,52)" fg:x="153941" fg:w="39"/><text x="49.0271%" y="319.50"></text></g><g><title>__commpage_gettimeofday (55 samples, 0.02%)</title><rect x="48.7974%" y="309" width="0.0174%" height="15" fill="rgb(213,23,39)" fg:x="154005" fg:w="55"/><text x="49.0474%" y="319.50"></text></g><g><title>__gettimeofday (100 samples, 0.03%)</title><rect x="48.8148%" y="309" width="0.0317%" height="15" fill="rgb(238,48,10)" fg:x="154060" fg:w="100"/><text x="49.0648%" y="319.50"></text></g><g><title>__gettimeofday (2,747 samples, 0.87%)</title><rect x="49.4786%" y="293" width="0.8704%" height="15" fill="rgb(251,196,23)" fg:x="156155" fg:w="2747"/><text x="49.7286%" y="303.50"></text></g><g><title>__psynch_cvwait (35,041 samples, 11.10%)</title><rect x="50.3490%" y="293" width="11.1029%" height="15" fill="rgb(250,152,24)" fg:x="158902" fg:w="35041"/><text x="50.5990%" y="303.50">__psynch_cvwait</text></g><g><title>_pthread_mutex_droplock (72 samples, 0.02%)</title><rect x="61.4520%" y="293" width="0.0228%" height="15" fill="rgb(209,150,17)" fg:x="193943" fg:w="72"/><text x="61.7020%" y="303.50"></text></g><g><title>_pthread_mutex_firstfit_lock_slow (1,212 samples, 0.38%)</title><rect x="61.4748%" y="293" width="0.3840%" height="15" fill="rgb(234,202,34)" fg:x="194015" fg:w="1212"/><text x="61.7248%" y="303.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (1,205 samples, 0.38%)</title><rect x="61.4770%" y="277" width="0.3818%" height="15" fill="rgb(253,148,53)" fg:x="194022" fg:w="1205"/><text x="61.7270%" y="287.50"></text></g><g><title>__psynch_mutexwait (1,175 samples, 0.37%)</title><rect x="61.4865%" y="261" width="0.3723%" height="15" fill="rgb(218,129,16)" fg:x="194052" fg:w="1175"/><text x="61.7365%" y="271.50"></text></g><g><title>pthread_mutex_lock (362 samples, 0.11%)</title><rect x="61.8588%" y="293" width="0.1147%" height="15" fill="rgb(216,85,19)" fg:x="195227" fg:w="362"/><text x="62.1088%" y="303.50"></text></g><g><title>_pthread_cond_wait (42,196 samples, 13.37%)</title><rect x="48.8506%" y="309" width="13.3700%" height="15" fill="rgb(235,228,7)" fg:x="154173" fg:w="42196"/><text x="49.1006%" y="319.50">_pthread_cond_wait</text></g><g><title>pthread_testcancel (780 samples, 0.25%)</title><rect x="61.9735%" y="293" width="0.2471%" height="15" fill="rgb(245,175,0)" fg:x="195589" fg:w="780"/><text x="62.2235%" y="303.50"></text></g><g><title>__psynch_cvwait (169 samples, 0.05%)</title><rect x="62.2663%" y="277" width="0.0535%" height="15" fill="rgb(208,168,36)" fg:x="196513" fg:w="169"/><text x="62.5163%" y="287.50"></text></g><g><title>_pthread_cond_wait (205 samples, 0.06%)</title><rect x="62.2650%" y="293" width="0.0650%" height="15" fill="rgb(246,171,24)" fg:x="196509" fg:w="205"/><text x="62.5150%" y="303.50"></text></g><g><title>cthread_yield (377 samples, 0.12%)</title><rect x="62.3300%" y="293" width="0.1195%" height="15" fill="rgb(215,142,24)" fg:x="196714" fg:w="377"/><text x="62.5800%" y="303.50"></text></g><g><title>swtch_pri (360 samples, 0.11%)</title><rect x="62.3354%" y="277" width="0.1141%" height="15" fill="rgb(250,187,7)" fg:x="196731" fg:w="360"/><text x="62.5854%" y="287.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (735 samples, 0.23%)</title><rect x="62.2229%" y="309" width="0.2329%" height="15" fill="rgb(228,66,33)" fg:x="196376" fg:w="735"/><text x="62.4729%" y="319.50"></text></g><g><title>__psynch_cvsignal (198 samples, 0.06%)</title><rect x="62.4596%" y="277" width="0.0627%" height="15" fill="rgb(234,215,21)" fg:x="197123" fg:w="198"/><text x="62.7096%" y="287.50"></text></g><g><title>pthread_cond_signal (205 samples, 0.06%)</title><rect x="62.4586%" y="293" width="0.0650%" height="15" fill="rgb(222,191,20)" fg:x="197120" fg:w="205"/><text x="62.7086%" y="303.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (224 samples, 0.07%)</title><rect x="62.4558%" y="309" width="0.0710%" height="15" fill="rgb(245,79,54)" fg:x="197111" fg:w="224"/><text x="62.7058%" y="319.50"></text></g><g><title>pthread_mutex_lock (54 samples, 0.02%)</title><rect x="62.5267%" y="309" width="0.0171%" height="15" fill="rgb(240,10,37)" fg:x="197335" fg:w="54"/><text x="62.7767%" y="319.50"></text></g><g><title>pthread_mutex_unlock (130 samples, 0.04%)</title><rect x="62.5438%" y="309" width="0.0412%" height="15" fill="rgb(214,192,32)" fg:x="197389" fg:w="130"/><text x="62.7938%" y="319.50"></text></g><g><title>0x7ff80683f91d (67 samples, 0.02%)</title><rect x="62.5999%" y="277" width="0.0212%" height="15" fill="rgb(209,36,54)" fg:x="197566" fg:w="67"/><text x="62.8499%" y="287.50"></text></g><g><title>mach_absolute_time (67 samples, 0.02%)</title><rect x="62.5999%" y="261" width="0.0212%" height="15" fill="rgb(220,10,11)" fg:x="197566" fg:w="67"/><text x="62.8499%" y="271.50"></text></g><g><title>0x7ff80684e86d (138 samples, 0.04%)</title><rect x="62.5895%" y="293" width="0.0437%" height="15" fill="rgb(221,106,17)" fg:x="197533" fg:w="138"/><text x="62.8395%" y="303.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (166 samples, 0.05%)</title><rect x="62.5850%" y="309" width="0.0526%" height="15" fill="rgb(251,142,44)" fg:x="197519" fg:w="166"/><text x="62.8350%" y="319.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (44,856 samples, 14.21%)</title><rect x="48.4260%" y="325" width="14.2129%" height="15" fill="rgb(238,13,15)" fg:x="152833" fg:w="44856"/><text x="48.6760%" y="335.50">parking_lot::condvar::..</text></g><g><title>__psynch_cvwait (487 samples, 0.15%)</title><rect x="62.7302%" y="293" width="0.1543%" height="15" fill="rgb(208,107,27)" fg:x="197977" fg:w="487"/><text x="62.9802%" y="303.50"></text></g><g><title>_pthread_mutex_firstfit_lock_slow (53 samples, 0.02%)</title><rect x="62.8889%" y="293" width="0.0168%" height="15" fill="rgb(205,136,37)" fg:x="198478" fg:w="53"/><text x="63.1389%" y="303.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (53 samples, 0.02%)</title><rect x="62.8889%" y="277" width="0.0168%" height="15" fill="rgb(250,205,27)" fg:x="198478" fg:w="53"/><text x="63.1389%" y="287.50"></text></g><g><title>__psynch_mutexwait (53 samples, 0.02%)</title><rect x="62.8889%" y="261" width="0.0168%" height="15" fill="rgb(210,80,43)" fg:x="198478" fg:w="53"/><text x="63.1389%" y="271.50"></text></g><g><title>_pthread_cond_wait (576 samples, 0.18%)</title><rect x="62.7245%" y="309" width="0.1825%" height="15" fill="rgb(247,160,36)" fg:x="197959" fg:w="576"/><text x="62.9745%" y="319.50"></text></g><g><title>cthread_yield (796 samples, 0.25%)</title><rect x="62.9070%" y="309" width="0.2522%" height="15" fill="rgb(234,13,49)" fg:x="198535" fg:w="796"/><text x="63.1570%" y="319.50"></text></g><g><title>swtch_pri (754 samples, 0.24%)</title><rect x="62.9203%" y="293" width="0.2389%" height="15" fill="rgb(234,122,0)" fg:x="198577" fg:w="754"/><text x="63.1703%" y="303.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock_slow (43 samples, 0.01%)</title><rect x="63.1592%" y="309" width="0.0136%" height="15" fill="rgb(207,146,38)" fg:x="199331" fg:w="43"/><text x="63.4092%" y="319.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1,693 samples, 0.54%)</title><rect x="62.6389%" y="325" width="0.5364%" height="15" fill="rgb(207,177,25)" fg:x="197689" fg:w="1693"/><text x="62.8889%" y="335.50"></text></g><g><title>__psynch_cvsignal (248 samples, 0.08%)</title><rect x="63.1826%" y="293" width="0.0786%" height="15" fill="rgb(211,178,42)" fg:x="199405" fg:w="248"/><text x="63.4326%" y="303.50"></text></g><g><title>pthread_cond_signal (253 samples, 0.08%)</title><rect x="63.1817%" y="309" width="0.0802%" height="15" fill="rgb(230,69,54)" fg:x="199402" fg:w="253"/><text x="63.4317%" y="319.50"></text></g><g><title>0x7ff80683f8c6 (50 samples, 0.02%)</title><rect x="63.2637%" y="277" width="0.0158%" height="15" fill="rgb(214,135,41)" fg:x="199661" fg:w="50"/><text x="63.5137%" y="287.50"></text></g><g><title>mach_timebase_info (50 samples, 0.02%)</title><rect x="63.2637%" y="261" width="0.0158%" height="15" fill="rgb(237,67,25)" fg:x="199661" fg:w="50"/><text x="63.5137%" y="271.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (331 samples, 0.10%)</title><rect x="63.1753%" y="325" width="0.1049%" height="15" fill="rgb(222,189,50)" fg:x="199382" fg:w="331"/><text x="63.4253%" y="335.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (53 samples, 0.02%)</title><rect x="63.2634%" y="309" width="0.0168%" height="15" fill="rgb(245,148,34)" fg:x="199660" fg:w="53"/><text x="63.5134%" y="319.50"></text></g><g><title>0x7ff80684e86d (52 samples, 0.02%)</title><rect x="63.2637%" y="293" width="0.0165%" height="15" fill="rgb(222,29,6)" fg:x="199661" fg:w="52"/><text x="63.5137%" y="303.50"></text></g><g><title>pthread_cond_timedwait (45 samples, 0.01%)</title><rect x="63.2802%" y="325" width="0.0143%" height="15" fill="rgb(221,189,43)" fg:x="199713" fg:w="45"/><text x="63.5302%" y="335.50"></text></g><g><title>0x7ff80683f7dd (60 samples, 0.02%)</title><rect x="63.3040%" y="309" width="0.0190%" height="15" fill="rgb(207,36,27)" fg:x="199788" fg:w="60"/><text x="63.5540%" y="319.50"></text></g><g><title>0x7ff80683f8c6 (1,987 samples, 0.63%)</title><rect x="63.3354%" y="293" width="0.6296%" height="15" fill="rgb(217,90,24)" fg:x="199887" fg:w="1987"/><text x="63.5854%" y="303.50"></text></g><g><title>mach_timebase_info (1,987 samples, 0.63%)</title><rect x="63.3354%" y="277" width="0.6296%" height="15" fill="rgb(224,66,35)" fg:x="199887" fg:w="1987"/><text x="63.5854%" y="287.50"></text></g><g><title>0x7ff80683f91d (104 samples, 0.03%)</title><rect x="63.9684%" y="293" width="0.0330%" height="15" fill="rgb(221,13,50)" fg:x="201885" fg:w="104"/><text x="64.2184%" y="303.50"></text></g><g><title>mach_absolute_time (104 samples, 0.03%)</title><rect x="63.9684%" y="277" width="0.0330%" height="15" fill="rgb(236,68,49)" fg:x="201885" fg:w="104"/><text x="64.2184%" y="287.50"></text></g><g><title>0x7ff80683f93d (32 samples, 0.01%)</title><rect x="64.0023%" y="293" width="0.0101%" height="15" fill="rgb(229,146,28)" fg:x="201992" fg:w="32"/><text x="64.2523%" y="303.50"></text></g><g><title>0x7ff8068be5cb (41 samples, 0.01%)</title><rect x="64.0131%" y="293" width="0.0130%" height="15" fill="rgb(225,31,38)" fg:x="202026" fg:w="41"/><text x="64.2631%" y="303.50"></text></g><g><title>0x7ff80684e86d (2,197 samples, 0.70%)</title><rect x="63.3315%" y="309" width="0.6961%" height="15" fill="rgb(250,208,3)" fg:x="199875" fg:w="2197"/><text x="63.5815%" y="319.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2,322 samples, 0.74%)</title><rect x="63.2948%" y="325" width="0.7357%" height="15" fill="rgb(246,54,23)" fg:x="199759" fg:w="2322"/><text x="63.5448%" y="335.50"></text></g><g><title>0x7ff80699f892 (107 samples, 0.03%)</title><rect x="64.9364%" y="309" width="0.0339%" height="15" fill="rgb(243,76,11)" fg:x="204940" fg:w="107"/><text x="65.1864%" y="319.50"></text></g><g><title>0x7ff80699f896 (50 samples, 0.02%)</title><rect x="64.9703%" y="309" width="0.0158%" height="15" fill="rgb(245,21,50)" fg:x="205047" fg:w="50"/><text x="65.2203%" y="319.50"></text></g><g><title>0x7ff80699f89f (297 samples, 0.09%)</title><rect x="64.9862%" y="309" width="0.0941%" height="15" fill="rgb(228,9,43)" fg:x="205097" fg:w="297"/><text x="65.2362%" y="319.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Seek&gt;::seek (70 samples, 0.02%)</title><rect x="65.3775%" y="277" width="0.0222%" height="15" fill="rgb(208,100,47)" fg:x="206332" fg:w="70"/><text x="65.6275%" y="287.50"></text></g><g><title>__lseek (68 samples, 0.02%)</title><rect x="65.3781%" y="261" width="0.0215%" height="15" fill="rgb(232,26,8)" fg:x="206334" fg:w="68"/><text x="65.6281%" y="271.50"></text></g><g><title>std::fs::DirBuilder::create_dir_all (267 samples, 0.08%)</title><rect x="65.4009%" y="277" width="0.0846%" height="15" fill="rgb(216,166,38)" fg:x="206406" fg:w="267"/><text x="65.6509%" y="287.50"></text></g><g><title>mkdir (262 samples, 0.08%)</title><rect x="65.4025%" y="261" width="0.0830%" height="15" fill="rgb(251,202,51)" fg:x="206411" fg:w="262"/><text x="65.6525%" y="271.50"></text></g><g><title>std::fs::File::set_len (2,661 samples, 0.84%)</title><rect x="65.4855%" y="277" width="0.8432%" height="15" fill="rgb(254,216,34)" fg:x="206673" fg:w="2661"/><text x="65.7355%" y="287.50"></text></g><g><title>ftruncate (2,658 samples, 0.84%)</title><rect x="65.4865%" y="261" width="0.8422%" height="15" fill="rgb(251,32,27)" fg:x="206676" fg:w="2658"/><text x="65.7365%" y="271.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (105,149 samples, 33.32%)</title><rect x="66.3908%" y="261" width="33.3171%" height="15" fill="rgb(208,127,28)" fg:x="209530" fg:w="105149"/><text x="66.6408%" y="271.50">&lt;&amp;std::fs::File as std::io::Write&gt;::write</text></g><g><title>write (104,682 samples, 33.17%)</title><rect x="66.5388%" y="245" width="33.1691%" height="15" fill="rgb(224,137,22)" fg:x="209997" fg:w="104682"/><text x="66.7888%" y="255.50">write</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (108,744 samples, 34.46%)</title><rect x="65.2523%" y="293" width="34.4562%" height="15" fill="rgb(254,70,32)" fg:x="205937" fg:w="108744"/><text x="65.5023%" y="303.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core..</text></g><g><title>tokio::io::blocking::Buf::write_to (105,347 samples, 33.38%)</title><rect x="66.3287%" y="277" width="33.3798%" height="15" fill="rgb(229,75,37)" fg:x="209334" fg:w="105347"/><text x="66.5787%" y="287.50">tokio::io::blocking::Buf::write_to</text></g><g><title>0x7ff80686baa3 (36 samples, 0.01%)</title><rect x="99.7215%" y="229" width="0.0114%" height="15" fill="rgb(252,64,23)" fg:x="314722" fg:w="36"/><text x="99.9715%" y="239.50"></text></g><g><title>openat (65 samples, 0.02%)</title><rect x="99.7345%" y="229" width="0.0206%" height="15" fill="rgb(232,162,48)" fg:x="314763" fg:w="65"/><text x="99.9845%" y="239.50"></text></g><g><title>__openat (65 samples, 0.02%)</title><rect x="99.7345%" y="213" width="0.0206%" height="15" fill="rgb(246,160,12)" fg:x="314763" fg:w="65"/><text x="99.9845%" y="223.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all (443 samples, 0.14%)</title><rect x="99.7183%" y="293" width="0.1404%" height="15" fill="rgb(247,166,0)" fg:x="314712" fg:w="443"/><text x="99.9683%" y="303.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_recursive (443 samples, 0.14%)</title><rect x="99.7183%" y="277" width="0.1404%" height="15" fill="rgb(249,219,21)" fg:x="314712" fg:w="443"/><text x="99.9683%" y="287.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_recursive (443 samples, 0.14%)</title><rect x="99.7183%" y="261" width="0.1404%" height="15" fill="rgb(205,209,3)" fg:x="314712" fg:w="443"/><text x="99.9683%" y="271.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_recursive (438 samples, 0.14%)</title><rect x="99.7199%" y="245" width="0.1388%" height="15" fill="rgb(243,44,1)" fg:x="314717" fg:w="438"/><text x="99.9699%" y="255.50"></text></g><g><title>unlinkat (327 samples, 0.10%)</title><rect x="99.7551%" y="229" width="0.1036%" height="15" fill="rgb(206,159,16)" fg:x="314828" fg:w="327"/><text x="100.0051%" y="239.50"></text></g><g><title>__unlinkat (326 samples, 0.10%)</title><rect x="99.7554%" y="213" width="0.1033%" height="15" fill="rgb(244,77,30)" fg:x="314829" fg:w="326"/><text x="100.0054%" y="223.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (109,747 samples, 34.77%)</title><rect x="65.0869%" y="309" width="34.7740%" height="15" fill="rgb(218,69,12)" fg:x="205415" fg:w="109747"/><text x="65.3369%" y="319.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (79 samples, 0.03%)</title><rect x="99.8609%" y="309" width="0.0250%" height="15" fill="rgb(212,87,7)" fg:x="315162" fg:w="79"/><text x="100.1109%" y="319.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (33 samples, 0.01%)</title><rect x="99.8866%" y="277" width="0.0105%" height="15" fill="rgb(245,114,25)" fg:x="315243" fg:w="33"/><text x="100.1366%" y="287.50"></text></g><g><title>mio::waker::Waker::wake (33 samples, 0.01%)</title><rect x="99.8866%" y="261" width="0.0105%" height="15" fill="rgb(210,61,42)" fg:x="315243" fg:w="33"/><text x="100.1366%" y="271.50"></text></g><g><title>kevent (33 samples, 0.01%)</title><rect x="99.8866%" y="245" width="0.0105%" height="15" fill="rgb(211,52,33)" fg:x="315243" fg:w="33"/><text x="100.1366%" y="255.50"></text></g><g><title>tokio::runtime::context::with_scheduler (37 samples, 0.01%)</title><rect x="99.8862%" y="293" width="0.0117%" height="15" fill="rgb(234,58,33)" fg:x="315242" fg:w="37"/><text x="100.1362%" y="303.50"></text></g><g><title>tokio::runtime::task::harness::Harness$LT$T$C$S$GT$::complete::h0ce3e0d66899a5eb (.llvm.15480949991314898764) (41 samples, 0.01%)</title><rect x="99.8859%" y="309" width="0.0130%" height="15" fill="rgb(220,115,36)" fg:x="315241" fg:w="41"/><text x="100.1359%" y="319.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (60 samples, 0.02%)</title><rect x="99.9037%" y="277" width="0.0190%" height="15" fill="rgb(243,153,54)" fg:x="315297" fg:w="60"/><text x="100.1537%" y="287.50"></text></g><g><title>mio::waker::Waker::wake (60 samples, 0.02%)</title><rect x="99.9037%" y="261" width="0.0190%" height="15" fill="rgb(251,47,18)" fg:x="315297" fg:w="60"/><text x="100.1537%" y="271.50"></text></g><g><title>kevent (58 samples, 0.02%)</title><rect x="99.9043%" y="245" width="0.0184%" height="15" fill="rgb(242,102,42)" fg:x="315299" fg:w="58"/><text x="100.1543%" y="255.50"></text></g><g><title>tokio::runtime::context::with_scheduler (63 samples, 0.02%)</title><rect x="99.9034%" y="293" width="0.0200%" height="15" fill="rgb(234,31,38)" fg:x="315296" fg:w="63"/><text x="100.1534%" y="303.50"></text></g><g><title>tokio::runtime::task::harness::Harness$LT$T$C$S$GT$::complete::h58ad049546bf370c (.llvm.3193921096100719124) (73 samples, 0.02%)</title><rect x="99.9018%" y="309" width="0.0231%" height="15" fill="rgb(221,117,51)" fg:x="315291" fg:w="73"/><text x="100.1518%" y="319.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (113,400 samples, 35.93%)</title><rect x="64.0407%" y="325" width="35.9314%" height="15" fill="rgb(212,20,18)" fg:x="202113" fg:w="113400"/><text x="64.2907%" y="335.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness$LT$T$C$S$GT$::complete::hdd5cd30a9a4b1154 (.llvm.15480949991314898764) (149 samples, 0.05%)</title><rect x="99.9249%" y="309" width="0.0472%" height="15" fill="rgb(245,133,36)" fg:x="315364" fg:w="149"/><text x="100.1749%" y="319.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (164,052 samples, 51.98%)</title><rect x="48.0166%" y="341" width="51.9808%" height="15" fill="rgb(212,6,19)" fg:x="151541" fg:w="164052"/><text x="48.2666%" y="351.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::raw::poll (80 samples, 0.03%)</title><rect x="99.9721%" y="325" width="0.0253%" height="15" fill="rgb(218,1,36)" fg:x="315513" fg:w="80"/><text x="100.2221%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (315,577 samples, 99.99%)</title><rect x="0.0054%" y="373" width="99.9924%" height="15" fill="rgb(246,84,54)" fg:x="17" fg:w="315577"/><text x="0.2554%" y="383.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (315,575 samples, 99.99%)</title><rect x="0.0060%" y="357" width="99.9918%" height="15" fill="rgb(242,110,6)" fg:x="19" fg:w="315575"/><text x="0.2560%" y="367.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>_pthread_start (315,593 samples, 100.00%)</title><rect x="0.0022%" y="405" width="99.9975%" height="15" fill="rgb(214,47,5)" fg:x="7" fg:w="315593"/><text x="0.2522%" y="415.50">_pthread_start</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (315,587 samples, 100.00%)</title><rect x="0.0041%" y="389" width="99.9956%" height="15" fill="rgb(218,159,25)" fg:x="13" fg:w="315587"/><text x="0.2541%" y="399.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>all (315,601 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(215,211,28)" fg:x="0" fg:w="315601"/><text x="0.2500%" y="447.50"></text></g><g><title>thread_start (315,594 samples, 100.00%)</title><rect x="0.0022%" y="421" width="99.9978%" height="15" fill="rgb(238,59,32)" fg:x="7" fg:w="315594"/><text x="0.2522%" y="431.50">thread_start</text></g></svg></svg>