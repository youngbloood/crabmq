<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="485.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="509211"><g><title>&lt;Unknown Address&gt; (51 samples, 0.01%)</title><rect x="0.0047%" y="357" width="0.0100%" height="15" fill="rgb(227,0,7)" fg:x="24" fg:w="51"/><text x="0.2547%" y="367.50"></text></g><g><title>0x7ff8067f7717 (118 samples, 0.02%)</title><rect x="0.0615%" y="341" width="0.0232%" height="15" fill="rgb(217,0,24)" fg:x="313" fg:w="118"/><text x="0.3115%" y="351.50"></text></g><g><title>0x7ff8067d68aa (114 samples, 0.02%)</title><rect x="0.2934%" y="325" width="0.0224%" height="15" fill="rgb(221,193,54)" fg:x="1494" fg:w="114"/><text x="0.5434%" y="335.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (114 samples, 0.02%)</title><rect x="0.2934%" y="309" width="0.0224%" height="15" fill="rgb(248,212,6)" fg:x="1494" fg:w="114"/><text x="0.5434%" y="319.50"></text></g><g><title>0x7ff8067d6844 (63 samples, 0.01%)</title><rect x="0.4348%" y="309" width="0.0124%" height="15" fill="rgb(208,68,35)" fg:x="2214" fg:w="63"/><text x="0.6848%" y="319.50"></text></g><g><title>0x7ff8067d68aa (3,377 samples, 0.66%)</title><rect x="0.4497%" y="309" width="0.6632%" height="15" fill="rgb(232,128,0)" fg:x="2290" fg:w="3377"/><text x="0.6997%" y="319.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (3,372 samples, 0.66%)</title><rect x="0.4507%" y="293" width="0.6622%" height="15" fill="rgb(207,160,47)" fg:x="2295" fg:w="3372"/><text x="0.7007%" y="303.50"></text></g><g><title>0x7ff8067d6984 (63 samples, 0.01%)</title><rect x="1.1255%" y="309" width="0.0124%" height="15" fill="rgb(228,23,34)" fg:x="5731" fg:w="63"/><text x="1.3755%" y="319.50"></text></g><g><title>pthread_mutex_destroy (207 samples, 0.04%)</title><rect x="1.1475%" y="293" width="0.0407%" height="15" fill="rgb(218,30,26)" fg:x="5843" fg:w="207"/><text x="1.3975%" y="303.50"></text></g><g><title>&lt;std::sys::sync::mutex::pthread::Mutex as core::ops::drop::Drop&gt;::drop (382 samples, 0.08%)</title><rect x="1.1418%" y="309" width="0.0750%" height="15" fill="rgb(220,122,19)" fg:x="5814" fg:w="382"/><text x="1.3918%" y="319.50"></text></g><g><title>pthread_mutex_unlock (146 samples, 0.03%)</title><rect x="1.1881%" y="293" width="0.0287%" height="15" fill="rgb(250,228,42)" fg:x="6050" fg:w="146"/><text x="1.4381%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4,375 samples, 0.86%)</title><rect x="0.3843%" y="325" width="0.8592%" height="15" fill="rgb(240,193,28)" fg:x="1957" fg:w="4375"/><text x="0.6343%" y="335.50"></text></g><g><title>pthread_mutex_trylock (111 samples, 0.02%)</title><rect x="1.2217%" y="309" width="0.0218%" height="15" fill="rgb(216,20,37)" fg:x="6221" fg:w="111"/><text x="1.4717%" y="319.50"></text></g><g><title>futures_timer::native::global::raw_clone (94 samples, 0.02%)</title><rect x="1.2435%" y="325" width="0.0185%" height="15" fill="rgb(206,188,39)" fg:x="6332" fg:w="94"/><text x="1.4935%" y="335.50"></text></g><g><title>futures_timer::native::heap::Heap&lt;T&gt;::push (295 samples, 0.06%)</title><rect x="1.2649%" y="325" width="0.0579%" height="15" fill="rgb(217,207,13)" fg:x="6441" fg:w="295"/><text x="1.5149%" y="335.50"></text></g><g><title>pthread_mutex_unlock (272 samples, 0.05%)</title><rect x="1.3228%" y="325" width="0.0534%" height="15" fill="rgb(231,73,38)" fg:x="6736" fg:w="272"/><text x="1.5728%" y="335.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (502 samples, 0.10%)</title><rect x="1.3762%" y="325" width="0.0986%" height="15" fill="rgb(225,20,46)" fg:x="7008" fg:w="502"/><text x="1.6262%" y="335.50"></text></g><g><title>pthread_mutex_lock (496 samples, 0.10%)</title><rect x="1.3774%" y="309" width="0.0974%" height="15" fill="rgb(210,31,41)" fg:x="7014" fg:w="496"/><text x="1.6274%" y="319.50"></text></g><g><title>0x7ff8067b5208 (54 samples, 0.01%)</title><rect x="1.5155%" y="309" width="0.0106%" height="15" fill="rgb(221,200,47)" fg:x="7717" fg:w="54"/><text x="1.7655%" y="319.50"></text></g><g><title>0x7ff8067b5313 (204 samples, 0.04%)</title><rect x="1.5473%" y="309" width="0.0401%" height="15" fill="rgb(226,26,5)" fg:x="7879" fg:w="204"/><text x="1.7973%" y="319.50"></text></g><g><title>0x7ff8067b5330 (63 samples, 0.01%)</title><rect x="1.5903%" y="309" width="0.0124%" height="15" fill="rgb(249,33,26)" fg:x="8098" fg:w="63"/><text x="1.8403%" y="319.50"></text></g><g><title>0x7ff8067d6607 (177 samples, 0.03%)</title><rect x="1.6056%" y="293" width="0.0348%" height="15" fill="rgb(235,183,28)" fg:x="8176" fg:w="177"/><text x="1.8556%" y="303.50"></text></g><g><title>0x7ff8067b53c7 (191 samples, 0.04%)</title><rect x="1.6037%" y="309" width="0.0375%" height="15" fill="rgb(221,5,38)" fg:x="8166" fg:w="191"/><text x="1.8537%" y="319.50"></text></g><g><title>pthread_mutex_init (102 samples, 0.02%)</title><rect x="1.6480%" y="309" width="0.0200%" height="15" fill="rgb(247,18,42)" fg:x="8392" fg:w="102"/><text x="1.8980%" y="319.50"></text></g><g><title>std::sys::sync::once_box::OnceBox$LT$T$GT$::initialize::h1db14ccd83739d5b (.llvm.8465266497648202264) (1,061 samples, 0.21%)</title><rect x="1.4772%" y="325" width="0.2084%" height="15" fill="rgb(241,131,45)" fg:x="7522" fg:w="1061"/><text x="1.7272%" y="335.50"></text></g><g><title>&lt;futures_timer::native::timer::Timer as core::future::future::Future&gt;::poll (8,072 samples, 1.59%)</title><rect x="0.1005%" y="341" width="1.5852%" height="15" fill="rgb(249,31,29)" fg:x="512" fg:w="8072"/><text x="0.3505%" y="351.50"></text></g><g><title>futures_timer::native::heap::Heap&lt;T&gt;::remove (1,959 samples, 0.38%)</title><rect x="1.8320%" y="325" width="0.3847%" height="15" fill="rgb(225,111,53)" fg:x="9329" fg:w="1959"/><text x="2.0820%" y="335.50"></text></g><g><title>pthread_mutex_unlock (52 samples, 0.01%)</title><rect x="2.2168%" y="325" width="0.0102%" height="15" fill="rgb(238,160,17)" fg:x="11288" fg:w="52"/><text x="2.4668%" y="335.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (418 samples, 0.08%)</title><rect x="2.2270%" y="325" width="0.0821%" height="15" fill="rgb(214,148,48)" fg:x="11340" fg:w="418"/><text x="2.4770%" y="335.50"></text></g><g><title>pthread_mutex_lock (413 samples, 0.08%)</title><rect x="2.2280%" y="309" width="0.0811%" height="15" fill="rgb(232,36,49)" fg:x="11345" fg:w="413"/><text x="2.4780%" y="319.50"></text></g><g><title>0x7ff80683f8c6 (2,153 samples, 0.42%)</title><rect x="2.3240%" y="293" width="0.4228%" height="15" fill="rgb(209,103,24)" fg:x="11834" fg:w="2153"/><text x="2.5740%" y="303.50"></text></g><g><title>mach_timebase_info (2,152 samples, 0.42%)</title><rect x="2.3242%" y="277" width="0.4226%" height="15" fill="rgb(229,88,8)" fg:x="11835" fg:w="2152"/><text x="2.5742%" y="287.50"></text></g><g><title>0x7ff80683f91d (128 samples, 0.03%)</title><rect x="2.7503%" y="293" width="0.0251%" height="15" fill="rgb(213,181,19)" fg:x="14005" fg:w="128"/><text x="3.0003%" y="303.50"></text></g><g><title>mach_absolute_time (128 samples, 0.03%)</title><rect x="2.7503%" y="277" width="0.0251%" height="15" fill="rgb(254,191,54)" fg:x="14005" fg:w="128"/><text x="3.0003%" y="287.50"></text></g><g><title>0x7ff80684e86d (2,380 samples, 0.47%)</title><rect x="2.3216%" y="309" width="0.4674%" height="15" fill="rgb(241,83,37)" fg:x="11822" fg:w="2380"/><text x="2.5716%" y="319.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2,468 samples, 0.48%)</title><rect x="2.3091%" y="325" width="0.4847%" height="15" fill="rgb(233,36,39)" fg:x="11758" fg:w="2468"/><text x="2.5591%" y="335.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (4,682 samples, 0.92%)</title><rect x="2.8477%" y="293" width="0.9195%" height="15" fill="rgb(226,3,54)" fg:x="14501" fg:w="4682"/><text x="3.0977%" y="303.50"></text></g><g><title>mio::waker::Waker::wake (4,602 samples, 0.90%)</title><rect x="2.8634%" y="277" width="0.9038%" height="15" fill="rgb(245,192,40)" fg:x="14581" fg:w="4602"/><text x="3.1134%" y="287.50"></text></g><g><title>kevent (4,492 samples, 0.88%)</title><rect x="2.8851%" y="261" width="0.8821%" height="15" fill="rgb(238,167,29)" fg:x="14691" fg:w="4492"/><text x="3.1351%" y="271.50"></text></g><g><title>tokio::runtime::context::with_scheduler (4,930 samples, 0.97%)</title><rect x="2.8309%" y="309" width="0.9682%" height="15" fill="rgb(232,182,51)" fg:x="14415" fg:w="4930"/><text x="3.0809%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::inject::Inject&lt;T&gt;::push (162 samples, 0.03%)</title><rect x="3.7672%" y="293" width="0.0318%" height="15" fill="rgb(231,60,39)" fg:x="19183" fg:w="162"/><text x="4.0172%" y="303.50"></text></g><g><title>futures_timer::native::timer::Timer::advance (11,185 samples, 2.20%)</title><rect x="1.6946%" y="341" width="2.1965%" height="15" fill="rgb(208,69,12)" fg:x="8629" fg:w="11185"/><text x="1.9446%" y="351.50">f..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (5,571 samples, 1.09%)</title><rect x="2.7971%" y="325" width="1.0940%" height="15" fill="rgb(235,93,37)" fg:x="14243" fg:w="5571"/><text x="3.0471%" y="335.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (443 samples, 0.09%)</title><rect x="3.8041%" y="309" width="0.0870%" height="15" fill="rgb(213,116,39)" fg:x="19371" fg:w="443"/><text x="4.0541%" y="319.50"></text></g><g><title>0x7ff80683f8c6 (79 samples, 0.02%)</title><rect x="3.8986%" y="309" width="0.0155%" height="15" fill="rgb(222,207,29)" fg:x="19852" fg:w="79"/><text x="4.1486%" y="319.50"></text></g><g><title>mach_timebase_info (79 samples, 0.02%)</title><rect x="3.8986%" y="293" width="0.0155%" height="15" fill="rgb(206,96,30)" fg:x="19852" fg:w="79"/><text x="4.1486%" y="303.50"></text></g><g><title>0x7ff80683f91d (99 samples, 0.02%)</title><rect x="3.9157%" y="309" width="0.0194%" height="15" fill="rgb(218,138,4)" fg:x="19939" fg:w="99"/><text x="4.1657%" y="319.50"></text></g><g><title>mach_absolute_time (99 samples, 0.02%)</title><rect x="3.9157%" y="293" width="0.0194%" height="15" fill="rgb(250,191,14)" fg:x="19939" fg:w="99"/><text x="4.1657%" y="303.50"></text></g><g><title>0x7ff80684e86d (245 samples, 0.05%)</title><rect x="3.8980%" y="325" width="0.0481%" height="15" fill="rgb(239,60,40)" fg:x="19849" fg:w="245"/><text x="4.1480%" y="335.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (297 samples, 0.06%)</title><rect x="3.8911%" y="341" width="0.0583%" height="15" fill="rgb(206,27,48)" fg:x="19814" fg:w="297"/><text x="4.1411%" y="351.50"></text></g><g><title>0x7ff806824cc4 (58 samples, 0.01%)</title><rect x="4.0470%" y="293" width="0.0114%" height="15" fill="rgb(225,35,8)" fg:x="20608" fg:w="58"/><text x="4.2970%" y="303.50"></text></g><g><title>mach_absolute_time (58 samples, 0.01%)</title><rect x="4.0470%" y="277" width="0.0114%" height="15" fill="rgb(250,213,24)" fg:x="20608" fg:w="58"/><text x="4.2970%" y="287.50"></text></g><g><title>0x7ff8067f72e6 (68 samples, 0.01%)</title><rect x="4.0465%" y="309" width="0.0134%" height="15" fill="rgb(247,123,22)" fg:x="20605" fg:w="68"/><text x="4.2965%" y="319.50"></text></g><g><title>0x7ff8067f730d (3,694 samples, 0.73%)</title><rect x="4.0622%" y="309" width="0.7254%" height="15" fill="rgb(231,138,38)" fg:x="20685" fg:w="3694"/><text x="4.3122%" y="319.50"></text></g><g><title>semaphore_timedwait_trap (3,546 samples, 0.70%)</title><rect x="4.0912%" y="293" width="0.6964%" height="15" fill="rgb(231,145,46)" fg:x="20833" fg:w="3546"/><text x="4.3412%" y="303.50"></text></g><g><title>0x7ff8067f7313 (60 samples, 0.01%)</title><rect x="4.7876%" y="309" width="0.0118%" height="15" fill="rgb(251,118,11)" fg:x="24379" fg:w="60"/><text x="5.0376%" y="319.50"></text></g><g><title>0x7ff8067f7759 (3,923 samples, 0.77%)</title><rect x="4.0431%" y="325" width="0.7704%" height="15" fill="rgb(217,147,25)" fg:x="20588" fg:w="3923"/><text x="4.2931%" y="335.50"></text></g><g><title>0x7ff8067f7762 (54 samples, 0.01%)</title><rect x="4.8137%" y="325" width="0.0106%" height="15" fill="rgb(247,81,37)" fg:x="24512" fg:w="54"/><text x="5.0637%" y="335.50"></text></g><g><title>0x7ff8067f728c (116 samples, 0.02%)</title><rect x="4.8283%" y="309" width="0.0228%" height="15" fill="rgb(209,12,38)" fg:x="24586" fg:w="116"/><text x="5.0783%" y="319.50"></text></g><g><title>semaphore_wait_trap (115 samples, 0.02%)</title><rect x="4.8285%" y="293" width="0.0226%" height="15" fill="rgb(227,1,9)" fg:x="24587" fg:w="115"/><text x="5.0785%" y="303.50"></text></g><g><title>0x7ff8067f7781 (124 samples, 0.02%)</title><rect x="4.8275%" y="325" width="0.0244%" height="15" fill="rgb(248,47,43)" fg:x="24582" fg:w="124"/><text x="5.0775%" y="335.50"></text></g><g><title>0x7ff8068249ac (83 samples, 0.02%)</title><rect x="4.8530%" y="325" width="0.0163%" height="15" fill="rgb(221,10,30)" fg:x="24712" fg:w="83"/><text x="5.1030%" y="335.50"></text></g><g><title>mach_absolute_time (83 samples, 0.02%)</title><rect x="4.8530%" y="309" width="0.0163%" height="15" fill="rgb(210,229,1)" fg:x="24712" fg:w="83"/><text x="5.1030%" y="319.50"></text></g><g><title>std::thread::park_timeout (4,687 samples, 0.92%)</title><rect x="3.9542%" y="341" width="0.9204%" height="15" fill="rgb(222,148,37)" fg:x="20135" fg:w="4687"/><text x="4.2042%" y="351.50"></text></g><g><title>futures_timer::native::global::run (24,754 samples, 4.86%)</title><rect x="0.0147%" y="357" width="4.8612%" height="15" fill="rgb(234,67,33)" fg:x="75" fg:w="24754"/><text x="0.2647%" y="367.50">future..</text></g><g><title>core::iter::traits::iterator::Iterator::eq_by (130 samples, 0.03%)</title><rect x="4.9333%" y="245" width="0.0255%" height="15" fill="rgb(247,98,35)" fg:x="25121" fg:w="130"/><text x="5.1833%" y="255.50"></text></g><g><title>&lt;Unknown Address&gt; (446 samples, 0.09%)</title><rect x="4.9325%" y="261" width="0.0876%" height="15" fill="rgb(247,138,52)" fg:x="25117" fg:w="446"/><text x="5.1825%" y="271.50"></text></g><g><title>std::path::Path::components (312 samples, 0.06%)</title><rect x="4.9588%" y="245" width="0.0613%" height="15" fill="rgb(213,79,30)" fg:x="25251" fg:w="312"/><text x="5.2088%" y="255.50"></text></g><g><title>DYLD-STUB$$_platform_memcmp (125 samples, 0.02%)</title><rect x="5.0201%" y="261" width="0.0245%" height="15" fill="rgb(246,177,23)" fg:x="25563" fg:w="125"/><text x="5.2701%" y="271.50"></text></g><g><title>DYLD-STUB$$memcmp (119 samples, 0.02%)</title><rect x="5.0447%" y="261" width="0.0234%" height="15" fill="rgb(230,62,27)" fg:x="25688" fg:w="119"/><text x="5.2947%" y="271.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (69 samples, 0.01%)</title><rect x="5.7171%" y="181" width="0.0136%" height="15" fill="rgb(216,154,8)" fg:x="29112" fg:w="69"/><text x="5.9671%" y="191.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (126 samples, 0.02%)</title><rect x="5.7065%" y="213" width="0.0247%" height="15" fill="rgb(244,35,45)" fg:x="29058" fg:w="126"/><text x="5.9565%" y="223.50"></text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered$LT$Fut$GT$::release_task::h7e2afad31c5bb516 (.llvm.7077018826729851678) (93 samples, 0.02%)</title><rect x="5.7130%" y="197" width="0.0183%" height="15" fill="rgb(251,115,12)" fg:x="29091" fg:w="93"/><text x="5.9630%" y="207.50"></text></g><g><title>&lt;futures_util::future::join_all::JoinAll&lt;F&gt; as core::future::future::Future&gt;::poll (150 samples, 0.03%)</title><rect x="5.7043%" y="245" width="0.0295%" height="15" fill="rgb(240,54,50)" fg:x="29047" fg:w="150"/><text x="5.9543%" y="255.50"></text></g><g><title>&lt;futures_util::stream::stream::collect::Collect&lt;St,C&gt; as core::future::future::Future&gt;::poll (150 samples, 0.03%)</title><rect x="5.7043%" y="229" width="0.0295%" height="15" fill="rgb(233,84,52)" fg:x="29047" fg:w="150"/><text x="5.9543%" y="239.50"></text></g><g><title>DYLD-STUB$$_platform_memcmp (102 samples, 0.02%)</title><rect x="5.7355%" y="245" width="0.0200%" height="15" fill="rgb(207,117,47)" fg:x="29206" fg:w="102"/><text x="5.9855%" y="255.50"></text></g><g><title>DYLD-STUB$$memcmp (120 samples, 0.02%)</title><rect x="5.7556%" y="245" width="0.0236%" height="15" fill="rgb(249,43,39)" fg:x="29308" fg:w="120"/><text x="6.0056%" y="255.50"></text></g><g><title>_platform_memcmp$VARIANT$Base (1,458 samples, 0.29%)</title><rect x="5.7797%" y="245" width="0.2863%" height="15" fill="rgb(209,38,44)" fg:x="29431" fg:w="1458"/><text x="6.0297%" y="255.50"></text></g><g><title>std::path::Components::len_before_body (2,974 samples, 0.58%)</title><rect x="10.3262%" y="213" width="0.5840%" height="15" fill="rgb(236,212,23)" fg:x="52582" fg:w="2974"/><text x="10.5762%" y="223.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (24,374 samples, 4.79%)</title><rect x="7.2874%" y="229" width="4.7866%" height="15" fill="rgb(242,79,21)" fg:x="37108" fg:w="24374"/><text x="7.5374%" y="239.50">&lt;std::..</text></g><g><title>std::path::Components::parse_next_component_back (5,926 samples, 1.16%)</title><rect x="10.9102%" y="213" width="1.1638%" height="15" fill="rgb(211,96,35)" fg:x="55556" fg:w="5926"/><text x="11.1602%" y="223.50"></text></g><g><title>_platform_memcmp$VARIANT$Base (833 samples, 0.16%)</title><rect x="12.0740%" y="229" width="0.1636%" height="15" fill="rgb(253,215,40)" fg:x="61482" fg:w="833"/><text x="12.3240%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::eq_by (34,489 samples, 6.77%)</title><rect x="6.0670%" y="245" width="6.7730%" height="15" fill="rgb(211,81,21)" fg:x="30894" fg:w="34489"/><text x="6.3170%" y="255.50">core::ite..</text></g><g><title>std::path::Components::len_before_body (3,068 samples, 0.60%)</title><rect x="12.2376%" y="229" width="0.6025%" height="15" fill="rgb(208,190,38)" fg:x="62315" fg:w="3068"/><text x="12.4876%" y="239.50"></text></g><g><title>core::ptr::drop_in_place$LT$storagev2..disk..writer..flusher..PartitionMetrics$GT$::hf5e50d265529add3 (.llvm.17336478807312321405) (54 samples, 0.01%)</title><rect x="12.8401%" y="245" width="0.0106%" height="15" fill="rgb(235,213,38)" fg:x="65383" fg:w="54"/><text x="13.0901%" y="255.50"></text></g><g><title>0x7ff806877123 (53 samples, 0.01%)</title><rect x="12.8560%" y="133" width="0.0104%" height="15" fill="rgb(237,122,38)" fg:x="65464" fg:w="53"/><text x="13.1060%" y="143.50"></text></g><g><title>0x7ff80687712c (56 samples, 0.01%)</title><rect x="12.8664%" y="133" width="0.0110%" height="15" fill="rgb(244,218,35)" fg:x="65517" fg:w="56"/><text x="13.1164%" y="143.50"></text></g><g><title>0x7ff80684e8f6 (162 samples, 0.03%)</title><rect x="12.8556%" y="149" width="0.0318%" height="15" fill="rgb(240,68,47)" fg:x="65462" fg:w="162"/><text x="13.1056%" y="159.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (198 samples, 0.04%)</title><rect x="12.8511%" y="213" width="0.0389%" height="15" fill="rgb(210,16,53)" fg:x="65439" fg:w="198"/><text x="13.1011%" y="223.50"></text></g><g><title>once_cell::imp::initialize_or_wait (198 samples, 0.04%)</title><rect x="12.8511%" y="197" width="0.0389%" height="15" fill="rgb(235,124,12)" fg:x="65439" fg:w="198"/><text x="13.1011%" y="207.50"></text></g><g><title>once_cell::imp::OnceCell$LT$T$GT$::initialize::_$u7b$$u7b$closure$u7d$$u7d$::hd12ae1697f79bd24 (.llvm.16041530799740990472) (198 samples, 0.04%)</title><rect x="12.8511%" y="181" width="0.0389%" height="15" fill="rgb(224,169,11)" fg:x="65439" fg:w="198"/><text x="13.1011%" y="191.50"></text></g><g><title>quanta::Calibration::calibrate (198 samples, 0.04%)</title><rect x="12.8511%" y="165" width="0.0389%" height="15" fill="rgb(250,166,2)" fg:x="65439" fg:w="198"/><text x="13.1011%" y="175.50"></text></g><g><title>governor::state::direct::_&lt;impl governor::state::RateLimiter&lt;governor::state::direct::NotKeyed,governor::state::in_memory::InMemoryState,governor::clock::quanta::QuantaClock,governor::middleware::NoOpMiddleware&lt;governor::clock::quanta::QuantaInstant&gt;&gt;&gt;::direct (228 samples, 0.04%)</title><rect x="12.8507%" y="245" width="0.0448%" height="15" fill="rgb(242,216,29)" fg:x="65437" fg:w="228"/><text x="13.1007%" y="255.50"></text></g><g><title>&lt;quanta::Clock as core::default::Default&gt;::default (228 samples, 0.04%)</title><rect x="12.8507%" y="229" width="0.0448%" height="15" fill="rgb(230,116,27)" fg:x="65437" fg:w="228"/><text x="13.1007%" y="239.50"></text></g><g><title>std::path::Path::components (1,144 samples, 0.22%)</title><rect x="12.8954%" y="245" width="0.2247%" height="15" fill="rgb(228,99,48)" fg:x="65665" fg:w="1144"/><text x="13.1454%" y="255.50"></text></g><g><title>storagev2::disk::writer::flusher::Flusher::get_partition_metrics (157 samples, 0.03%)</title><rect x="13.1203%" y="245" width="0.0308%" height="15" fill="rgb(253,11,6)" fg:x="66810" fg:w="157"/><text x="13.3703%" y="255.50"></text></g><g><title>0x7ff8067ce738 (61 samples, 0.01%)</title><rect x="13.1729%" y="69" width="0.0120%" height="15" fill="rgb(247,143,39)" fg:x="67078" fg:w="61"/><text x="13.4229%" y="79.50"></text></g><g><title>madvise (60 samples, 0.01%)</title><rect x="13.1731%" y="53" width="0.0118%" height="15" fill="rgb(236,97,10)" fg:x="67079" fg:w="60"/><text x="13.4231%" y="63.50"></text></g><g><title>0x7ff8067ba5c2 (67 samples, 0.01%)</title><rect x="13.1723%" y="117" width="0.0132%" height="15" fill="rgb(233,208,19)" fg:x="67075" fg:w="67"/><text x="13.4223%" y="127.50"></text></g><g><title>0x7ff8067c103d (64 samples, 0.01%)</title><rect x="13.1729%" y="101" width="0.0126%" height="15" fill="rgb(216,164,2)" fg:x="67078" fg:w="64"/><text x="13.4229%" y="111.50"></text></g><g><title>0x7ff8067befc6 (64 samples, 0.01%)</title><rect x="13.1729%" y="85" width="0.0126%" height="15" fill="rgb(220,129,5)" fg:x="67078" fg:w="64"/><text x="13.4229%" y="95.50"></text></g><g><title>0x7ff8067b9d11 (89 samples, 0.02%)</title><rect x="13.1692%" y="133" width="0.0175%" height="15" fill="rgb(242,17,10)" fg:x="67059" fg:w="89"/><text x="13.4192%" y="143.50"></text></g><g><title>0x7ff8067be058 (97 samples, 0.02%)</title><rect x="13.1678%" y="149" width="0.0190%" height="15" fill="rgb(242,107,0)" fg:x="67052" fg:w="97"/><text x="13.4178%" y="159.50"></text></g><g><title>__rdl_alloc (148 samples, 0.03%)</title><rect x="13.1580%" y="197" width="0.0291%" height="15" fill="rgb(251,28,31)" fg:x="67002" fg:w="148"/><text x="13.4080%" y="207.50"></text></g><g><title>0x7ff8067e0345 (146 samples, 0.03%)</title><rect x="13.1584%" y="181" width="0.0287%" height="15" fill="rgb(233,223,10)" fg:x="67004" fg:w="146"/><text x="13.4084%" y="191.50"></text></g><g><title>0x7ff8067dfd99 (145 samples, 0.03%)</title><rect x="13.1586%" y="165" width="0.0285%" height="15" fill="rgb(215,21,27)" fg:x="67005" fg:w="145"/><text x="13.4086%" y="175.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (149 samples, 0.03%)</title><rect x="13.1580%" y="213" width="0.0293%" height="15" fill="rgb(232,23,21)" fg:x="67002" fg:w="149"/><text x="13.4080%" y="223.50"></text></g><g><title>storagev2::disk::writer::test::run_flush_benchmark::_$u7b$$u7b$closure$u7d$$u7d$::he02f1855f2419fa4 (.llvm.17549064535921554110) (42,043 samples, 8.26%)</title><rect x="4.9323%" y="277" width="8.2565%" height="15" fill="rgb(244,5,23)" fg:x="25116" fg:w="42043"/><text x="5.1823%" y="287.50">storagev2::..</text></g><g><title>storagev2::disk::writer::test::test_flush_speed_with_dynamic_rate_multi_partition::_{{closure}} (41,351 samples, 8.12%)</title><rect x="5.0682%" y="261" width="8.1206%" height="15" fill="rgb(226,81,46)" fg:x="25808" fg:w="41351"/><text x="5.3182%" y="271.50">storagev2::..</text></g><g><title>tokio::task::spawn::spawn (164 samples, 0.03%)</title><rect x="13.1566%" y="245" width="0.0322%" height="15" fill="rgb(247,70,30)" fg:x="66995" fg:w="164"/><text x="13.4066%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Handle::spawn (160 samples, 0.03%)</title><rect x="13.1574%" y="229" width="0.0314%" height="15" fill="rgb(212,68,19)" fg:x="66999" fg:w="160"/><text x="13.4074%" y="239.50"></text></g><g><title>0x7ff80683f8c6 (294 samples, 0.06%)</title><rect x="13.2069%" y="213" width="0.0577%" height="15" fill="rgb(240,187,13)" fg:x="67251" fg:w="294"/><text x="13.4569%" y="223.50"></text></g><g><title>mach_timebase_info (294 samples, 0.06%)</title><rect x="13.2069%" y="197" width="0.0577%" height="15" fill="rgb(223,113,26)" fg:x="67251" fg:w="294"/><text x="13.4569%" y="207.50"></text></g><g><title>0x7ff80684e86d (316 samples, 0.06%)</title><rect x="13.2067%" y="229" width="0.0621%" height="15" fill="rgb(206,192,2)" fg:x="67250" fg:w="316"/><text x="13.4567%" y="239.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (325 samples, 0.06%)</title><rect x="13.2051%" y="245" width="0.0638%" height="15" fill="rgb(241,108,4)" fg:x="67242" fg:w="325"/><text x="13.4551%" y="255.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn::hdc27603f1e2477ca (.llvm.11592589432301260788) (393 samples, 0.08%)</title><rect x="13.2756%" y="245" width="0.0772%" height="15" fill="rgb(247,173,49)" fg:x="67601" fg:w="393"/><text x="13.5256%" y="255.50"></text></g><g><title>mio::poll::Poll::poll (371 samples, 0.07%)</title><rect x="13.2800%" y="229" width="0.0729%" height="15" fill="rgb(224,114,35)" fg:x="67623" fg:w="371"/><text x="13.5300%" y="239.50"></text></g><g><title>kevent (334 samples, 0.07%)</title><rect x="13.2872%" y="213" width="0.0656%" height="15" fill="rgb(245,159,27)" fg:x="67660" fg:w="334"/><text x="13.5372%" y="223.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal::h05d49ce90ffebeb3 (.llvm.11592589432301260788) (782 samples, 0.15%)</title><rect x="13.2010%" y="261" width="0.1536%" height="15" fill="rgb(245,172,44)" fg:x="67221" fg:w="782"/><text x="13.4510%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (824 samples, 0.16%)</title><rect x="13.1975%" y="277" width="0.1618%" height="15" fill="rgb(236,23,11)" fg:x="67203" fg:w="824"/><text x="13.4475%" y="287.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn::hdc27603f1e2477ca (.llvm.11592589432301260788) (217 samples, 0.04%)</title><rect x="13.3772%" y="245" width="0.0426%" height="15" fill="rgb(205,117,38)" fg:x="68118" fg:w="217"/><text x="13.6272%" y="255.50"></text></g><g><title>mio::poll::Poll::poll (205 samples, 0.04%)</title><rect x="13.3795%" y="229" width="0.0403%" height="15" fill="rgb(237,72,25)" fg:x="68130" fg:w="205"/><text x="13.6295%" y="239.50"></text></g><g><title>kevent (195 samples, 0.04%)</title><rect x="13.3815%" y="213" width="0.0383%" height="15" fill="rgb(244,70,9)" fg:x="68140" fg:w="195"/><text x="13.6315%" y="223.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal::h05d49ce90ffebeb3 (.llvm.11592589432301260788) (312 samples, 0.06%)</title><rect x="13.3611%" y="261" width="0.0613%" height="15" fill="rgb(217,125,39)" fg:x="68036" fg:w="312"/><text x="13.6111%" y="271.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (59 samples, 0.01%)</title><rect x="13.4243%" y="245" width="0.0116%" height="15" fill="rgb(235,36,10)" fg:x="68358" fg:w="59"/><text x="13.6743%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park_yield (451 samples, 0.09%)</title><rect x="13.3593%" y="277" width="0.0886%" height="15" fill="rgb(251,123,47)" fg:x="68027" fg:w="451"/><text x="13.6093%" y="287.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (130 samples, 0.03%)</title><rect x="13.4223%" y="261" width="0.0255%" height="15" fill="rgb(221,13,13)" fg:x="68348" fg:w="130"/><text x="13.6723%" y="271.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (59 samples, 0.01%)</title><rect x="13.4363%" y="245" width="0.0116%" height="15" fill="rgb(238,131,9)" fg:x="68419" fg:w="59"/><text x="13.6863%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (747 samples, 0.15%)</title><rect x="13.4479%" y="277" width="0.1467%" height="15" fill="rgb(211,50,8)" fg:x="68478" fg:w="747"/><text x="13.6979%" y="287.50"></text></g><g><title>&lt;Unknown Address&gt; (76 samples, 0.01%)</title><rect x="13.6749%" y="245" width="0.0149%" height="15" fill="rgb(245,182,24)" fg:x="69634" fg:w="76"/><text x="13.9249%" y="255.50"></text></g><g><title>__psynch_cvsignal (90 samples, 0.02%)</title><rect x="13.7481%" y="133" width="0.0177%" height="15" fill="rgb(242,14,37)" fg:x="70007" fg:w="90"/><text x="13.9981%" y="143.50"></text></g><g><title>pthread_cond_signal (92 samples, 0.02%)</title><rect x="13.7479%" y="149" width="0.0181%" height="15" fill="rgb(246,228,12)" fg:x="70006" fg:w="92"/><text x="13.9979%" y="159.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (100 samples, 0.02%)</title><rect x="13.7472%" y="165" width="0.0196%" height="15" fill="rgb(213,55,15)" fg:x="70002" fg:w="100"/><text x="13.9972%" y="175.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::start_seek (132 samples, 0.03%)</title><rect x="13.7411%" y="213" width="0.0259%" height="15" fill="rgb(209,9,3)" fg:x="69971" fg:w="132"/><text x="13.9911%" y="223.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (131 samples, 0.03%)</title><rect x="13.7413%" y="197" width="0.0257%" height="15" fill="rgb(230,59,30)" fg:x="69972" fg:w="131"/><text x="13.9913%" y="207.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (104 samples, 0.02%)</title><rect x="13.7466%" y="181" width="0.0204%" height="15" fill="rgb(209,121,21)" fg:x="69999" fg:w="104"/><text x="13.9966%" y="191.50"></text></g><g><title>0x7ff8068630df (105 samples, 0.02%)</title><rect x="13.7744%" y="165" width="0.0206%" height="15" fill="rgb(220,109,13)" fg:x="70141" fg:w="105"/><text x="14.0244%" y="175.50"></text></g><g><title>0x7ff8068463a6 (101 samples, 0.02%)</title><rect x="13.7752%" y="149" width="0.0198%" height="15" fill="rgb(232,18,1)" fg:x="70145" fg:w="101"/><text x="14.0252%" y="159.50"></text></g><g><title>__getdirentries64 (101 samples, 0.02%)</title><rect x="13.7752%" y="133" width="0.0198%" height="15" fill="rgb(215,41,42)" fg:x="70145" fg:w="101"/><text x="14.0252%" y="143.50"></text></g><g><title>&lt;std::sys::pal::unix::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (116 samples, 0.02%)</title><rect x="13.7735%" y="181" width="0.0228%" height="15" fill="rgb(224,123,36)" fg:x="70136" fg:w="116"/><text x="14.0235%" y="191.50"></text></g><g><title>&lt;std::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (117 samples, 0.02%)</title><rect x="13.7735%" y="197" width="0.0230%" height="15" fill="rgb(240,125,3)" fg:x="70136" fg:w="117"/><text x="14.0235%" y="207.50"></text></g><g><title>std::path::Path::is_dir (86 samples, 0.02%)</title><rect x="13.8033%" y="197" width="0.0169%" height="15" fill="rgb(205,98,50)" fg:x="70288" fg:w="86"/><text x="14.0533%" y="207.50"></text></g><g><title>stat$INODE64 (84 samples, 0.02%)</title><rect x="13.8037%" y="181" width="0.0165%" height="15" fill="rgb(205,185,37)" fg:x="70290" fg:w="84"/><text x="14.0537%" y="191.50"></text></g><g><title>0x7ff8068449e1 (213 samples, 0.04%)</title><rect x="13.8210%" y="181" width="0.0418%" height="15" fill="rgb(238,207,15)" fg:x="70378" fg:w="213"/><text x="14.0710%" y="191.50"></text></g><g><title>open$NOCANCEL (212 samples, 0.04%)</title><rect x="13.8212%" y="165" width="0.0416%" height="15" fill="rgb(213,199,42)" fg:x="70379" fg:w="212"/><text x="14.0712%" y="175.50"></text></g><g><title>__open_nocancel (208 samples, 0.04%)</title><rect x="13.8220%" y="149" width="0.0408%" height="15" fill="rgb(235,201,11)" fg:x="70383" fg:w="208"/><text x="14.0720%" y="159.50"></text></g><g><title>std::sys::pal::unix::fs::readdir (260 samples, 0.05%)</title><rect x="13.8202%" y="197" width="0.0511%" height="15" fill="rgb(207,46,11)" fg:x="70374" fg:w="260"/><text x="14.0702%" y="207.50"></text></g><g><title>common::util::other::dir_recursive (573 samples, 0.11%)</title><rect x="13.7719%" y="213" width="0.1125%" height="15" fill="rgb(241,35,35)" fg:x="70128" fg:w="573"/><text x="14.0219%" y="223.50"></text></g><g><title>std::sys::pal::unix::fs::stat (67 samples, 0.01%)</title><rect x="13.8713%" y="197" width="0.0132%" height="15" fill="rgb(243,32,47)" fg:x="70634" fg:w="67"/><text x="14.1213%" y="207.50"></text></g><g><title>stat$INODE64 (66 samples, 0.01%)</title><rect x="13.8715%" y="181" width="0.0130%" height="15" fill="rgb(247,202,23)" fg:x="70635" fg:w="66"/><text x="14.1215%" y="191.50"></text></g><g><title>std::sys::pal::unix::fs::stat (174 samples, 0.03%)</title><rect x="13.8942%" y="213" width="0.0342%" height="15" fill="rgb(219,102,11)" fg:x="70751" fg:w="174"/><text x="14.1442%" y="223.50"></text></g><g><title>stat$INODE64 (172 samples, 0.03%)</title><rect x="13.8946%" y="197" width="0.0338%" height="15" fill="rgb(243,110,44)" fg:x="70753" fg:w="172"/><text x="14.1446%" y="207.50"></text></g><g><title>common::util::other::check_exist (87 samples, 0.02%)</title><rect x="13.9319%" y="197" width="0.0171%" height="15" fill="rgb(222,74,54)" fg:x="70943" fg:w="87"/><text x="14.1819%" y="207.50"></text></g><g><title>std::sys::pal::unix::fs::stat (87 samples, 0.02%)</title><rect x="13.9319%" y="181" width="0.0171%" height="15" fill="rgb(216,99,12)" fg:x="70943" fg:w="87"/><text x="14.1819%" y="191.50"></text></g><g><title>stat$INODE64 (86 samples, 0.02%)</title><rect x="13.9321%" y="165" width="0.0169%" height="15" fill="rgb(226,22,26)" fg:x="70944" fg:w="86"/><text x="14.1821%" y="175.50"></text></g><g><title>std::fs::OpenOptions::_open (952 samples, 0.19%)</title><rect x="13.9490%" y="197" width="0.1870%" height="15" fill="rgb(217,163,10)" fg:x="71030" fg:w="952"/><text x="14.1990%" y="207.50"></text></g><g><title>open (951 samples, 0.19%)</title><rect x="13.9492%" y="181" width="0.1868%" height="15" fill="rgb(213,25,53)" fg:x="71031" fg:w="951"/><text x="14.1992%" y="191.50"></text></g><g><title>__open (948 samples, 0.19%)</title><rect x="13.9498%" y="165" width="0.1862%" height="15" fill="rgb(252,105,26)" fg:x="71034" fg:w="948"/><text x="14.1998%" y="175.50"></text></g><g><title>storagev2::disk::fd_cache::create_writer_fd (1,045 samples, 0.21%)</title><rect x="13.9314%" y="213" width="0.2052%" height="15" fill="rgb(220,39,43)" fg:x="70940" fg:w="1045"/><text x="14.1814%" y="223.50"></text></g><g><title>std::fs::OpenOptions::_open (962 samples, 0.19%)</title><rect x="14.1470%" y="181" width="0.1889%" height="15" fill="rgb(229,68,48)" fg:x="72038" fg:w="962"/><text x="14.3970%" y="191.50"></text></g><g><title>open (960 samples, 0.19%)</title><rect x="14.1474%" y="165" width="0.1885%" height="15" fill="rgb(252,8,32)" fg:x="72040" fg:w="960"/><text x="14.3974%" y="175.50"></text></g><g><title>__open (958 samples, 0.19%)</title><rect x="14.1478%" y="149" width="0.1881%" height="15" fill="rgb(223,20,43)" fg:x="72042" fg:w="958"/><text x="14.3978%" y="159.50"></text></g><g><title>storagev2::disk::meta::WriterPositionPtr::new (1,016 samples, 0.20%)</title><rect x="14.1366%" y="213" width="0.1995%" height="15" fill="rgb(229,81,49)" fg:x="71985" fg:w="1016"/><text x="14.3866%" y="223.50"></text></g><g><title>storagev2::disk::fd_cache::create_writer_fd (995 samples, 0.20%)</title><rect x="14.1407%" y="197" width="0.1954%" height="15" fill="rgb(236,28,36)" fg:x="72006" fg:w="995"/><text x="14.3907%" y="207.50"></text></g><g><title>__psynch_cvsignal (80 samples, 0.02%)</title><rect x="14.3471%" y="149" width="0.0157%" height="15" fill="rgb(249,185,26)" fg:x="73057" fg:w="80"/><text x="14.5971%" y="159.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (98 samples, 0.02%)</title><rect x="14.3438%" y="197" width="0.0192%" height="15" fill="rgb(249,174,33)" fg:x="73040" fg:w="98"/><text x="14.5938%" y="207.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (82 samples, 0.02%)</title><rect x="14.3469%" y="181" width="0.0161%" height="15" fill="rgb(233,201,37)" fg:x="73056" fg:w="82"/><text x="14.5969%" y="191.50"></text></g><g><title>pthread_cond_signal (81 samples, 0.02%)</title><rect x="14.3471%" y="165" width="0.0159%" height="15" fill="rgb(221,78,26)" fg:x="73057" fg:w="81"/><text x="14.5971%" y="175.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (110 samples, 0.02%)</title><rect x="14.3432%" y="213" width="0.0216%" height="15" fill="rgb(250,127,30)" fg:x="73037" fg:w="110"/><text x="14.5932%" y="223.50"></text></g><g><title>storagev2::disk::writer::TopicPartitionManager::get_or_create_topic_partition::_{{closure}} (3,300 samples, 0.65%)</title><rect x="13.7193%" y="229" width="0.6481%" height="15" fill="rgb(230,49,44)" fg:x="69860" fg:w="3300"/><text x="13.9693%" y="239.50"></text></g><g><title>storagev2::disk::writer::DiskStorageWriter::new::_$u7b$$u7b$closure$u7d$$u7d$::h0d45c312d0cbc88e (.llvm.724537013135552685) (3,382 samples, 0.66%)</title><rect x="13.7081%" y="245" width="0.6642%" height="15" fill="rgb(229,67,23)" fg:x="69803" fg:w="3382"/><text x="13.9581%" y="255.50"></text></g><g><title>&lt;core::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (60 samples, 0.01%)</title><rect x="14.3846%" y="229" width="0.0118%" height="15" fill="rgb(249,83,47)" fg:x="73248" fg:w="60"/><text x="14.6346%" y="239.50"></text></g><g><title>0x7ff8067b742f (91 samples, 0.02%)</title><rect x="14.8355%" y="197" width="0.0179%" height="15" fill="rgb(215,43,3)" fg:x="75544" fg:w="91"/><text x="15.0855%" y="207.50"></text></g><g><title>0x7ff8067b622a (180 samples, 0.04%)</title><rect x="14.8306%" y="213" width="0.0353%" height="15" fill="rgb(238,154,13)" fg:x="75519" fg:w="180"/><text x="15.0806%" y="223.50"></text></g><g><title>0x7ff8067ba5c2 (102 samples, 0.02%)</title><rect x="14.8868%" y="197" width="0.0200%" height="15" fill="rgb(219,56,2)" fg:x="75805" fg:w="102"/><text x="15.1368%" y="207.50"></text></g><g><title>0x7ff8067c103d (85 samples, 0.02%)</title><rect x="14.8901%" y="181" width="0.0167%" height="15" fill="rgb(233,0,4)" fg:x="75822" fg:w="85"/><text x="15.1401%" y="191.50"></text></g><g><title>0x7ff8067befc6 (85 samples, 0.02%)</title><rect x="14.8901%" y="165" width="0.0167%" height="15" fill="rgb(235,30,7)" fg:x="75822" fg:w="85"/><text x="15.1401%" y="175.50"></text></g><g><title>0x7ff8067ce738 (84 samples, 0.02%)</title><rect x="14.8903%" y="149" width="0.0165%" height="15" fill="rgb(250,79,13)" fg:x="75823" fg:w="84"/><text x="15.1403%" y="159.50"></text></g><g><title>madvise (84 samples, 0.02%)</title><rect x="14.8903%" y="133" width="0.0165%" height="15" fill="rgb(211,146,34)" fg:x="75823" fg:w="84"/><text x="15.1403%" y="143.50"></text></g><g><title>0x7ff8067b9d11 (167 samples, 0.03%)</title><rect x="14.8763%" y="213" width="0.0328%" height="15" fill="rgb(228,22,38)" fg:x="75752" fg:w="167"/><text x="15.1263%" y="223.50"></text></g><g><title>0x7ff8067ce62e (62 samples, 0.01%)</title><rect x="14.9184%" y="181" width="0.0122%" height="15" fill="rgb(235,168,5)" fg:x="75966" fg:w="62"/><text x="15.1684%" y="191.50"></text></g><g><title>mach_vm_deallocate (62 samples, 0.01%)</title><rect x="14.9184%" y="165" width="0.0122%" height="15" fill="rgb(221,155,16)" fg:x="75966" fg:w="62"/><text x="15.1684%" y="175.50"></text></g><g><title>_kernelrpc_mach_vm_deallocate_trap (62 samples, 0.01%)</title><rect x="14.9184%" y="149" width="0.0122%" height="15" fill="rgb(215,215,53)" fg:x="75966" fg:w="62"/><text x="15.1684%" y="159.50"></text></g><g><title>0x7ff8067bfeda (63 samples, 0.01%)</title><rect x="14.9184%" y="197" width="0.0124%" height="15" fill="rgb(223,4,10)" fg:x="75966" fg:w="63"/><text x="15.1684%" y="207.50"></text></g><g><title>0x7ff8067caaa5 (92 samples, 0.02%)</title><rect x="14.9135%" y="213" width="0.0181%" height="15" fill="rgb(234,103,6)" fg:x="75941" fg:w="92"/><text x="15.1635%" y="223.50"></text></g><g><title>_platform_memcmp$VARIANT$Base (415 samples, 0.08%)</title><rect x="17.0093%" y="149" width="0.0815%" height="15" fill="rgb(227,97,0)" fg:x="86613" fg:w="415"/><text x="17.2593%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::eq_by (67 samples, 0.01%)</title><rect x="17.0908%" y="149" width="0.0132%" height="15" fill="rgb(234,150,53)" fg:x="87028" fg:w="67"/><text x="17.3408%" y="159.50"></text></g><g><title>_$LT$std..path..PathBuf$u20$as$u20$core..cmp..PartialEq$GT$::eq::ha8ca9e43c08bccd1 (.llvm.7082537364009689419) (3,523 samples, 0.69%)</title><rect x="16.9480%" y="165" width="0.6919%" height="15" fill="rgb(228,201,54)" fg:x="86301" fg:w="3523"/><text x="17.1980%" y="175.50"></text></g><g><title>std::path::Path::components (2,729 samples, 0.54%)</title><rect x="17.1039%" y="149" width="0.5359%" height="15" fill="rgb(222,22,37)" fg:x="87095" fg:w="2729"/><text x="17.3539%" y="159.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (19,963 samples, 3.92%)</title><rect x="15.6788%" y="181" width="3.9204%" height="15" fill="rgb(237,53,32)" fg:x="79838" fg:w="19963"/><text x="15.9288%" y="191.50">&lt;das..</text></g><g><title>dashmap::DashMap$LT$K$C$V$C$S$GT$::hash_u64::hbd53c616c4e8f94e (.llvm.7082537364009689419) (9,977 samples, 1.96%)</title><rect x="17.6398%" y="165" width="1.9593%" height="15" fill="rgb(233,25,53)" fg:x="89824" fg:w="9977"/><text x="17.8898%" y="175.50">d..</text></g><g><title>&lt;std::path::PathBuf as core::hash::Hash&gt;::hash (9,032 samples, 1.77%)</title><rect x="17.8254%" y="149" width="1.7737%" height="15" fill="rgb(210,40,34)" fg:x="90769" fg:w="9032"/><text x="18.0754%" y="159.50">&lt;..</text></g><g><title>_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$::write::hb824622b973a5f90 (.llvm.7082537364009689419) (3,245 samples, 0.64%)</title><rect x="18.9619%" y="133" width="0.6373%" height="15" fill="rgb(241,220,44)" fg:x="96556" fg:w="3245"/><text x="19.2119%" y="143.50"></text></g><g><title>&lt;dashmap::iter::Iter&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,015 samples, 0.20%)</title><rect x="19.5991%" y="181" width="0.1993%" height="15" fill="rgb(235,28,35)" fg:x="99801" fg:w="1015"/><text x="19.8491%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (24,593 samples, 4.83%)</title><rect x="14.9690%" y="197" width="4.8296%" height="15" fill="rgb(210,56,17)" fg:x="76224" fg:w="24593"/><text x="15.2190%" y="207.50">&lt;core:..</text></g><g><title>0x7ff8067b936f (57 samples, 0.01%)</title><rect x="19.8181%" y="133" width="0.0112%" height="15" fill="rgb(224,130,29)" fg:x="100916" fg:w="57"/><text x="20.0681%" y="143.50"></text></g><g><title>0x7ff8067b93b0 (145 samples, 0.03%)</title><rect x="19.8293%" y="133" width="0.0285%" height="15" fill="rgb(235,212,8)" fg:x="100973" fg:w="145"/><text x="20.0793%" y="143.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (145 samples, 0.03%)</title><rect x="19.8293%" y="117" width="0.0285%" height="15" fill="rgb(223,33,50)" fg:x="100973" fg:w="145"/><text x="20.0793%" y="127.50"></text></g><g><title>0x7ff8067e026b (316 samples, 0.06%)</title><rect x="19.8036%" y="165" width="0.0621%" height="15" fill="rgb(219,149,13)" fg:x="100842" fg:w="316"/><text x="20.0536%" y="175.50"></text></g><g><title>0x7ff8067dfb9f (311 samples, 0.06%)</title><rect x="19.8046%" y="149" width="0.0611%" height="15" fill="rgb(250,156,29)" fg:x="100847" fg:w="311"/><text x="20.0546%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25,113 samples, 4.93%)</title><rect x="14.9343%" y="213" width="4.9317%" height="15" fill="rgb(216,193,19)" fg:x="76047" fg:w="25113"/><text x="15.1843%" y="223.50">&lt;alloc..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (343 samples, 0.07%)</title><rect x="19.7987%" y="197" width="0.0674%" height="15" fill="rgb(216,135,14)" fg:x="100817" fg:w="343"/><text x="20.0487%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow::h14a3ae5848e00c88 (.llvm.15150753405431101526) (340 samples, 0.07%)</title><rect x="19.7993%" y="181" width="0.0668%" height="15" fill="rgb(241,47,5)" fg:x="100820" fg:w="340"/><text x="20.0493%" y="191.50"></text></g><g><title>tokio::sync::mpsc::list::Tx$LT$T$GT$::find_block::h227849e380f1bcb3 (.llvm.15150753405431101526) (53 samples, 0.01%)</title><rect x="19.8849%" y="197" width="0.0104%" height="15" fill="rgb(233,42,35)" fg:x="101256" fg:w="53"/><text x="20.1349%" y="207.50"></text></g><g><title>storagev2::disk::writer::flusher::Flusher::flush_by_state (28,007 samples, 5.50%)</title><rect x="14.3970%" y="229" width="5.5001%" height="15" fill="rgb(231,13,6)" fg:x="73311" fg:w="28007"/><text x="14.6470%" y="239.50">storage..</text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::try_send (115 samples, 0.02%)</title><rect x="19.8745%" y="213" width="0.0226%" height="15" fill="rgb(207,181,40)" fg:x="101203" fg:w="115"/><text x="20.1245%" y="223.50"></text></g><g><title>storagev2::disk::writer::DiskStorageWriter::new::_$u7b$$u7b$closure$u7d$$u7d$::h71dd674823a42fca (.llvm.724537013135552685) (28,182 samples, 5.53%)</title><rect x="14.3722%" y="245" width="5.5344%" height="15" fill="rgb(254,173,49)" fg:x="73185" fg:w="28182"/><text x="14.6222%" y="255.50">storage..</text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (162 samples, 0.03%)</title><rect x="19.9416%" y="229" width="0.0318%" height="15" fill="rgb(221,1,38)" fg:x="101545" fg:w="162"/><text x="20.1916%" y="239.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (98 samples, 0.02%)</title><rect x="19.9542%" y="213" width="0.0192%" height="15" fill="rgb(206,124,46)" fg:x="101609" fg:w="98"/><text x="20.2042%" y="223.50"></text></g><g><title>__rdl_alloc (68 samples, 0.01%)</title><rect x="19.9807%" y="197" width="0.0134%" height="15" fill="rgb(249,21,11)" fg:x="101744" fg:w="68"/><text x="20.2307%" y="207.50"></text></g><g><title>0x7ff8067e0345 (64 samples, 0.01%)</title><rect x="19.9815%" y="181" width="0.0126%" height="15" fill="rgb(222,201,40)" fg:x="101748" fg:w="64"/><text x="20.2315%" y="191.50"></text></g><g><title>0x7ff8067dfd99 (59 samples, 0.01%)</title><rect x="19.9825%" y="165" width="0.0116%" height="15" fill="rgb(235,61,29)" fg:x="101753" fg:w="59"/><text x="20.2325%" y="175.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (109 samples, 0.02%)</title><rect x="19.9996%" y="181" width="0.0214%" height="15" fill="rgb(219,207,3)" fg:x="101840" fg:w="109"/><text x="20.2496%" y="191.50"></text></g><g><title>_pthread_mutex_firstfit_wake (104 samples, 0.02%)</title><rect x="20.0005%" y="165" width="0.0204%" height="15" fill="rgb(222,56,46)" fg:x="101845" fg:w="104"/><text x="20.2505%" y="175.50"></text></g><g><title>__psynch_mutexdrop (104 samples, 0.02%)</title><rect x="20.0005%" y="149" width="0.0204%" height="15" fill="rgb(239,76,54)" fg:x="101845" fg:w="104"/><text x="20.2505%" y="159.50"></text></g><g><title>__psynch_cvsignal (551 samples, 0.11%)</title><rect x="20.0377%" y="149" width="0.1082%" height="15" fill="rgb(231,124,27)" fg:x="102034" fg:w="551"/><text x="20.2877%" y="159.50"></text></g><g><title>pthread_cond_signal (566 samples, 0.11%)</title><rect x="20.0355%" y="165" width="0.1112%" height="15" fill="rgb(249,195,6)" fg:x="102023" fg:w="566"/><text x="20.2855%" y="175.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (590 samples, 0.12%)</title><rect x="20.0347%" y="181" width="0.1159%" height="15" fill="rgb(237,174,47)" fg:x="102019" fg:w="590"/><text x="20.2847%" y="191.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::start_seek (907 samples, 0.18%)</title><rect x="19.9734%" y="229" width="0.1781%" height="15" fill="rgb(206,201,31)" fg:x="101707" fg:w="907"/><text x="20.2234%" y="239.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (883 samples, 0.17%)</title><rect x="19.9782%" y="213" width="0.1734%" height="15" fill="rgb(231,57,52)" fg:x="101731" fg:w="883"/><text x="20.2282%" y="223.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (795 samples, 0.16%)</title><rect x="19.9954%" y="197" width="0.1561%" height="15" fill="rgb(248,177,22)" fg:x="101819" fg:w="795"/><text x="20.2454%" y="207.50"></text></g><g><title>__rdl_alloc (62 samples, 0.01%)</title><rect x="20.1639%" y="197" width="0.0122%" height="15" fill="rgb(215,211,37)" fg:x="102677" fg:w="62"/><text x="20.4139%" y="207.50"></text></g><g><title>0x7ff8067e0345 (61 samples, 0.01%)</title><rect x="20.1641%" y="181" width="0.0120%" height="15" fill="rgb(241,128,51)" fg:x="102678" fg:w="61"/><text x="20.4141%" y="191.50"></text></g><g><title>0x7ff8067dfd99 (55 samples, 0.01%)</title><rect x="20.1653%" y="165" width="0.0108%" height="15" fill="rgb(227,165,31)" fg:x="102684" fg:w="55"/><text x="20.4153%" y="175.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (93 samples, 0.02%)</title><rect x="20.1787%" y="181" width="0.0183%" height="15" fill="rgb(228,167,24)" fg:x="102752" fg:w="93"/><text x="20.4287%" y="191.50"></text></g><g><title>_pthread_mutex_firstfit_wake (88 samples, 0.02%)</title><rect x="20.1797%" y="165" width="0.0173%" height="15" fill="rgb(228,143,12)" fg:x="102757" fg:w="88"/><text x="20.4297%" y="175.50"></text></g><g><title>__psynch_mutexdrop (87 samples, 0.02%)</title><rect x="20.1798%" y="149" width="0.0171%" height="15" fill="rgb(249,149,8)" fg:x="102758" fg:w="87"/><text x="20.4298%" y="159.50"></text></g><g><title>__psynch_cvsignal (653 samples, 0.13%)</title><rect x="20.2140%" y="149" width="0.1282%" height="15" fill="rgb(243,35,44)" fg:x="102932" fg:w="653"/><text x="20.4640%" y="159.50"></text></g><g><title>pthread_cond_signal (660 samples, 0.13%)</title><rect x="20.2136%" y="165" width="0.1296%" height="15" fill="rgb(246,89,9)" fg:x="102930" fg:w="660"/><text x="20.4636%" y="175.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (699 samples, 0.14%)</title><rect x="20.2111%" y="181" width="0.1373%" height="15" fill="rgb(233,213,13)" fg:x="102917" fg:w="699"/><text x="20.4611%" y="191.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (1,005 samples, 0.20%)</title><rect x="20.1516%" y="229" width="0.1974%" height="15" fill="rgb(233,141,41)" fg:x="102614" fg:w="1005"/><text x="20.4016%" y="239.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (951 samples, 0.19%)</title><rect x="20.1622%" y="213" width="0.1868%" height="15" fill="rgb(239,167,4)" fg:x="102668" fg:w="951"/><text x="20.4122%" y="223.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (880 samples, 0.17%)</title><rect x="20.1761%" y="197" width="0.1728%" height="15" fill="rgb(209,217,16)" fg:x="102739" fg:w="880"/><text x="20.4261%" y="207.50"></text></g><g><title>serde_json::ser::format_escaped_str (89 samples, 0.02%)</title><rect x="20.3613%" y="197" width="0.0175%" height="15" fill="rgb(219,88,35)" fg:x="103682" fg:w="89"/><text x="20.6113%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (57 samples, 0.01%)</title><rect x="20.3676%" y="181" width="0.0112%" height="15" fill="rgb(220,193,23)" fg:x="103714" fg:w="57"/><text x="20.6176%" y="191.50"></text></g><g><title>storagev2::disk::meta::_::_&lt;impl serde::ser::Serialize for storagev2::disk::meta::WriterPositionPtrSnapshot&gt;::serialize (133 samples, 0.03%)</title><rect x="20.3544%" y="229" width="0.0261%" height="15" fill="rgb(230,90,52)" fg:x="103647" fg:w="133"/><text x="20.6044%" y="239.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (120 samples, 0.02%)</title><rect x="20.3570%" y="213" width="0.0236%" height="15" fill="rgb(252,106,19)" fg:x="103660" fg:w="120"/><text x="20.6070%" y="223.50"></text></g><g><title>&lt;&amp;mut F as core::future::future::Future&gt;::poll (61 samples, 0.01%)</title><rect x="20.3892%" y="213" width="0.0120%" height="15" fill="rgb(206,74,20)" fg:x="103824" fg:w="61"/><text x="20.6392%" y="223.50"></text></g><g><title>0x7ff8067b9d11 (52 samples, 0.01%)</title><rect x="20.4131%" y="165" width="0.0102%" height="15" fill="rgb(230,138,44)" fg:x="103946" fg:w="52"/><text x="20.6631%" y="175.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (81 samples, 0.02%)</title><rect x="20.4114%" y="181" width="0.0159%" height="15" fill="rgb(235,182,43)" fg:x="103937" fg:w="81"/><text x="20.6614%" y="191.50"></text></g><g><title>tokio::fs::file::Inner::poll_complete_inflight (121 samples, 0.02%)</title><rect x="20.4037%" y="213" width="0.0238%" height="15" fill="rgb(242,16,51)" fg:x="103898" fg:w="121"/><text x="20.6537%" y="223.50"></text></g><g><title>tokio::fs::file::Inner::poll_flush (116 samples, 0.02%)</title><rect x="20.4047%" y="197" width="0.0228%" height="15" fill="rgb(248,9,4)" fg:x="103903" fg:w="116"/><text x="20.6547%" y="207.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (91 samples, 0.02%)</title><rect x="20.4332%" y="181" width="0.0179%" height="15" fill="rgb(210,31,22)" fg:x="104048" fg:w="91"/><text x="20.6832%" y="191.50"></text></g><g><title>_pthread_mutex_firstfit_wake (89 samples, 0.02%)</title><rect x="20.4336%" y="165" width="0.0175%" height="15" fill="rgb(239,54,39)" fg:x="104050" fg:w="89"/><text x="20.6836%" y="175.50"></text></g><g><title>__psynch_mutexdrop (88 samples, 0.02%)</title><rect x="20.4338%" y="149" width="0.0173%" height="15" fill="rgb(230,99,41)" fg:x="104051" fg:w="88"/><text x="20.6838%" y="159.50"></text></g><g><title>__psynch_cvsignal (641 samples, 0.13%)</title><rect x="20.4652%" y="149" width="0.1259%" height="15" fill="rgb(253,106,12)" fg:x="104211" fg:w="641"/><text x="20.7152%" y="159.50"></text></g><g><title>pthread_cond_signal (654 samples, 0.13%)</title><rect x="20.4638%" y="165" width="0.1284%" height="15" fill="rgb(213,46,41)" fg:x="104204" fg:w="654"/><text x="20.7138%" y="175.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (692 samples, 0.14%)</title><rect x="20.4624%" y="181" width="0.1359%" height="15" fill="rgb(215,133,35)" fg:x="104197" fg:w="692"/><text x="20.7124%" y="191.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (858 samples, 0.17%)</title><rect x="20.4304%" y="197" width="0.1685%" height="15" fill="rgb(213,28,5)" fg:x="104034" fg:w="858"/><text x="20.6804%" y="207.50"></text></g><g><title>0x7ff8067dfd99 (65 samples, 0.01%)</title><rect x="20.6032%" y="149" width="0.0128%" height="15" fill="rgb(215,77,49)" fg:x="104914" fg:w="65"/><text x="20.8532%" y="159.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (87 samples, 0.02%)</title><rect x="20.5991%" y="197" width="0.0171%" height="15" fill="rgb(248,100,22)" fg:x="104893" fg:w="87"/><text x="20.8491%" y="207.50"></text></g><g><title>__rdl_alloc (76 samples, 0.01%)</title><rect x="20.6013%" y="181" width="0.0149%" height="15" fill="rgb(208,67,9)" fg:x="104904" fg:w="76"/><text x="20.8513%" y="191.50"></text></g><g><title>0x7ff8067e0345 (74 samples, 0.01%)</title><rect x="20.6017%" y="165" width="0.0145%" height="15" fill="rgb(219,133,21)" fg:x="104906" fg:w="74"/><text x="20.8517%" y="175.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (962 samples, 0.19%)</title><rect x="20.4275%" y="213" width="0.1889%" height="15" fill="rgb(246,46,29)" fg:x="104019" fg:w="962"/><text x="20.6775%" y="223.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (95 samples, 0.02%)</title><rect x="20.6164%" y="213" width="0.0187%" height="15" fill="rgb(246,185,52)" fg:x="104981" fg:w="95"/><text x="20.8664%" y="223.50"></text></g><g><title>tokio::fs::file::File::set_len::_{{closure}} (1,319 samples, 0.26%)</title><rect x="20.3805%" y="229" width="0.2590%" height="15" fill="rgb(252,136,11)" fg:x="103780" fg:w="1319"/><text x="20.6305%" y="239.50"></text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::read::_{{closure}} (60 samples, 0.01%)</title><rect x="20.6413%" y="229" width="0.0118%" height="15" fill="rgb(219,138,53)" fg:x="105108" fg:w="60"/><text x="20.8913%" y="239.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (56 samples, 0.01%)</title><rect x="20.6421%" y="213" width="0.0110%" height="15" fill="rgb(211,51,23)" fg:x="105112" fg:w="56"/><text x="20.8921%" y="223.50"></text></g><g><title>storagev2::disk::writer::flusher::Flusher::new::_$u7b$$u7b$closure$u7d$$u7d$::h1864b876068895a2 (.llvm.724537013135552685) (3,822 samples, 0.75%)</title><rect x="19.9067%" y="245" width="0.7506%" height="15" fill="rgb(247,221,28)" fg:x="101367" fg:w="3822"/><text x="20.1567%" y="255.50"></text></g><g><title>0x7ff8067b9d11 (61 samples, 0.01%)</title><rect x="20.7808%" y="229" width="0.0120%" height="15" fill="rgb(251,222,45)" fg:x="105818" fg:w="61"/><text x="21.0308%" y="239.50"></text></g><g><title>&lt;tokio_util::sync::cancellation_token::WaitForCancellationFuture as core::future::future::Future&gt;::poll (84 samples, 0.02%)</title><rect x="20.8509%" y="213" width="0.0165%" height="15" fill="rgb(217,162,53)" fg:x="106175" fg:w="84"/><text x="21.1009%" y="223.50"></text></g><g><title>tokio::sync::mpsc::list::Rx$LT$T$GT$::pop::h12c51d67c608f638 (.llvm.15150753405431101526) (87 samples, 0.02%)</title><rect x="20.8778%" y="197" width="0.0171%" height="15" fill="rgb(229,93,14)" fg:x="106312" fg:w="87"/><text x="21.1278%" y="207.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (146 samples, 0.03%)</title><rect x="20.8682%" y="213" width="0.0287%" height="15" fill="rgb(209,67,49)" fg:x="106263" fg:w="146"/><text x="21.1182%" y="223.50"></text></g><g><title>&lt;core::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (285 samples, 0.06%)</title><rect x="20.8415%" y="229" width="0.0560%" height="15" fill="rgb(213,87,29)" fg:x="106127" fg:w="285"/><text x="21.0915%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;storagev2::disk::writer::buffer::PartitionWriterBuffer::flush::{{closure}}&gt; (70 samples, 0.01%)</title><rect x="20.9086%" y="229" width="0.0137%" height="15" fill="rgb(205,151,52)" fg:x="106469" fg:w="70"/><text x="21.1586%" y="239.50"></text></g><g><title>0x7ff8067b742f (189 samples, 0.04%)</title><rect x="22.0901%" y="197" width="0.0371%" height="15" fill="rgb(253,215,39)" fg:x="112485" fg:w="189"/><text x="22.3401%" y="207.50"></text></g><g><title>0x7ff8067b622a (270 samples, 0.05%)</title><rect x="22.0816%" y="213" width="0.0530%" height="15" fill="rgb(221,220,41)" fg:x="112442" fg:w="270"/><text x="22.3316%" y="223.50"></text></g><g><title>0x7ff8067b9b8b (56 samples, 0.01%)</title><rect x="22.1553%" y="213" width="0.0110%" height="15" fill="rgb(218,133,21)" fg:x="112817" fg:w="56"/><text x="22.4053%" y="223.50"></text></g><g><title>0x7ff8067b9d11 (155 samples, 0.03%)</title><rect x="22.1714%" y="213" width="0.0304%" height="15" fill="rgb(221,193,43)" fg:x="112899" fg:w="155"/><text x="22.4214%" y="223.50"></text></g><g><title>0x7ff8067d67df (79 samples, 0.02%)</title><rect x="22.2403%" y="213" width="0.0155%" height="15" fill="rgb(240,128,52)" fg:x="113250" fg:w="79"/><text x="22.4903%" y="223.50"></text></g><g><title>0x7ff8067d6844 (87 samples, 0.02%)</title><rect x="22.2621%" y="213" width="0.0171%" height="15" fill="rgb(253,114,12)" fg:x="113361" fg:w="87"/><text x="22.5121%" y="223.50"></text></g><g><title>0x7ff8067d68aa (127 samples, 0.02%)</title><rect x="22.2853%" y="213" width="0.0249%" height="15" fill="rgb(215,223,47)" fg:x="113479" fg:w="127"/><text x="22.5353%" y="223.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (115 samples, 0.02%)</title><rect x="22.2876%" y="197" width="0.0226%" height="15" fill="rgb(248,225,23)" fg:x="113491" fg:w="115"/><text x="22.5376%" y="207.50"></text></g><g><title>0x7ff8067d6961 (66 samples, 0.01%)</title><rect x="22.3226%" y="213" width="0.0130%" height="15" fill="rgb(250,108,0)" fg:x="113669" fg:w="66"/><text x="22.5726%" y="223.50"></text></g><g><title>0x7ff8067d6984 (154 samples, 0.03%)</title><rect x="22.3371%" y="213" width="0.0302%" height="15" fill="rgb(228,208,7)" fg:x="113743" fg:w="154"/><text x="22.5871%" y="223.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (81 samples, 0.02%)</title><rect x="22.6248%" y="181" width="0.0159%" height="15" fill="rgb(244,45,10)" fg:x="115208" fg:w="81"/><text x="22.8748%" y="191.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (388 samples, 0.08%)</title><rect x="22.5718%" y="197" width="0.0762%" height="15" fill="rgb(207,125,25)" fg:x="114938" fg:w="388"/><text x="22.8218%" y="207.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (32,745 samples, 6.43%)</title><rect x="22.6501%" y="197" width="6.4305%" height="15" fill="rgb(210,195,18)" fg:x="115337" fg:w="32745"/><text x="22.9001%" y="207.50">_platfor..</text></g><g><title>0x7ff8067c1754 (98 samples, 0.02%)</title><rect x="29.0956%" y="117" width="0.0192%" height="15" fill="rgb(249,80,12)" fg:x="148158" fg:w="98"/><text x="29.3456%" y="127.50"></text></g><g><title>vm_allocate (98 samples, 0.02%)</title><rect x="29.0956%" y="101" width="0.0192%" height="15" fill="rgb(221,65,9)" fg:x="148158" fg:w="98"/><text x="29.3456%" y="111.50"></text></g><g><title>mach_vm_allocate (97 samples, 0.02%)</title><rect x="29.0958%" y="85" width="0.0190%" height="15" fill="rgb(235,49,36)" fg:x="148159" fg:w="97"/><text x="29.3458%" y="95.50"></text></g><g><title>_kernelrpc_mach_vm_allocate_trap (95 samples, 0.02%)</title><rect x="29.0962%" y="69" width="0.0187%" height="15" fill="rgb(225,32,20)" fg:x="148161" fg:w="95"/><text x="29.3462%" y="79.50"></text></g><g><title>0x7ff8067b9278 (106 samples, 0.02%)</title><rect x="29.0942%" y="133" width="0.0208%" height="15" fill="rgb(215,141,46)" fg:x="148151" fg:w="106"/><text x="29.3442%" y="143.50"></text></g><g><title>0x7ff8067ce2b0 (211 samples, 0.04%)</title><rect x="29.1184%" y="85" width="0.0414%" height="15" fill="rgb(250,160,47)" fg:x="148274" fg:w="211"/><text x="29.3684%" y="95.50"></text></g><g><title>mach_vm_map (211 samples, 0.04%)</title><rect x="29.1184%" y="69" width="0.0414%" height="15" fill="rgb(216,222,40)" fg:x="148274" fg:w="211"/><text x="29.3684%" y="79.50"></text></g><g><title>_kernelrpc_mach_vm_map_trap (208 samples, 0.04%)</title><rect x="29.1190%" y="53" width="0.0408%" height="15" fill="rgb(234,217,39)" fg:x="148277" fg:w="208"/><text x="29.3690%" y="63.50"></text></g><g><title>0x7ff8067bfcaf (214 samples, 0.04%)</title><rect x="29.1184%" y="101" width="0.0420%" height="15" fill="rgb(207,178,40)" fg:x="148274" fg:w="214"/><text x="29.3684%" y="111.50"></text></g><g><title>0x7ff8067b62da (240 samples, 0.05%)</title><rect x="29.1154%" y="117" width="0.0471%" height="15" fill="rgb(221,136,13)" fg:x="148259" fg:w="240"/><text x="29.3654%" y="127.50"></text></g><g><title>0x7ff8067b936f (243 samples, 0.05%)</title><rect x="29.1150%" y="133" width="0.0477%" height="15" fill="rgb(249,199,10)" fg:x="148257" fg:w="243"/><text x="29.3650%" y="143.50"></text></g><g><title>0x7ff8067b93b0 (2,273 samples, 0.45%)</title><rect x="29.1628%" y="133" width="0.4464%" height="15" fill="rgb(249,222,13)" fg:x="148500" fg:w="2273"/><text x="29.4128%" y="143.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (2,273 samples, 0.45%)</title><rect x="29.1628%" y="117" width="0.4464%" height="15" fill="rgb(244,185,38)" fg:x="148500" fg:w="2273"/><text x="29.4128%" y="127.50"></text></g><g><title>0x7ff8067bfdda (58 samples, 0.01%)</title><rect x="29.6156%" y="101" width="0.0114%" height="15" fill="rgb(236,202,9)" fg:x="150806" fg:w="58"/><text x="29.8656%" y="111.50"></text></g><g><title>madvise (56 samples, 0.01%)</title><rect x="29.6160%" y="85" width="0.0110%" height="15" fill="rgb(250,229,37)" fg:x="150808" fg:w="56"/><text x="29.8660%" y="95.50"></text></g><g><title>0x7ff8067ce62e (592 samples, 0.12%)</title><rect x="29.6278%" y="85" width="0.1163%" height="15" fill="rgb(206,174,23)" fg:x="150868" fg:w="592"/><text x="29.8778%" y="95.50"></text></g><g><title>mach_vm_deallocate (592 samples, 0.12%)</title><rect x="29.6278%" y="69" width="0.1163%" height="15" fill="rgb(211,33,43)" fg:x="150868" fg:w="592"/><text x="29.8778%" y="79.50"></text></g><g><title>_kernelrpc_mach_vm_deallocate_trap (587 samples, 0.12%)</title><rect x="29.6288%" y="53" width="0.1153%" height="15" fill="rgb(245,58,50)" fg:x="150873" fg:w="587"/><text x="29.8788%" y="63.50"></text></g><g><title>0x7ff8067bfeda (594 samples, 0.12%)</title><rect x="29.6276%" y="101" width="0.1167%" height="15" fill="rgb(244,68,36)" fg:x="150867" fg:w="594"/><text x="29.8776%" y="111.50"></text></g><g><title>0x7ff8067caaa5 (665 samples, 0.13%)</title><rect x="29.6152%" y="117" width="0.1306%" height="15" fill="rgb(232,229,15)" fg:x="150804" fg:w="665"/><text x="29.8652%" y="127.50"></text></g><g><title>0x7ff8067b93bd (697 samples, 0.14%)</title><rect x="29.6091%" y="133" width="0.1369%" height="15" fill="rgb(254,30,23)" fg:x="150773" fg:w="697"/><text x="29.8591%" y="143.50"></text></g><g><title>0x7ff8067e026b (3,340 samples, 0.66%)</title><rect x="29.0907%" y="165" width="0.6559%" height="15" fill="rgb(235,160,14)" fg:x="148133" fg:w="3340"/><text x="29.3407%" y="175.50"></text></g><g><title>0x7ff8067dfb9f (3,339 samples, 0.66%)</title><rect x="29.0909%" y="149" width="0.6557%" height="15" fill="rgb(212,155,44)" fg:x="148134" fg:w="3339"/><text x="29.3409%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3,392 samples, 0.67%)</title><rect x="29.0807%" y="197" width="0.6661%" height="15" fill="rgb(226,2,50)" fg:x="148082" fg:w="3392"/><text x="29.3307%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow::hf558d70e8ae63120 (.llvm.3614328785669206289) (3,384 samples, 0.66%)</title><rect x="29.0822%" y="181" width="0.6646%" height="15" fill="rgb(234,177,6)" fg:x="148090" fg:w="3384"/><text x="29.3322%" y="191.50"></text></g><g><title>0x7ff8067b734b (53 samples, 0.01%)</title><rect x="29.8491%" y="117" width="0.0104%" height="15" fill="rgb(217,24,9)" fg:x="151995" fg:w="53"/><text x="30.0991%" y="127.50"></text></g><g><title>0x7ff8067b7b46 (55 samples, 0.01%)</title><rect x="29.8697%" y="101" width="0.0108%" height="15" fill="rgb(220,13,46)" fg:x="152100" fg:w="55"/><text x="30.1197%" y="111.50"></text></g><g><title>0x7ff8067b809a (54 samples, 0.01%)</title><rect x="29.9114%" y="101" width="0.0106%" height="15" fill="rgb(239,221,27)" fg:x="152312" fg:w="54"/><text x="30.1614%" y="111.50"></text></g><g><title>0x7ff8067b80ce (79 samples, 0.02%)</title><rect x="29.9220%" y="101" width="0.0155%" height="15" fill="rgb(222,198,25)" fg:x="152366" fg:w="79"/><text x="30.1720%" y="111.50"></text></g><g><title>0x7ff8067b742f (453 samples, 0.09%)</title><rect x="29.8601%" y="117" width="0.0890%" height="15" fill="rgb(211,99,13)" fg:x="152051" fg:w="453"/><text x="30.1101%" y="127.50"></text></g><g><title>0x7ff8067b758d (103 samples, 0.02%)</title><rect x="29.9491%" y="117" width="0.0202%" height="15" fill="rgb(232,111,31)" fg:x="152504" fg:w="103"/><text x="30.1991%" y="127.50"></text></g><g><title>0x7ff8067b75af (97 samples, 0.02%)</title><rect x="29.9693%" y="117" width="0.0190%" height="15" fill="rgb(245,82,37)" fg:x="152607" fg:w="97"/><text x="30.2193%" y="127.50"></text></g><g><title>0x7ff8067bdd8f (838 samples, 0.16%)</title><rect x="29.8428%" y="133" width="0.1646%" height="15" fill="rgb(227,149,46)" fg:x="151963" fg:w="838"/><text x="30.0928%" y="143.50"></text></g><g><title>0x7ff8067ba2bc (77 samples, 0.02%)</title><rect x="30.0659%" y="101" width="0.0151%" height="15" fill="rgb(218,36,50)" fg:x="153099" fg:w="77"/><text x="30.3159%" y="111.50"></text></g><g><title>0x7ff8067ba48d (88 samples, 0.02%)</title><rect x="30.0830%" y="101" width="0.0173%" height="15" fill="rgb(226,80,48)" fg:x="153186" fg:w="88"/><text x="30.3330%" y="111.50"></text></g><g><title>0x7ff8067ba4e1 (104 samples, 0.02%)</title><rect x="30.1005%" y="101" width="0.0204%" height="15" fill="rgb(238,224,15)" fg:x="153275" fg:w="104"/><text x="30.3505%" y="111.50"></text></g><g><title>0x7ff8067ce738 (647 samples, 0.13%)</title><rect x="30.1352%" y="53" width="0.1271%" height="15" fill="rgb(241,136,10)" fg:x="153452" fg:w="647"/><text x="30.3852%" y="63.50"></text></g><g><title>madvise (638 samples, 0.13%)</title><rect x="30.1370%" y="37" width="0.1253%" height="15" fill="rgb(208,32,45)" fg:x="153461" fg:w="638"/><text x="30.3870%" y="47.50"></text></g><g><title>0x7ff8067befc6 (653 samples, 0.13%)</title><rect x="30.1347%" y="69" width="0.1282%" height="15" fill="rgb(207,135,9)" fg:x="153449" fg:w="653"/><text x="30.3847%" y="79.50"></text></g><g><title>0x7ff8067c103d (661 samples, 0.13%)</title><rect x="30.1339%" y="85" width="0.1298%" height="15" fill="rgb(206,86,44)" fg:x="153445" fg:w="661"/><text x="30.3839%" y="95.50"></text></g><g><title>0x7ff8067ba5c2 (729 samples, 0.14%)</title><rect x="30.1209%" y="101" width="0.1432%" height="15" fill="rgb(245,177,15)" fg:x="153379" fg:w="729"/><text x="30.3709%" y="111.50"></text></g><g><title>0x7ff8067b9d11 (1,177 samples, 0.23%)</title><rect x="30.0483%" y="117" width="0.2311%" height="15" fill="rgb(206,64,50)" fg:x="153009" fg:w="1177"/><text x="30.2983%" y="127.50"></text></g><g><title>0x7ff8067c5a47 (55 samples, 0.01%)</title><rect x="30.2686%" y="101" width="0.0108%" height="15" fill="rgb(234,36,40)" fg:x="154131" fg:w="55"/><text x="30.5186%" y="111.50"></text></g><g><title>0x7ff8067be058 (1,317 samples, 0.26%)</title><rect x="30.0312%" y="133" width="0.2586%" height="15" fill="rgb(213,64,8)" fg:x="152922" fg:w="1317"/><text x="30.2812%" y="143.50"></text></g><g><title>0x7ff8067dfd99 (2,320 samples, 0.46%)</title><rect x="29.8350%" y="149" width="0.4556%" height="15" fill="rgb(210,75,36)" fg:x="151923" fg:w="2320"/><text x="30.0850%" y="159.50"></text></g><g><title>0x7ff8067e0345 (2,466 samples, 0.48%)</title><rect x="29.8081%" y="165" width="0.4843%" height="15" fill="rgb(229,88,21)" fg:x="151786" fg:w="2466"/><text x="30.0581%" y="175.50"></text></g><g><title>__rdl_alloc (2,499 samples, 0.49%)</title><rect x="29.8020%" y="181" width="0.4908%" height="15" fill="rgb(252,204,47)" fg:x="151755" fg:w="2499"/><text x="30.0520%" y="191.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (709 samples, 0.14%)</title><rect x="30.3499%" y="165" width="0.1392%" height="15" fill="rgb(208,77,27)" fg:x="154545" fg:w="709"/><text x="30.5999%" y="175.50"></text></g><g><title>_pthread_mutex_firstfit_wake (679 samples, 0.13%)</title><rect x="30.3558%" y="149" width="0.1333%" height="15" fill="rgb(221,76,26)" fg:x="154575" fg:w="679"/><text x="30.6058%" y="159.50"></text></g><g><title>__psynch_mutexdrop (674 samples, 0.13%)</title><rect x="30.3568%" y="133" width="0.1324%" height="15" fill="rgb(225,139,18)" fg:x="154580" fg:w="674"/><text x="30.6068%" y="143.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (301 samples, 0.06%)</title><rect x="30.4891%" y="165" width="0.0591%" height="15" fill="rgb(230,137,11)" fg:x="155254" fg:w="301"/><text x="30.7391%" y="175.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (91 samples, 0.02%)</title><rect x="30.5304%" y="149" width="0.0179%" height="15" fill="rgb(212,28,1)" fg:x="155464" fg:w="91"/><text x="30.7804%" y="159.50"></text></g><g><title>cthread_yield (135 samples, 0.03%)</title><rect x="30.5598%" y="149" width="0.0265%" height="15" fill="rgb(248,164,17)" fg:x="155614" fg:w="135"/><text x="30.8098%" y="159.50"></text></g><g><title>swtch_pri (127 samples, 0.02%)</title><rect x="30.5614%" y="133" width="0.0249%" height="15" fill="rgb(222,171,42)" fg:x="155622" fg:w="127"/><text x="30.8114%" y="143.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (197 samples, 0.04%)</title><rect x="30.5482%" y="165" width="0.0387%" height="15" fill="rgb(243,84,45)" fg:x="155555" fg:w="197"/><text x="30.7982%" y="175.50"></text></g><g><title>__psynch_cvsignal (7,586 samples, 1.49%)</title><rect x="30.6299%" y="133" width="1.4898%" height="15" fill="rgb(252,49,23)" fg:x="155971" fg:w="7586"/><text x="30.8799%" y="143.50"></text></g><g><title>pthread_cond_signal (7,732 samples, 1.52%)</title><rect x="30.6156%" y="149" width="1.5184%" height="15" fill="rgb(215,19,7)" fg:x="155898" fg:w="7732"/><text x="30.8656%" y="159.50"></text></g><g><title>_pthread_cond_updateval (73 samples, 0.01%)</title><rect x="32.1197%" y="133" width="0.0143%" height="15" fill="rgb(238,81,41)" fg:x="163557" fg:w="73"/><text x="32.3697%" y="143.50"></text></g><g><title>pthread_mutex_lock (138 samples, 0.03%)</title><rect x="32.1340%" y="149" width="0.0271%" height="15" fill="rgb(210,199,37)" fg:x="163630" fg:w="138"/><text x="32.3840%" y="159.50"></text></g><g><title>0x7ff80684e86d (120 samples, 0.02%)</title><rect x="32.1653%" y="133" width="0.0236%" height="15" fill="rgb(244,192,49)" fg:x="163789" fg:w="120"/><text x="32.4153%" y="143.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (146 samples, 0.03%)</title><rect x="32.1611%" y="149" width="0.0287%" height="15" fill="rgb(226,211,11)" fg:x="163768" fg:w="146"/><text x="32.4111%" y="159.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (8,165 samples, 1.60%)</title><rect x="30.5869%" y="165" width="1.6035%" height="15" fill="rgb(236,162,54)" fg:x="155752" fg:w="8165"/><text x="30.8369%" y="175.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (12,482 samples, 2.45%)</title><rect x="29.7468%" y="197" width="2.4512%" height="15" fill="rgb(220,229,9)" fg:x="151474" fg:w="12482"/><text x="29.9968%" y="207.50">to..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (9,662 samples, 1.90%)</title><rect x="30.3006%" y="181" width="1.8974%" height="15" fill="rgb(250,87,22)" fg:x="154294" fg:w="9662"/><text x="30.5506%" y="191.50">t..</text></g><g><title>0x7ff8067b9b8b (76 samples, 0.01%)</title><rect x="32.2255%" y="181" width="0.0149%" height="15" fill="rgb(239,43,17)" fg:x="164096" fg:w="76"/><text x="32.4755%" y="191.50"></text></g><g><title>0x7ff8067bac2e (104 samples, 0.02%)</title><rect x="32.2731%" y="149" width="0.0204%" height="15" fill="rgb(231,177,25)" fg:x="164338" fg:w="104"/><text x="32.5231%" y="159.50"></text></g><g><title>0x7ff8067ba0f3 (195 samples, 0.04%)</title><rect x="32.2654%" y="165" width="0.0383%" height="15" fill="rgb(219,179,1)" fg:x="164299" fg:w="195"/><text x="32.5154%" y="175.50"></text></g><g><title>0x7ff8067bac2e (75 samples, 0.01%)</title><rect x="32.3220%" y="149" width="0.0147%" height="15" fill="rgb(238,219,53)" fg:x="164587" fg:w="75"/><text x="32.5720%" y="159.50"></text></g><g><title>0x7ff8067ba222 (158 samples, 0.03%)</title><rect x="32.3178%" y="165" width="0.0310%" height="15" fill="rgb(232,167,36)" fg:x="164566" fg:w="158"/><text x="32.5678%" y="175.50"></text></g><g><title>0x7ff8067ba8a7 (55 samples, 0.01%)</title><rect x="32.3587%" y="149" width="0.0108%" height="15" fill="rgb(244,19,51)" fg:x="164774" fg:w="55"/><text x="32.6087%" y="159.50"></text></g><g><title>0x7ff8067ba2bc (156 samples, 0.03%)</title><rect x="32.3495%" y="165" width="0.0306%" height="15" fill="rgb(224,6,22)" fg:x="164727" fg:w="156"/><text x="32.5995%" y="175.50"></text></g><g><title>0x7ff8067c5a47 (101 samples, 0.02%)</title><rect x="32.3964%" y="165" width="0.0198%" height="15" fill="rgb(224,145,5)" fg:x="164966" fg:w="101"/><text x="32.6464%" y="175.50"></text></g><g><title>0x7ff8067b9d11 (848 samples, 0.17%)</title><rect x="32.2505%" y="181" width="0.1665%" height="15" fill="rgb(234,130,49)" fg:x="164223" fg:w="848"/><text x="32.5005%" y="191.50"></text></g><g><title>0x7ff8067b9d6d (100 samples, 0.02%)</title><rect x="32.4219%" y="181" width="0.0196%" height="15" fill="rgb(254,6,2)" fg:x="165096" fg:w="100"/><text x="32.6719%" y="191.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (1,403 samples, 0.28%)</title><rect x="32.1980%" y="197" width="0.2755%" height="15" fill="rgb(208,96,46)" fg:x="163956" fg:w="1403"/><text x="32.4480%" y="207.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (51,371 samples, 10.09%)</title><rect x="22.3858%" y="213" width="10.0884%" height="15" fill="rgb(239,3,39)" fg:x="113991" fg:w="51371"/><text x="22.6358%" y="223.50">&lt;tokio::fs::fil..</text></g><g><title>bytes::bytes::owned_drop (264 samples, 0.05%)</title><rect x="32.4979%" y="213" width="0.0518%" height="15" fill="rgb(233,210,1)" fg:x="165483" fg:w="264"/><text x="32.7479%" y="223.50"></text></g><g><title>bytes::bytes::shared_drop::h2f4486fd7f0a6f4b (.llvm.6858511044588184240) (223 samples, 0.04%)</title><rect x="32.5498%" y="213" width="0.0438%" height="15" fill="rgb(244,137,37)" fg:x="165747" fg:w="223"/><text x="32.7998%" y="223.50"></text></g><g><title>0x7ff8067b8982 (65 samples, 0.01%)</title><rect x="33.1538%" y="197" width="0.0128%" height="15" fill="rgb(240,136,2)" fg:x="168823" fg:w="65"/><text x="33.4038%" y="207.50"></text></g><g><title>0x7ff8067b8b90 (98 samples, 0.02%)</title><rect x="33.1804%" y="197" width="0.0192%" height="15" fill="rgb(239,18,37)" fg:x="168958" fg:w="98"/><text x="33.4304%" y="207.50"></text></g><g><title>0x7ff8067b8c70 (76 samples, 0.01%)</title><rect x="33.2008%" y="197" width="0.0149%" height="15" fill="rgb(218,185,22)" fg:x="169062" fg:w="76"/><text x="33.4508%" y="207.50"></text></g><g><title>0x7ff8067befc6 (68 samples, 0.01%)</title><rect x="33.2285%" y="165" width="0.0134%" height="15" fill="rgb(225,218,4)" fg:x="169203" fg:w="68"/><text x="33.4785%" y="175.50"></text></g><g><title>0x7ff8067ce738 (68 samples, 0.01%)</title><rect x="33.2285%" y="149" width="0.0134%" height="15" fill="rgb(230,182,32)" fg:x="169203" fg:w="68"/><text x="33.4785%" y="159.50"></text></g><g><title>madvise (68 samples, 0.01%)</title><rect x="33.2285%" y="133" width="0.0134%" height="15" fill="rgb(242,56,43)" fg:x="169203" fg:w="68"/><text x="33.4785%" y="143.50"></text></g><g><title>0x7ff8067b8d7f (72 samples, 0.01%)</title><rect x="33.2281%" y="197" width="0.0141%" height="15" fill="rgb(233,99,24)" fg:x="169201" fg:w="72"/><text x="33.4781%" y="207.50"></text></g><g><title>0x7ff8067cda8a (70 samples, 0.01%)</title><rect x="33.2285%" y="181" width="0.0137%" height="15" fill="rgb(234,209,42)" fg:x="169203" fg:w="70"/><text x="33.4785%" y="191.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::pop (3,344 samples, 0.66%)</title><rect x="32.5989%" y="213" width="0.6567%" height="15" fill="rgb(227,7,12)" fg:x="165997" fg:w="3344"/><text x="32.8489%" y="223.50"></text></g><g><title>0x7ff80683f8c6 (89 samples, 0.02%)</title><rect x="33.3027%" y="181" width="0.0175%" height="15" fill="rgb(245,203,43)" fg:x="169581" fg:w="89"/><text x="33.5527%" y="191.50"></text></g><g><title>mach_timebase_info (89 samples, 0.02%)</title><rect x="33.3027%" y="165" width="0.0175%" height="15" fill="rgb(238,205,33)" fg:x="169581" fg:w="89"/><text x="33.5527%" y="175.50"></text></g><g><title>0x7ff80683f91d (292 samples, 0.06%)</title><rect x="33.3259%" y="181" width="0.0573%" height="15" fill="rgb(231,56,7)" fg:x="169699" fg:w="292"/><text x="33.5759%" y="191.50"></text></g><g><title>mach_absolute_time (292 samples, 0.06%)</title><rect x="33.3259%" y="165" width="0.0573%" height="15" fill="rgb(244,186,29)" fg:x="169699" fg:w="292"/><text x="33.5759%" y="175.50"></text></g><g><title>0x7ff80683f93d (169 samples, 0.03%)</title><rect x="33.3867%" y="181" width="0.0332%" height="15" fill="rgb(234,111,31)" fg:x="170009" fg:w="169"/><text x="33.6367%" y="191.50"></text></g><g><title>0x7ff80684e86d (629 samples, 0.12%)</title><rect x="33.2986%" y="197" width="0.1235%" height="15" fill="rgb(241,149,10)" fg:x="169560" fg:w="629"/><text x="33.5486%" y="207.50"></text></g><g><title>0x7ff806846923 (500 samples, 0.10%)</title><rect x="33.4372%" y="181" width="0.0982%" height="15" fill="rgb(249,206,44)" fg:x="170266" fg:w="500"/><text x="33.6872%" y="191.50"></text></g><g><title>__commpage_gettimeofday_internal (495 samples, 0.10%)</title><rect x="33.4382%" y="165" width="0.0972%" height="15" fill="rgb(251,153,30)" fg:x="170271" fg:w="495"/><text x="33.6882%" y="175.50"></text></g><g><title>mach_absolute_time (354 samples, 0.07%)</title><rect x="33.4659%" y="149" width="0.0695%" height="15" fill="rgb(239,152,38)" fg:x="170412" fg:w="354"/><text x="33.7159%" y="159.50"></text></g><g><title>0x7ff80684e8b3 (597 samples, 0.12%)</title><rect x="33.4317%" y="197" width="0.1172%" height="15" fill="rgb(249,139,47)" fg:x="170238" fg:w="597"/><text x="33.6817%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1,533 samples, 0.30%)</title><rect x="33.2556%" y="213" width="0.3011%" height="15" fill="rgb(244,64,35)" fg:x="169341" fg:w="1533"/><text x="33.5056%" y="223.50"></text></g><g><title>0x7ff80683f8c6 (183 samples, 0.04%)</title><rect x="33.5645%" y="165" width="0.0359%" height="15" fill="rgb(216,46,15)" fg:x="170914" fg:w="183"/><text x="33.8145%" y="175.50"></text></g><g><title>mach_timebase_info (183 samples, 0.04%)</title><rect x="33.5645%" y="149" width="0.0359%" height="15" fill="rgb(250,74,19)" fg:x="170914" fg:w="183"/><text x="33.8145%" y="159.50"></text></g><g><title>0x7ff80684e86d (274 samples, 0.05%)</title><rect x="33.5637%" y="181" width="0.0538%" height="15" fill="rgb(249,42,33)" fg:x="170910" fg:w="274"/><text x="33.8137%" y="191.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (303 samples, 0.06%)</title><rect x="33.5592%" y="197" width="0.0595%" height="15" fill="rgb(242,149,17)" fg:x="170887" fg:w="303"/><text x="33.8092%" y="207.50"></text></g><g><title>std::time::Instant::elapsed (326 samples, 0.06%)</title><rect x="33.5566%" y="213" width="0.0640%" height="15" fill="rgb(244,29,21)" fg:x="170874" fg:w="326"/><text x="33.8066%" y="223.50"></text></g><g><title>std::time::SystemTime::duration_since (89 samples, 0.02%)</title><rect x="33.6210%" y="213" width="0.0175%" height="15" fill="rgb(220,130,37)" fg:x="171202" fg:w="89"/><text x="33.8710%" y="223.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked::h75cb40919419cfec (.llvm.6710397505999662456) (63 samples, 0.01%)</title><rect x="33.6393%" y="213" width="0.0124%" height="15" fill="rgb(211,67,2)" fg:x="171295" fg:w="63"/><text x="33.8893%" y="223.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (66 samples, 0.01%)</title><rect x="33.7453%" y="197" width="0.0130%" height="15" fill="rgb(235,68,52)" fg:x="171835" fg:w="66"/><text x="33.9953%" y="207.50"></text></g><g><title>storagev2::disk::writer::buffer::PartitionWriterBuffer::flush::_{{closure}} (65,366 samples, 12.84%)</title><rect x="20.9234%" y="229" width="12.8367%" height="15" fill="rgb(246,142,3)" fg:x="106544" fg:w="65366"/><text x="21.1734%" y="239.50">storagev2::disk::wr..</text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::write::_{{closure}} (552 samples, 0.11%)</title><rect x="33.6517%" y="213" width="0.1084%" height="15" fill="rgb(241,25,7)" fg:x="171358" fg:w="552"/><text x="33.9017%" y="223.50"></text></g><g><title>storagev2::disk::writer::flusher::Flusher::new::_$u7b$$u7b$closure$u7d$$u7d$::hfdd5c17341b69c6f (.llvm.724537013135552685) (66,747 samples, 13.11%)</title><rect x="20.6573%" y="245" width="13.1079%" height="15" fill="rgb(242,119,39)" fg:x="105189" fg:w="66747"/><text x="20.9073%" y="255.50">storagev2::disk::wri..</text></g><g><title>0x7ff8067b7306 (114 samples, 0.02%)</title><rect x="34.0277%" y="213" width="0.0224%" height="15" fill="rgb(241,98,45)" fg:x="173273" fg:w="114"/><text x="34.2777%" y="223.50"></text></g><g><title>0x7ff8067b734b (95 samples, 0.02%)</title><rect x="34.0554%" y="213" width="0.0187%" height="15" fill="rgb(254,28,30)" fg:x="173414" fg:w="95"/><text x="34.3054%" y="223.50"></text></g><g><title>0x7ff8067b809a (58 samples, 0.01%)</title><rect x="34.1161%" y="197" width="0.0114%" height="15" fill="rgb(241,142,54)" fg:x="173723" fg:w="58"/><text x="34.3661%" y="207.50"></text></g><g><title>0x7ff8067b80ce (134 samples, 0.03%)</title><rect x="34.1285%" y="197" width="0.0263%" height="15" fill="rgb(222,85,15)" fg:x="173786" fg:w="134"/><text x="34.3785%" y="207.50"></text></g><g><title>0x7ff8067b742f (562 samples, 0.11%)</title><rect x="34.0776%" y="213" width="0.1104%" height="15" fill="rgb(210,85,47)" fg:x="173527" fg:w="562"/><text x="34.3276%" y="223.50"></text></g><g><title>0x7ff8067b758d (129 samples, 0.03%)</title><rect x="34.1884%" y="213" width="0.0253%" height="15" fill="rgb(224,206,25)" fg:x="174091" fg:w="129"/><text x="34.4384%" y="223.50"></text></g><g><title>0x7ff8067b75af (126 samples, 0.02%)</title><rect x="34.2137%" y="213" width="0.0247%" height="15" fill="rgb(243,201,19)" fg:x="174220" fg:w="126"/><text x="34.4637%" y="223.50"></text></g><g><title>0x7ff8067b76f2 (82 samples, 0.02%)</title><rect x="34.2404%" y="213" width="0.0161%" height="15" fill="rgb(236,59,4)" fg:x="174356" fg:w="82"/><text x="34.4904%" y="223.50"></text></g><g><title>0x7ff8067b622a (1,304 samples, 0.26%)</title><rect x="34.0264%" y="229" width="0.2561%" height="15" fill="rgb(254,179,45)" fg:x="173266" fg:w="1304"/><text x="34.2764%" y="239.50"></text></g><g><title>0x7ff8067cdfda (78 samples, 0.02%)</title><rect x="34.2671%" y="213" width="0.0153%" height="15" fill="rgb(226,14,10)" fg:x="174492" fg:w="78"/><text x="34.5171%" y="223.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (120 samples, 0.02%)</title><rect x="34.2999%" y="213" width="0.0236%" height="15" fill="rgb(244,27,41)" fg:x="174659" fg:w="120"/><text x="34.5499%" y="223.50"></text></g><g><title>0x7ff8067b9b8b (169 samples, 0.03%)</title><rect x="34.2997%" y="229" width="0.0332%" height="15" fill="rgb(235,35,32)" fg:x="174658" fg:w="169"/><text x="34.5497%" y="239.50"></text></g><g><title>0x7ff8067b9ba8 (143 samples, 0.03%)</title><rect x="34.3353%" y="229" width="0.0281%" height="15" fill="rgb(218,68,31)" fg:x="174839" fg:w="143"/><text x="34.5853%" y="239.50"></text></g><g><title>0x7ff8067ba0f3 (123 samples, 0.02%)</title><rect x="34.4030%" y="213" width="0.0242%" height="15" fill="rgb(207,120,37)" fg:x="175184" fg:w="123"/><text x="34.6530%" y="223.50"></text></g><g><title>0x7ff8067ba2bc (150 samples, 0.03%)</title><rect x="34.4372%" y="213" width="0.0295%" height="15" fill="rgb(227,98,0)" fg:x="175358" fg:w="150"/><text x="34.6872%" y="223.50"></text></g><g><title>0x7ff8067ba48d (113 samples, 0.02%)</title><rect x="34.4724%" y="213" width="0.0222%" height="15" fill="rgb(207,7,3)" fg:x="175537" fg:w="113"/><text x="34.7224%" y="223.50"></text></g><g><title>0x7ff8067ba4e1 (114 samples, 0.02%)</title><rect x="34.4951%" y="213" width="0.0224%" height="15" fill="rgb(206,98,19)" fg:x="175653" fg:w="114"/><text x="34.7451%" y="223.50"></text></g><g><title>0x7ff8067ce738 (1,724 samples, 0.34%)</title><rect x="34.5385%" y="165" width="0.3386%" height="15" fill="rgb(217,5,26)" fg:x="175874" fg:w="1724"/><text x="34.7885%" y="175.50"></text></g><g><title>madvise (1,710 samples, 0.34%)</title><rect x="34.5413%" y="149" width="0.3358%" height="15" fill="rgb(235,190,38)" fg:x="175888" fg:w="1710"/><text x="34.7913%" y="159.50"></text></g><g><title>0x7ff8067befc6 (1,737 samples, 0.34%)</title><rect x="34.5385%" y="181" width="0.3411%" height="15" fill="rgb(247,86,24)" fg:x="175874" fg:w="1737"/><text x="34.7885%" y="191.50"></text></g><g><title>0x7ff8067c103d (1,747 samples, 0.34%)</title><rect x="34.5379%" y="197" width="0.3431%" height="15" fill="rgb(205,101,16)" fg:x="175871" fg:w="1747"/><text x="34.7879%" y="207.50"></text></g><g><title>0x7ff8067ba5c2 (1,860 samples, 0.37%)</title><rect x="34.5177%" y="213" width="0.3653%" height="15" fill="rgb(246,168,33)" fg:x="175768" fg:w="1860"/><text x="34.7677%" y="223.50"></text></g><g><title>0x7ff8067b9d11 (2,711 samples, 0.53%)</title><rect x="34.3694%" y="229" width="0.5324%" height="15" fill="rgb(231,114,1)" fg:x="175013" fg:w="2711"/><text x="34.6194%" y="239.50"></text></g><g><title>0x7ff8067b9d24 (101 samples, 0.02%)</title><rect x="34.9026%" y="229" width="0.0198%" height="15" fill="rgb(207,184,53)" fg:x="177728" fg:w="101"/><text x="35.1526%" y="239.50"></text></g><g><title>&lt;futures_timer::native::delay::Delay as core::future::future::Future&gt;::poll (373 samples, 0.07%)</title><rect x="35.0173%" y="229" width="0.0733%" height="15" fill="rgb(224,95,51)" fg:x="178312" fg:w="373"/><text x="35.2673%" y="239.50"></text></g><g><title>0x7ff8067f724b (398 samples, 0.08%)</title><rect x="35.1679%" y="181" width="0.0782%" height="15" fill="rgb(212,188,45)" fg:x="179079" fg:w="398"/><text x="35.4179%" y="191.50"></text></g><g><title>semaphore_signal_trap (393 samples, 0.08%)</title><rect x="35.1689%" y="165" width="0.0772%" height="15" fill="rgb(223,154,38)" fg:x="179084" fg:w="393"/><text x="35.4189%" y="175.50"></text></g><g><title>0x7ff8067f76f7 (405 samples, 0.08%)</title><rect x="35.1675%" y="197" width="0.0795%" height="15" fill="rgb(251,22,52)" fg:x="179077" fg:w="405"/><text x="35.4175%" y="207.50"></text></g><g><title>futures_timer::native::global::raw_wake (443 samples, 0.09%)</title><rect x="35.1622%" y="213" width="0.0870%" height="15" fill="rgb(229,209,22)" fg:x="179050" fg:w="443"/><text x="35.4122%" y="223.50"></text></g><g><title>pthread_mutex_unlock (55 samples, 0.01%)</title><rect x="35.2492%" y="213" width="0.0108%" height="15" fill="rgb(234,138,34)" fg:x="179493" fg:w="55"/><text x="35.4992%" y="223.50"></text></g><g><title>&lt;futures_timer::native::delay::Delay as core::ops::drop::Drop&gt;::drop (1,172 samples, 0.23%)</title><rect x="35.0906%" y="229" width="0.2302%" height="15" fill="rgb(212,95,11)" fg:x="178685" fg:w="1172"/><text x="35.3406%" y="239.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (309 samples, 0.06%)</title><rect x="35.2600%" y="213" width="0.0607%" height="15" fill="rgb(240,179,47)" fg:x="179548" fg:w="309"/><text x="35.5100%" y="223.50"></text></g><g><title>pthread_mutex_lock (304 samples, 0.06%)</title><rect x="35.2610%" y="197" width="0.0597%" height="15" fill="rgb(240,163,11)" fg:x="179553" fg:w="304"/><text x="35.5110%" y="207.50"></text></g><g><title>&lt;futures_timer::native::timer::TimerHandle as core::default::Default&gt;::default (140 samples, 0.03%)</title><rect x="35.3207%" y="229" width="0.0275%" height="15" fill="rgb(236,37,12)" fg:x="179857" fg:w="140"/><text x="35.5707%" y="239.50"></text></g><g><title>&lt;governor::clock::quanta::QuantaClock as governor::clock::Clock&gt;::now (80 samples, 0.02%)</title><rect x="35.3482%" y="229" width="0.0157%" height="15" fill="rgb(232,164,16)" fg:x="179997" fg:w="80"/><text x="35.5982%" y="239.50"></text></g><g><title>&lt;governor::state::in_memory::InMemoryState as governor::state::StateStore&gt;::measure_and_replace (184 samples, 0.04%)</title><rect x="35.3757%" y="229" width="0.0361%" height="15" fill="rgb(244,205,15)" fg:x="180137" fg:w="184"/><text x="35.6257%" y="239.50"></text></g><g><title>0x7ff8067b51fe (55 samples, 0.01%)</title><rect x="35.9656%" y="213" width="0.0108%" height="15" fill="rgb(223,117,47)" fg:x="183141" fg:w="55"/><text x="36.2156%" y="223.50"></text></g><g><title>0x7ff8067b5208 (232 samples, 0.05%)</title><rect x="35.9764%" y="213" width="0.0456%" height="15" fill="rgb(244,107,35)" fg:x="183196" fg:w="232"/><text x="36.2264%" y="223.50"></text></g><g><title>0x7ff8067b5225 (150 samples, 0.03%)</title><rect x="36.0283%" y="213" width="0.0295%" height="15" fill="rgb(205,140,8)" fg:x="183460" fg:w="150"/><text x="36.2783%" y="223.50"></text></g><g><title>0x7ff8067b523b (108 samples, 0.02%)</title><rect x="36.0640%" y="213" width="0.0212%" height="15" fill="rgb(228,84,46)" fg:x="183642" fg:w="108"/><text x="36.3140%" y="223.50"></text></g><g><title>0x7ff8067b5313 (609 samples, 0.12%)</title><rect x="36.1192%" y="213" width="0.1196%" height="15" fill="rgb(254,188,9)" fg:x="183923" fg:w="609"/><text x="36.3692%" y="223.50"></text></g><g><title>0x7ff8067b5330 (241 samples, 0.05%)</title><rect x="36.2457%" y="213" width="0.0473%" height="15" fill="rgb(206,112,54)" fg:x="184567" fg:w="241"/><text x="36.4957%" y="223.50"></text></g><g><title>0x7ff8067d6607 (114 samples, 0.02%)</title><rect x="36.2965%" y="197" width="0.0224%" height="15" fill="rgb(216,84,49)" fg:x="184826" fg:w="114"/><text x="36.5465%" y="207.50"></text></g><g><title>0x7ff8067b53c7 (128 samples, 0.03%)</title><rect x="36.2956%" y="213" width="0.0251%" height="15" fill="rgb(214,194,35)" fg:x="184821" fg:w="128"/><text x="36.5456%" y="223.50"></text></g><g><title>0x7ff8067d6844 (66 samples, 0.01%)</title><rect x="36.3559%" y="213" width="0.0130%" height="15" fill="rgb(249,28,3)" fg:x="185128" fg:w="66"/><text x="36.6059%" y="223.50"></text></g><g><title>0x7ff8067d68aa (55 samples, 0.01%)</title><rect x="36.3718%" y="213" width="0.0108%" height="15" fill="rgb(222,56,52)" fg:x="185209" fg:w="55"/><text x="36.6218%" y="223.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (55 samples, 0.01%)</title><rect x="36.3718%" y="197" width="0.0108%" height="15" fill="rgb(245,217,50)" fg:x="185209" fg:w="55"/><text x="36.6218%" y="207.50"></text></g><g><title>0x7ff8067d6984 (87 samples, 0.02%)</title><rect x="36.3955%" y="213" width="0.0171%" height="15" fill="rgb(213,201,24)" fg:x="185330" fg:w="87"/><text x="36.6455%" y="223.50"></text></g><g><title>_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$::write::hb824622b973a5f90 (.llvm.7082537364009689419) (254 samples, 0.05%)</title><rect x="36.7015%" y="197" width="0.0499%" height="15" fill="rgb(248,116,28)" fg:x="186888" fg:w="254"/><text x="36.9515%" y="207.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (2,260 samples, 0.44%)</title><rect x="36.4305%" y="213" width="0.4438%" height="15" fill="rgb(219,72,43)" fg:x="185508" fg:w="2260"/><text x="36.6805%" y="223.50"></text></g><g><title>_platform_memcmp$VARIANT$Base (626 samples, 0.12%)</title><rect x="36.7514%" y="197" width="0.1229%" height="15" fill="rgb(209,138,14)" fg:x="187142" fg:w="626"/><text x="37.0014%" y="207.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (775 samples, 0.15%)</title><rect x="36.8822%" y="213" width="0.1522%" height="15" fill="rgb(222,18,33)" fg:x="187808" fg:w="775"/><text x="37.1322%" y="223.50"></text></g><g><title>bytes::bytes::shared_drop::h2f4486fd7f0a6f4b (.llvm.6858511044588184240) (124 samples, 0.02%)</title><rect x="37.0349%" y="213" width="0.0244%" height="15" fill="rgb(213,199,7)" fg:x="188586" fg:w="124"/><text x="37.2849%" y="223.50"></text></g><g><title>0x7ff8067d6844 (66 samples, 0.01%)</title><rect x="37.2050%" y="197" width="0.0130%" height="15" fill="rgb(250,110,10)" fg:x="189452" fg:w="66"/><text x="37.4550%" y="207.50"></text></g><g><title>0x7ff8067d68aa (72 samples, 0.01%)</title><rect x="37.2199%" y="197" width="0.0141%" height="15" fill="rgb(248,123,6)" fg:x="189528" fg:w="72"/><text x="37.4699%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (67 samples, 0.01%)</title><rect x="37.2209%" y="181" width="0.0132%" height="15" fill="rgb(206,91,31)" fg:x="189533" fg:w="67"/><text x="37.4709%" y="191.50"></text></g><g><title>0x7ff8067d6984 (71 samples, 0.01%)</title><rect x="37.2484%" y="197" width="0.0139%" height="15" fill="rgb(211,154,13)" fg:x="189673" fg:w="71"/><text x="37.4984%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;storagev2::disk::writer::buffer::PartitionWriterBuffer&gt; (1,062 samples, 0.21%)</title><rect x="37.0593%" y="213" width="0.2086%" height="15" fill="rgb(225,148,7)" fg:x="188710" fg:w="1062"/><text x="37.3093%" y="223.50"></text></g><g><title>0x7ff8067bb476 (54 samples, 0.01%)</title><rect x="37.6066%" y="149" width="0.0106%" height="15" fill="rgb(220,160,43)" fg:x="191497" fg:w="54"/><text x="37.8566%" y="159.50"></text></g><g><title>0x7ff8067b6b32 (123 samples, 0.02%)</title><rect x="37.6060%" y="165" width="0.0242%" height="15" fill="rgb(213,52,39)" fg:x="191494" fg:w="123"/><text x="37.8560%" y="175.50"></text></g><g><title>0x7ff8067baee4 (192 samples, 0.04%)</title><rect x="37.6451%" y="149" width="0.0377%" height="15" fill="rgb(243,137,7)" fg:x="191693" fg:w="192"/><text x="37.8951%" y="159.50"></text></g><g><title>0x7ff8067b6c33 (201 samples, 0.04%)</title><rect x="37.6447%" y="165" width="0.0395%" height="15" fill="rgb(230,79,13)" fg:x="191691" fg:w="201"/><text x="37.8947%" y="175.50"></text></g><g><title>0x7ff8067b643d (423 samples, 0.08%)</title><rect x="37.6060%" y="181" width="0.0831%" height="15" fill="rgb(247,105,23)" fg:x="191494" fg:w="423"/><text x="37.8560%" y="191.50"></text></g><g><title>0x7ff8067b6254 (472 samples, 0.09%)</title><rect x="37.6003%" y="197" width="0.0927%" height="15" fill="rgb(223,179,41)" fg:x="191465" fg:w="472"/><text x="37.8503%" y="207.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::push (2,207 samples, 0.43%)</title><rect x="37.2679%" y="213" width="0.4334%" height="15" fill="rgb(218,9,34)" fg:x="189772" fg:w="2207"/><text x="37.5179%" y="223.50"></text></g><g><title>_platform_memcmp$VARIANT$Base (80 samples, 0.02%)</title><rect x="38.0090%" y="165" width="0.0157%" height="15" fill="rgb(222,106,8)" fg:x="193546" fg:w="80"/><text x="38.2590%" y="175.50"></text></g><g><title>_$LT$std..path..PathBuf$u20$as$u20$core..cmp..PartialEq$GT$::eq::ha8ca9e43c08bccd1 (.llvm.7082537364009689419) (599 samples, 0.12%)</title><rect x="37.9943%" y="181" width="0.1176%" height="15" fill="rgb(211,220,0)" fg:x="193471" fg:w="599"/><text x="38.2443%" y="191.50"></text></g><g><title>std::path::Path::components (429 samples, 0.08%)</title><rect x="38.0277%" y="165" width="0.0842%" height="15" fill="rgb(229,52,16)" fg:x="193641" fg:w="429"/><text x="38.2777%" y="175.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get_mut (3,291 samples, 0.65%)</title><rect x="37.7382%" y="197" width="0.6463%" height="15" fill="rgb(212,155,18)" fg:x="192167" fg:w="3291"/><text x="37.9882%" y="207.50"></text></g><g><title>dashmap::DashMap$LT$K$C$V$C$S$GT$::hash_u64::hbd53c616c4e8f94e (.llvm.7082537364009689419) (1,388 samples, 0.27%)</title><rect x="38.1119%" y="181" width="0.2726%" height="15" fill="rgb(242,21,14)" fg:x="194070" fg:w="1388"/><text x="38.3619%" y="191.50"></text></g><g><title>&lt;std::path::PathBuf as core::hash::Hash&gt;::hash (1,180 samples, 0.23%)</title><rect x="38.1528%" y="165" width="0.2317%" height="15" fill="rgb(222,19,48)" fg:x="194278" fg:w="1180"/><text x="38.4028%" y="175.50"></text></g><g><title>_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$::write::hb824622b973a5f90 (.llvm.7082537364009689419) (701 samples, 0.14%)</title><rect x="38.2468%" y="149" width="0.1377%" height="15" fill="rgb(232,45,27)" fg:x="194757" fg:w="701"/><text x="38.4968%" y="159.50"></text></g><g><title>0x7ff80683f8c6 (61 samples, 0.01%)</title><rect x="38.4157%" y="165" width="0.0120%" height="15" fill="rgb(249,103,42)" fg:x="195617" fg:w="61"/><text x="38.6657%" y="175.50"></text></g><g><title>mach_timebase_info (59 samples, 0.01%)</title><rect x="38.4161%" y="149" width="0.0116%" height="15" fill="rgb(246,81,33)" fg:x="195619" fg:w="59"/><text x="38.6661%" y="159.50"></text></g><g><title>0x7ff80683f91d (534 samples, 0.10%)</title><rect x="38.4363%" y="165" width="0.1049%" height="15" fill="rgb(252,33,42)" fg:x="195722" fg:w="534"/><text x="38.6863%" y="175.50"></text></g><g><title>mach_absolute_time (534 samples, 0.10%)</title><rect x="38.4363%" y="149" width="0.1049%" height="15" fill="rgb(209,212,41)" fg:x="195722" fg:w="534"/><text x="38.6863%" y="159.50"></text></g><g><title>0x7ff80683f93d (298 samples, 0.06%)</title><rect x="38.5465%" y="165" width="0.0585%" height="15" fill="rgb(207,154,6)" fg:x="196283" fg:w="298"/><text x="38.7965%" y="175.50"></text></g><g><title>0x7ff80684e86d (1,009 samples, 0.20%)</title><rect x="38.4112%" y="181" width="0.1981%" height="15" fill="rgb(223,64,47)" fg:x="195594" fg:w="1009"/><text x="38.6612%" y="191.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1,236 samples, 0.24%)</title><rect x="38.3859%" y="197" width="0.2427%" height="15" fill="rgb(211,161,38)" fg:x="195465" fg:w="1236"/><text x="38.6359%" y="207.50"></text></g><g><title>std::time::Instant::duration_since (52 samples, 0.01%)</title><rect x="38.6286%" y="197" width="0.0102%" height="15" fill="rgb(219,138,40)" fg:x="196701" fg:w="52"/><text x="38.8786%" y="207.50"></text></g><g><title>_$LT$storagev2..disk..writer..DiskStorageWriter$u20$as$u20$storagev2..StorageWriter$GT$::store::_$u7b$$u7b$closure$u7d$$u7d$::h209f07eea55c7d7c (.llvm.545498345717494327) (16,404 samples, 3.22%)</title><rect x="35.4189%" y="229" width="3.2215%" height="15" fill="rgb(241,228,46)" fg:x="180357" fg:w="16404"/><text x="35.6689%" y="239.50">_$L..</text></g><g><title>storagev2::disk::writer::flusher::Flusher::update_partition_write_count (4,775 samples, 0.94%)</title><rect x="37.7026%" y="213" width="0.9377%" height="15" fill="rgb(223,209,38)" fg:x="191986" fg:w="4775"/><text x="37.9526%" y="223.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (366 samples, 0.07%)</title><rect x="38.6512%" y="229" width="0.0719%" height="15" fill="rgb(236,164,45)" fg:x="196816" fg:w="366"/><text x="38.9012%" y="239.50"></text></g><g><title>bytes::bytes::promotable_even_clone (249 samples, 0.05%)</title><rect x="38.7256%" y="229" width="0.0489%" height="15" fill="rgb(231,15,5)" fg:x="197195" fg:w="249"/><text x="38.9756%" y="239.50"></text></g><g><title>bytes::bytes::shared_clone::had8607b974c311e6 (.llvm.6858511044588184240) (122 samples, 0.02%)</title><rect x="38.7745%" y="229" width="0.0240%" height="15" fill="rgb(252,35,15)" fg:x="197444" fg:w="122"/><text x="39.0245%" y="239.50"></text></g><g><title>0x7ff8067b5313 (162 samples, 0.03%)</title><rect x="38.9043%" y="213" width="0.0318%" height="15" fill="rgb(248,181,18)" fg:x="198105" fg:w="162"/><text x="39.1543%" y="223.50"></text></g><g><title>0x7ff8067b53c7 (130 samples, 0.03%)</title><rect x="38.9467%" y="213" width="0.0255%" height="15" fill="rgb(233,39,42)" fg:x="198321" fg:w="130"/><text x="39.1967%" y="223.50"></text></g><g><title>0x7ff8067d6607 (122 samples, 0.02%)</title><rect x="38.9483%" y="197" width="0.0240%" height="15" fill="rgb(238,110,33)" fg:x="198329" fg:w="122"/><text x="39.1983%" y="207.50"></text></g><g><title>0x7ff8067f724b (2,788 samples, 0.55%)</title><rect x="39.0068%" y="181" width="0.5475%" height="15" fill="rgb(233,195,10)" fg:x="198627" fg:w="2788"/><text x="39.2568%" y="191.50"></text></g><g><title>semaphore_signal_trap (2,761 samples, 0.54%)</title><rect x="39.0121%" y="165" width="0.5422%" height="15" fill="rgb(254,105,3)" fg:x="198654" fg:w="2761"/><text x="39.2621%" y="175.50"></text></g><g><title>0x7ff8067f76f7 (2,829 samples, 0.56%)</title><rect x="39.0049%" y="197" width="0.5556%" height="15" fill="rgb(221,225,9)" fg:x="198617" fg:w="2829"/><text x="39.2549%" y="207.50"></text></g><g><title>futures_timer::native::delay::Delay::new_handle (3,913 samples, 0.77%)</title><rect x="38.8016%" y="229" width="0.7684%" height="15" fill="rgb(224,227,45)" fg:x="197582" fg:w="3913"/><text x="39.0516%" y="239.50"></text></g><g><title>futures_timer::native::global::raw_wake (2,959 samples, 0.58%)</title><rect x="38.9889%" y="213" width="0.5811%" height="15" fill="rgb(229,198,43)" fg:x="198536" fg:w="2959"/><text x="39.2389%" y="223.50"></text></g><g><title>quanta::Clock::raw (113 samples, 0.02%)</title><rect x="39.5700%" y="229" width="0.0222%" height="15" fill="rgb(206,209,35)" fg:x="201495" fg:w="113"/><text x="39.8200%" y="239.50"></text></g><g><title>rand::rngs::thread::rng (147 samples, 0.03%)</title><rect x="39.5983%" y="229" width="0.0289%" height="15" fill="rgb(245,195,53)" fg:x="201639" fg:w="147"/><text x="39.8483%" y="239.50"></text></g><g><title>0x7ff80683f91d (76 samples, 0.01%)</title><rect x="39.6431%" y="197" width="0.0149%" height="15" fill="rgb(240,92,26)" fg:x="201867" fg:w="76"/><text x="39.8931%" y="207.50"></text></g><g><title>mach_absolute_time (76 samples, 0.01%)</title><rect x="39.6431%" y="181" width="0.0149%" height="15" fill="rgb(207,40,23)" fg:x="201867" fg:w="76"/><text x="39.8931%" y="191.50"></text></g><g><title>0x7ff80684e86d (167 samples, 0.03%)</title><rect x="39.6354%" y="213" width="0.0328%" height="15" fill="rgb(223,111,35)" fg:x="201828" fg:w="167"/><text x="39.8854%" y="223.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (199 samples, 0.04%)</title><rect x="39.6327%" y="229" width="0.0391%" height="15" fill="rgb(229,147,28)" fg:x="201814" fg:w="199"/><text x="39.8827%" y="239.50"></text></g><g><title>0x7ff80683f8c6 (101 samples, 0.02%)</title><rect x="39.7321%" y="181" width="0.0198%" height="15" fill="rgb(211,29,28)" fg:x="202320" fg:w="101"/><text x="39.9821%" y="191.50"></text></g><g><title>mach_timebase_info (101 samples, 0.02%)</title><rect x="39.7321%" y="165" width="0.0198%" height="15" fill="rgb(228,72,33)" fg:x="202320" fg:w="101"/><text x="39.9821%" y="175.50"></text></g><g><title>0x7ff80683f91d (557 samples, 0.11%)</title><rect x="39.7586%" y="181" width="0.1094%" height="15" fill="rgb(205,214,31)" fg:x="202455" fg:w="557"/><text x="40.0086%" y="191.50"></text></g><g><title>mach_absolute_time (557 samples, 0.11%)</title><rect x="39.7586%" y="165" width="0.1094%" height="15" fill="rgb(224,111,15)" fg:x="202455" fg:w="557"/><text x="40.0086%" y="175.50"></text></g><g><title>0x7ff80683f93d (325 samples, 0.06%)</title><rect x="39.8740%" y="181" width="0.0638%" height="15" fill="rgb(253,21,26)" fg:x="203043" fg:w="325"/><text x="40.1240%" y="191.50"></text></g><g><title>0x7ff80684e86d (1,100 samples, 0.22%)</title><rect x="39.7262%" y="197" width="0.2160%" height="15" fill="rgb(245,139,43)" fg:x="202290" fg:w="1100"/><text x="39.9762%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1,321 samples, 0.26%)</title><rect x="39.7012%" y="213" width="0.2594%" height="15" fill="rgb(252,170,7)" fg:x="202163" fg:w="1321"/><text x="39.9512%" y="223.50"></text></g><g><title>std::time::Instant::duration_since (145 samples, 0.03%)</title><rect x="39.9606%" y="213" width="0.0285%" height="15" fill="rgb(231,118,14)" fg:x="203484" fg:w="145"/><text x="40.2106%" y="223.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (98 samples, 0.02%)</title><rect x="39.9699%" y="197" width="0.0192%" height="15" fill="rgb(238,83,0)" fg:x="203531" fg:w="98"/><text x="40.2199%" y="207.50"></text></g><g><title>storagev2::disk::writer::test::test_flush_speed_with_dynamic_rate_multi_partition::_$u7b$$u7b$closure$u7d$$u7d$::_$u7b$$u7b$closure$u7d$$u7d$::h4c7fffdf3b56e342 (.llvm.724537013135552685) (31,705 samples, 6.23%)</title><rect x="33.7652%" y="245" width="6.2263%" height="15" fill="rgb(221,39,39)" fg:x="171936" fg:w="31705"/><text x="34.0152%" y="255.50">storagev..</text></g><g><title>tokio::time::instant::Instant::elapsed (1,563 samples, 0.31%)</title><rect x="39.6845%" y="229" width="0.3069%" height="15" fill="rgb(222,119,46)" fg:x="202078" fg:w="1563"/><text x="39.9345%" y="239.50"></text></g><g><title>0x7ff8067b622a (107 samples, 0.02%)</title><rect x="40.0029%" y="229" width="0.0210%" height="15" fill="rgb(222,165,49)" fg:x="203699" fg:w="107"/><text x="40.2529%" y="239.50"></text></g><g><title>0x7ff8067ce738 (195 samples, 0.04%)</title><rect x="40.0524%" y="165" width="0.0383%" height="15" fill="rgb(219,113,52)" fg:x="203951" fg:w="195"/><text x="40.3024%" y="175.50"></text></g><g><title>madvise (194 samples, 0.04%)</title><rect x="40.0526%" y="149" width="0.0381%" height="15" fill="rgb(214,7,15)" fg:x="203952" fg:w="194"/><text x="40.3026%" y="159.50"></text></g><g><title>0x7ff8067ba5c2 (223 samples, 0.04%)</title><rect x="40.0472%" y="213" width="0.0438%" height="15" fill="rgb(235,32,4)" fg:x="203925" fg:w="223"/><text x="40.2972%" y="223.50"></text></g><g><title>0x7ff8067c103d (197 samples, 0.04%)</title><rect x="40.0524%" y="197" width="0.0387%" height="15" fill="rgb(238,90,54)" fg:x="203951" fg:w="197"/><text x="40.3024%" y="207.50"></text></g><g><title>0x7ff8067befc6 (197 samples, 0.04%)</title><rect x="40.0524%" y="181" width="0.0387%" height="15" fill="rgb(213,208,19)" fg:x="203951" fg:w="197"/><text x="40.3024%" y="191.50"></text></g><g><title>0x7ff8067b9d11 (327 samples, 0.06%)</title><rect x="40.0276%" y="229" width="0.0642%" height="15" fill="rgb(233,156,4)" fg:x="203825" fg:w="327"/><text x="40.2776%" y="239.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (70 samples, 0.01%)</title><rect x="40.0989%" y="229" width="0.0137%" height="15" fill="rgb(207,194,5)" fg:x="204188" fg:w="70"/><text x="40.3489%" y="239.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::poll_elapsed (63 samples, 0.01%)</title><rect x="40.1003%" y="213" width="0.0124%" height="15" fill="rgb(206,111,30)" fg:x="204195" fg:w="63"/><text x="40.3503%" y="223.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (128 samples, 0.03%)</title><rect x="40.1598%" y="213" width="0.0251%" height="15" fill="rgb(243,70,54)" fg:x="204498" fg:w="128"/><text x="40.4098%" y="223.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (54 samples, 0.01%)</title><rect x="40.1861%" y="213" width="0.0106%" height="15" fill="rgb(242,28,8)" fg:x="204632" fg:w="54"/><text x="40.4361%" y="223.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::push (99 samples, 0.02%)</title><rect x="40.2063%" y="213" width="0.0194%" height="15" fill="rgb(219,106,18)" fg:x="204735" fg:w="99"/><text x="40.4563%" y="223.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get_mut (145 samples, 0.03%)</title><rect x="40.2291%" y="197" width="0.0285%" height="15" fill="rgb(244,222,10)" fg:x="204851" fg:w="145"/><text x="40.4791%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (59 samples, 0.01%)</title><rect x="40.2576%" y="197" width="0.0116%" height="15" fill="rgb(236,179,52)" fg:x="204996" fg:w="59"/><text x="40.5076%" y="207.50"></text></g><g><title>storagev2::disk::writer::flusher::Flusher::update_partition_write_count (218 samples, 0.04%)</title><rect x="40.2271%" y="213" width="0.0428%" height="15" fill="rgb(213,23,39)" fg:x="204841" fg:w="218"/><text x="40.4771%" y="223.50"></text></g><g><title>_$LT$storagev2..disk..writer..DiskStorageWriter$u20$as$u20$storagev2..StorageWriter$GT$::store::_$u7b$$u7b$closure$u7d$$u7d$::h209f07eea55c7d7c (.llvm.545498345717494327) (802 samples, 0.16%)</title><rect x="40.1130%" y="229" width="0.1575%" height="15" fill="rgb(238,48,10)" fg:x="204260" fg:w="802"/><text x="40.3630%" y="239.50"></text></g><g><title>storagev2::disk::writer::test::test_flush_speed_with_dynamic_rate_multi_partition::_$u7b$$u7b$closure$u7d$$u7d$::_$u7b$$u7b$closure$u7d$$u7d$::h5ba6c53d5c33bfb0 (.llvm.724537013135552685) (1,527 samples, 0.30%)</title><rect x="39.9915%" y="245" width="0.2999%" height="15" fill="rgb(251,196,23)" fg:x="203641" fg:w="1527"/><text x="40.2415%" y="255.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (135,853 samples, 26.68%)</title><rect x="13.6189%" y="261" width="26.6791%" height="15" fill="rgb(250,152,24)" fg:x="69349" fg:w="135853"/><text x="13.8689%" y="271.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness$LT$T$C$S$GT$::complete::h6243c6b2aa6eb2e4 (.llvm.3193921096100719124) (56 samples, 0.01%)</title><rect x="40.3006%" y="261" width="0.0110%" height="15" fill="rgb(209,150,17)" fg:x="205215" fg:w="56"/><text x="40.5506%" y="271.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (103 samples, 0.02%)</title><rect x="40.3116%" y="261" width="0.0202%" height="15" fill="rgb(234,202,34)" fg:x="205271" fg:w="103"/><text x="40.5616%" y="271.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (136,208 samples, 26.75%)</title><rect x="13.5967%" y="277" width="26.7488%" height="15" fill="rgb(253,148,53)" fg:x="69236" fg:w="136208"/><text x="13.8467%" y="287.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;..</text></g><g><title>tokio::runtime::task::state::State::transition_to_running (70 samples, 0.01%)</title><rect x="40.3318%" y="261" width="0.0137%" height="15" fill="rgb(218,129,16)" fg:x="205374" fg:w="70"/><text x="40.5818%" y="271.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (92 samples, 0.02%)</title><rect x="40.3456%" y="277" width="0.0181%" height="15" fill="rgb(216,85,19)" fg:x="205444" fg:w="92"/><text x="40.5956%" y="287.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (180,647 samples, 35.48%)</title><rect x="4.8923%" y="293" width="35.4759%" height="15" fill="rgb(235,228,7)" fg:x="24912" fg:w="180647"/><text x="5.1423%" y="303.50">tokio::runtime::runtime::Runtime::block_on</text></g><g><title>test::run_test::_{{closure}} (180,730 samples, 35.49%)</title><rect x="4.8768%" y="357" width="35.4922%" height="15" fill="rgb(245,175,0)" fg:x="24833" fg:w="180730"/><text x="5.1268%" y="367.50">test::run_test::_{{closure}}</text></g><g><title>test::__rust_begin_short_backtrace (180,730 samples, 35.49%)</title><rect x="4.8768%" y="341" width="35.4922%" height="15" fill="rgb(208,168,36)" fg:x="24833" fg:w="180730"/><text x="5.1268%" y="351.50">test::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (180,730 samples, 35.49%)</title><rect x="4.8768%" y="325" width="35.4922%" height="15" fill="rgb(246,171,24)" fg:x="24833" fg:w="180730"/><text x="5.1268%" y="335.50">core::ops::function::FnOnce::call_once</text></g><g><title>storagev2::disk::writer::test::run_flush_benchmark (180,730 samples, 35.49%)</title><rect x="4.8768%" y="309" width="35.4922%" height="15" fill="rgb(215,142,24)" fg:x="24833" fg:w="180730"/><text x="5.1268%" y="319.50">storagev2::disk::writer::test::run_flush_benchmark</text></g><g><title>0x7ff80684e83f (71 samples, 0.01%)</title><rect x="40.5535%" y="341" width="0.0139%" height="15" fill="rgb(250,187,7)" fg:x="206503" fg:w="71"/><text x="40.8035%" y="351.50"></text></g><g><title>0x7ff80699f89f (59 samples, 0.01%)</title><rect x="40.5745%" y="341" width="0.0116%" height="15" fill="rgb(228,66,33)" fg:x="206610" fg:w="59"/><text x="40.8245%" y="351.50"></text></g><g><title>0x7ff806846923 (93 samples, 0.02%)</title><rect x="40.7344%" y="325" width="0.0183%" height="15" fill="rgb(234,215,21)" fg:x="207424" fg:w="93"/><text x="40.9844%" y="335.50"></text></g><g><title>__commpage_gettimeofday_internal (93 samples, 0.02%)</title><rect x="40.7344%" y="309" width="0.0183%" height="15" fill="rgb(222,191,20)" fg:x="207424" fg:w="93"/><text x="40.9844%" y="319.50"></text></g><g><title>__gettimeofday (70 samples, 0.01%)</title><rect x="40.7811%" y="325" width="0.0137%" height="15" fill="rgb(245,79,54)" fg:x="207662" fg:w="70"/><text x="41.0311%" y="335.50"></text></g><g><title>__gettimeofday (1,744 samples, 0.34%)</title><rect x="41.0504%" y="309" width="0.3425%" height="15" fill="rgb(240,10,37)" fg:x="209033" fg:w="1744"/><text x="41.3004%" y="319.50"></text></g><g><title>__psynch_cvwait (16,511 samples, 3.24%)</title><rect x="41.3929%" y="309" width="3.2425%" height="15" fill="rgb(214,192,32)" fg:x="210777" fg:w="16511"/><text x="41.6429%" y="319.50">__p..</text></g><g><title>_pthread_mutex_firstfit_lock_slow (1,394 samples, 0.27%)</title><rect x="44.6440%" y="309" width="0.2738%" height="15" fill="rgb(209,36,54)" fg:x="227332" fg:w="1394"/><text x="44.8940%" y="319.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (1,379 samples, 0.27%)</title><rect x="44.6469%" y="293" width="0.2708%" height="15" fill="rgb(220,10,11)" fg:x="227347" fg:w="1379"/><text x="44.8969%" y="303.50"></text></g><g><title>__psynch_mutexwait (1,339 samples, 0.26%)</title><rect x="44.6548%" y="277" width="0.2630%" height="15" fill="rgb(221,106,17)" fg:x="227387" fg:w="1339"/><text x="44.9048%" y="287.50"></text></g><g><title>pthread_mutex_lock (164 samples, 0.03%)</title><rect x="44.9177%" y="309" width="0.0322%" height="15" fill="rgb(251,142,44)" fg:x="228726" fg:w="164"/><text x="45.1677%" y="319.50"></text></g><g><title>_pthread_cond_wait (21,577 samples, 4.24%)</title><rect x="40.7982%" y="325" width="4.2373%" height="15" fill="rgb(238,13,15)" fg:x="207749" fg:w="21577"/><text x="41.0482%" y="335.50">_pthr..</text></g><g><title>pthread_testcancel (435 samples, 0.09%)</title><rect x="44.9501%" y="309" width="0.0854%" height="15" fill="rgb(208,107,27)" fg:x="228891" fg:w="435"/><text x="45.2001%" y="319.50"></text></g><g><title>cthread_yield (291 samples, 0.06%)</title><rect x="45.0568%" y="309" width="0.0571%" height="15" fill="rgb(205,136,37)" fg:x="229434" fg:w="291"/><text x="45.3068%" y="319.50"></text></g><g><title>swtch_pri (268 samples, 0.05%)</title><rect x="45.0613%" y="293" width="0.0526%" height="15" fill="rgb(250,205,27)" fg:x="229457" fg:w="268"/><text x="45.3113%" y="303.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (402 samples, 0.08%)</title><rect x="45.0369%" y="325" width="0.0789%" height="15" fill="rgb(210,80,43)" fg:x="229333" fg:w="402"/><text x="45.2869%" y="335.50"></text></g><g><title>pthread_cond_signal (68 samples, 0.01%)</title><rect x="45.1163%" y="309" width="0.0134%" height="15" fill="rgb(247,160,36)" fg:x="229737" fg:w="68"/><text x="45.3663%" y="319.50"></text></g><g><title>__psynch_cvsignal (64 samples, 0.01%)</title><rect x="45.1171%" y="293" width="0.0126%" height="15" fill="rgb(234,13,49)" fg:x="229741" fg:w="64"/><text x="45.3671%" y="303.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (71 samples, 0.01%)</title><rect x="45.1159%" y="325" width="0.0139%" height="15" fill="rgb(234,122,0)" fg:x="229735" fg:w="71"/><text x="45.3659%" y="335.50"></text></g><g><title>pthread_mutex_lock (89 samples, 0.02%)</title><rect x="45.1298%" y="325" width="0.0175%" height="15" fill="rgb(207,146,38)" fg:x="229806" fg:w="89"/><text x="45.3798%" y="335.50"></text></g><g><title>pthread_mutex_unlock (69 samples, 0.01%)</title><rect x="45.1473%" y="325" width="0.0136%" height="15" fill="rgb(207,177,25)" fg:x="229895" fg:w="69"/><text x="45.3973%" y="335.50"></text></g><g><title>0x7ff80684e86d (115 samples, 0.02%)</title><rect x="45.1626%" y="309" width="0.0226%" height="15" fill="rgb(211,178,42)" fg:x="229973" fg:w="115"/><text x="45.4126%" y="319.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (130 samples, 0.03%)</title><rect x="45.1608%" y="325" width="0.0255%" height="15" fill="rgb(230,69,54)" fg:x="229964" fg:w="130"/><text x="45.4108%" y="335.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (23,331 samples, 4.58%)</title><rect x="40.6048%" y="341" width="4.5818%" height="15" fill="rgb(214,135,41)" fg:x="206764" fg:w="23331"/><text x="40.8548%" y="351.50">parki..</text></g><g><title>__psynch_cvwait (174 samples, 0.03%)</title><rect x="45.2437%" y="309" width="0.0342%" height="15" fill="rgb(237,67,25)" fg:x="230386" fg:w="174"/><text x="45.4937%" y="319.50"></text></g><g><title>_pthread_cond_wait (212 samples, 0.04%)</title><rect x="45.2431%" y="325" width="0.0416%" height="15" fill="rgb(222,189,50)" fg:x="230383" fg:w="212"/><text x="45.4931%" y="335.50"></text></g><g><title>cthread_yield (1,501 samples, 0.29%)</title><rect x="45.2848%" y="325" width="0.2948%" height="15" fill="rgb(245,148,34)" fg:x="230595" fg:w="1501"/><text x="45.5348%" y="335.50"></text></g><g><title>swtch_pri (1,393 samples, 0.27%)</title><rect x="45.3060%" y="309" width="0.2736%" height="15" fill="rgb(222,29,6)" fg:x="230703" fg:w="1393"/><text x="45.5560%" y="319.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (2,037 samples, 0.40%)</title><rect x="45.1866%" y="341" width="0.4000%" height="15" fill="rgb(221,189,43)" fg:x="230095" fg:w="2037"/><text x="45.4366%" y="351.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (74 samples, 0.01%)</title><rect x="45.5866%" y="341" width="0.0145%" height="15" fill="rgb(207,36,27)" fg:x="232132" fg:w="74"/><text x="45.8366%" y="351.50"></text></g><g><title>0x7ff80683f8c6 (773 samples, 0.15%)</title><rect x="45.6231%" y="309" width="0.1518%" height="15" fill="rgb(217,90,24)" fg:x="232318" fg:w="773"/><text x="45.8731%" y="319.50"></text></g><g><title>mach_timebase_info (773 samples, 0.15%)</title><rect x="45.6231%" y="293" width="0.1518%" height="15" fill="rgb(224,66,35)" fg:x="232318" fg:w="773"/><text x="45.8731%" y="303.50"></text></g><g><title>0x7ff80683f91d (93 samples, 0.02%)</title><rect x="45.7775%" y="309" width="0.0183%" height="15" fill="rgb(221,13,50)" fg:x="233104" fg:w="93"/><text x="46.0275%" y="319.50"></text></g><g><title>mach_absolute_time (93 samples, 0.02%)</title><rect x="45.7775%" y="293" width="0.0183%" height="15" fill="rgb(236,68,49)" fg:x="233104" fg:w="93"/><text x="46.0275%" y="303.50"></text></g><g><title>0x7ff80684e86d (950 samples, 0.19%)</title><rect x="45.6216%" y="325" width="0.1866%" height="15" fill="rgb(229,146,28)" fg:x="232310" fg:w="950"/><text x="45.8716%" y="335.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1,040 samples, 0.20%)</title><rect x="45.6064%" y="341" width="0.2042%" height="15" fill="rgb(225,31,38)" fg:x="232233" fg:w="1040"/><text x="45.8564%" y="351.50"></text></g><g><title>0x7ff80699f892 (186 samples, 0.04%)</title><rect x="46.5618%" y="325" width="0.0365%" height="15" fill="rgb(250,208,3)" fg:x="237098" fg:w="186"/><text x="46.8118%" y="335.50"></text></g><g><title>0x7ff80699f896 (55 samples, 0.01%)</title><rect x="46.5984%" y="325" width="0.0108%" height="15" fill="rgb(246,54,23)" fg:x="237284" fg:w="55"/><text x="46.8484%" y="335.50"></text></g><g><title>0x7ff80699f89f (584 samples, 0.11%)</title><rect x="46.6092%" y="325" width="0.1147%" height="15" fill="rgb(243,76,11)" fg:x="237339" fg:w="584"/><text x="46.8592%" y="335.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Seek&gt;::seek (214 samples, 0.04%)</title><rect x="47.1502%" y="293" width="0.0420%" height="15" fill="rgb(245,21,50)" fg:x="240094" fg:w="214"/><text x="47.4002%" y="303.50"></text></g><g><title>__lseek (190 samples, 0.04%)</title><rect x="47.1549%" y="277" width="0.0373%" height="15" fill="rgb(228,9,43)" fg:x="240118" fg:w="190"/><text x="47.4049%" y="287.50"></text></g><g><title>mkdir (1,282 samples, 0.25%)</title><rect x="47.1975%" y="277" width="0.2518%" height="15" fill="rgb(208,100,47)" fg:x="240335" fg:w="1282"/><text x="47.4475%" y="287.50"></text></g><g><title>std::fs::DirBuilder::create_dir_all (1,313 samples, 0.26%)</title><rect x="47.1928%" y="293" width="0.2578%" height="15" fill="rgb(232,26,8)" fg:x="240311" fg:w="1313"/><text x="47.4428%" y="303.50"></text></g><g><title>std::fs::File::set_len (19,197 samples, 3.77%)</title><rect x="47.4507%" y="293" width="3.7699%" height="15" fill="rgb(216,166,38)" fg:x="241624" fg:w="19197"/><text x="47.7007%" y="303.50">std:..</text></g><g><title>ftruncate (19,163 samples, 3.76%)</title><rect x="47.4573%" y="277" width="3.7633%" height="15" fill="rgb(251,202,51)" fg:x="241658" fg:w="19163"/><text x="47.7073%" y="287.50">ftru..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (243,908 samples, 47.90%)</title><rect x="51.3294%" y="277" width="47.8992%" height="15" fill="rgb(254,216,34)" fg:x="261375" fg:w="243908"/><text x="51.5794%" y="287.50">&lt;&amp;std::fs::File as std::io::Write&gt;::write</text></g><g><title>write (242,966 samples, 47.71%)</title><rect x="51.5144%" y="261" width="47.7142%" height="15" fill="rgb(251,32,27)" fg:x="262317" fg:w="242966"/><text x="51.7644%" y="271.50">write</text></g><g><title>tokio::io::blocking::Buf::write_to (244,466 samples, 48.01%)</title><rect x="51.2206%" y="293" width="48.0088%" height="15" fill="rgb(208,127,28)" fg:x="260821" fg:w="244466"/><text x="51.4706%" y="303.50">tokio::io::blocking::Buf::write_to</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (266,245 samples, 52.29%)</title><rect x="46.9440%" y="309" width="52.2858%" height="15" fill="rgb(224,137,22)" fg:x="239044" fg:w="266245"/><text x="47.1940%" y="319.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>0x7ff80686baa3 (179 samples, 0.04%)</title><rect x="99.2573%" y="245" width="0.0352%" height="15" fill="rgb(254,70,32)" fg:x="505429" fg:w="179"/><text x="99.5073%" y="255.50"></text></g><g><title>0x7ff80684603b (144 samples, 0.03%)</title><rect x="99.2642%" y="229" width="0.0283%" height="15" fill="rgb(229,75,37)" fg:x="505464" fg:w="144"/><text x="99.5142%" y="239.50"></text></g><g><title>__getdirentries64 (144 samples, 0.03%)</title><rect x="99.2642%" y="213" width="0.0283%" height="15" fill="rgb(252,64,23)" fg:x="505464" fg:w="144"/><text x="99.5142%" y="223.50"></text></g><g><title>openat (365 samples, 0.07%)</title><rect x="99.3017%" y="245" width="0.0717%" height="15" fill="rgb(232,162,48)" fg:x="505655" fg:w="365"/><text x="99.5517%" y="255.50"></text></g><g><title>__openat (365 samples, 0.07%)</title><rect x="99.3017%" y="229" width="0.0717%" height="15" fill="rgb(246,160,12)" fg:x="505655" fg:w="365"/><text x="99.5517%" y="239.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all (2,871 samples, 0.56%)</title><rect x="99.2429%" y="309" width="0.5638%" height="15" fill="rgb(247,166,0)" fg:x="505356" fg:w="2871"/><text x="99.4929%" y="319.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_recursive (2,871 samples, 0.56%)</title><rect x="99.2429%" y="293" width="0.5638%" height="15" fill="rgb(249,219,21)" fg:x="505356" fg:w="2871"/><text x="99.4929%" y="303.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_recursive (2,870 samples, 0.56%)</title><rect x="99.2431%" y="277" width="0.5636%" height="15" fill="rgb(205,209,3)" fg:x="505357" fg:w="2870"/><text x="99.4931%" y="287.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_recursive (2,848 samples, 0.56%)</title><rect x="99.2475%" y="261" width="0.5593%" height="15" fill="rgb(243,44,1)" fg:x="505379" fg:w="2848"/><text x="99.4975%" y="271.50"></text></g><g><title>unlinkat (2,207 samples, 0.43%)</title><rect x="99.3733%" y="245" width="0.4334%" height="15" fill="rgb(206,159,16)" fg:x="506020" fg:w="2207"/><text x="99.6233%" y="255.50"></text></g><g><title>__unlinkat (2,201 samples, 0.43%)</title><rect x="99.3745%" y="229" width="0.4322%" height="15" fill="rgb(244,77,30)" fg:x="506026" fg:w="2201"/><text x="99.6245%" y="239.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (270,305 samples, 53.08%)</title><rect x="46.7290%" y="325" width="53.0831%" height="15" fill="rgb(218,69,12)" fg:x="237949" fg:w="270305"/><text x="46.9790%" y="335.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (137 samples, 0.03%)</title><rect x="99.8121%" y="325" width="0.0269%" height="15" fill="rgb(212,87,7)" fg:x="508254" fg:w="137"/><text x="100.0621%" y="335.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (134 samples, 0.03%)</title><rect x="99.8419%" y="293" width="0.0263%" height="15" fill="rgb(245,114,25)" fg:x="508406" fg:w="134"/><text x="100.0919%" y="303.50"></text></g><g><title>mio::waker::Waker::wake (133 samples, 0.03%)</title><rect x="99.8421%" y="277" width="0.0261%" height="15" fill="rgb(210,61,42)" fg:x="508407" fg:w="133"/><text x="100.0921%" y="287.50"></text></g><g><title>kevent (126 samples, 0.02%)</title><rect x="99.8435%" y="261" width="0.0247%" height="15" fill="rgb(211,52,33)" fg:x="508414" fg:w="126"/><text x="100.0935%" y="271.50"></text></g><g><title>tokio::runtime::context::with_scheduler (152 samples, 0.03%)</title><rect x="99.8411%" y="309" width="0.0299%" height="15" fill="rgb(234,58,33)" fg:x="508402" fg:w="152"/><text x="100.0911%" y="319.50"></text></g><g><title>tokio::runtime::task::harness::Harness$LT$T$C$S$GT$::complete::h0ce3e0d66899a5eb (.llvm.15480949991314898764) (174 samples, 0.03%)</title><rect x="99.8392%" y="325" width="0.0342%" height="15" fill="rgb(220,115,36)" fg:x="508392" fg:w="174"/><text x="100.0892%" y="335.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (207 samples, 0.04%)</title><rect x="99.8828%" y="293" width="0.0407%" height="15" fill="rgb(243,153,54)" fg:x="508614" fg:w="207"/><text x="100.1328%" y="303.50"></text></g><g><title>mio::waker::Waker::wake (203 samples, 0.04%)</title><rect x="99.8835%" y="277" width="0.0399%" height="15" fill="rgb(251,47,18)" fg:x="508618" fg:w="203"/><text x="100.1335%" y="287.50"></text></g><g><title>kevent (202 samples, 0.04%)</title><rect x="99.8837%" y="261" width="0.0397%" height="15" fill="rgb(242,102,42)" fg:x="508619" fg:w="202"/><text x="100.1337%" y="271.50"></text></g><g><title>tokio::runtime::context::with_scheduler (229 samples, 0.04%)</title><rect x="99.8822%" y="309" width="0.0450%" height="15" fill="rgb(234,31,38)" fg:x="508611" fg:w="229"/><text x="100.1322%" y="319.50"></text></g><g><title>tokio::runtime::task::harness::Harness$LT$T$C$S$GT$::complete::h58ad049546bf370c (.llvm.3193921096100719124) (271 samples, 0.05%)</title><rect x="99.8796%" y="325" width="0.0532%" height="15" fill="rgb(221,117,51)" fg:x="508598" fg:w="271"/><text x="100.1296%" y="335.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (61 samples, 0.01%)</title><rect x="99.9676%" y="293" width="0.0120%" height="15" fill="rgb(212,20,18)" fg:x="509046" fg:w="61"/><text x="100.2176%" y="303.50"></text></g><g><title>mio::waker::Waker::wake (60 samples, 0.01%)</title><rect x="99.9678%" y="277" width="0.0118%" height="15" fill="rgb(245,133,36)" fg:x="509047" fg:w="60"/><text x="100.2178%" y="287.50"></text></g><g><title>kevent (60 samples, 0.01%)</title><rect x="99.9678%" y="261" width="0.0118%" height="15" fill="rgb(212,6,19)" fg:x="509047" fg:w="60"/><text x="100.2178%" y="271.50"></text></g><g><title>tokio::runtime::context::with_scheduler (69 samples, 0.01%)</title><rect x="99.9666%" y="309" width="0.0136%" height="15" fill="rgb(218,1,36)" fg:x="509041" fg:w="69"/><text x="100.2166%" y="319.50"></text></g><g><title>tokio::runtime::task::harness::Harness$LT$T$C$S$GT$::complete::hdd5cd30a9a4b1154 (.llvm.15480949991314898764) (250 samples, 0.05%)</title><rect x="99.9328%" y="325" width="0.0491%" height="15" fill="rgb(246,84,54)" fg:x="508869" fg:w="250"/><text x="100.1828%" y="335.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (275,814 samples, 54.16%)</title><rect x="45.8175%" y="341" width="54.1650%" height="15" fill="rgb(242,110,6)" fg:x="233308" fg:w="275814"/><text x="46.0675%" y="351.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (509,181 samples, 99.99%)</title><rect x="0.0043%" y="389" width="99.9941%" height="15" fill="rgb(214,47,5)" fg:x="22" fg:w="509181"/><text x="0.2543%" y="399.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (509,181 samples, 99.99%)</title><rect x="0.0043%" y="373" width="99.9941%" height="15" fill="rgb(218,159,25)" fg:x="22" fg:w="509181"/><text x="0.2543%" y="383.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (303,640 samples, 59.63%)</title><rect x="40.3689%" y="357" width="59.6295%" height="15" fill="rgb(215,211,28)" fg:x="205563" fg:w="303640"/><text x="40.6189%" y="367.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::raw::poll (81 samples, 0.02%)</title><rect x="99.9825%" y="341" width="0.0159%" height="15" fill="rgb(238,59,32)" fg:x="509122" fg:w="81"/><text x="100.2325%" y="351.50"></text></g><g><title>_pthread_start (509,202 samples, 100.00%)</title><rect x="0.0012%" y="421" width="99.9982%" height="15" fill="rgb(226,82,3)" fg:x="6" fg:w="509202"/><text x="0.2512%" y="431.50">_pthread_start</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (509,194 samples, 100.00%)</title><rect x="0.0027%" y="405" width="99.9967%" height="15" fill="rgb(240,164,32)" fg:x="14" fg:w="509194"/><text x="0.2527%" y="415.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>all (509,211 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(232,46,7)" fg:x="0" fg:w="509211"/><text x="0.2500%" y="463.50"></text></g><g><title>thread_start (509,205 samples, 100.00%)</title><rect x="0.0012%" y="437" width="99.9988%" height="15" fill="rgb(229,129,53)" fg:x="6" fg:w="509205"/><text x="0.2512%" y="447.50">thread_start</text></g></svg></svg>