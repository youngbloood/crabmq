<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="418158"><g><title>&lt;Unknown Address&gt; (42 samples, 0.01%)</title><rect x="0.0043%" y="341" width="0.0100%" height="15" fill="rgb(227,0,7)" fg:x="18" fg:w="42"/><text x="0.2543%" y="351.50"></text></g><g><title>0x7ff8067f7717 (119 samples, 0.03%)</title><rect x="0.0662%" y="325" width="0.0285%" height="15" fill="rgb(217,0,24)" fg:x="277" fg:w="119"/><text x="0.3162%" y="335.50"></text></g><g><title>0x7ff8067d68aa (176 samples, 0.04%)</title><rect x="0.4276%" y="309" width="0.0421%" height="15" fill="rgb(221,193,54)" fg:x="1788" fg:w="176"/><text x="0.6776%" y="319.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (176 samples, 0.04%)</title><rect x="0.4276%" y="293" width="0.0421%" height="15" fill="rgb(248,212,6)" fg:x="1788" fg:w="176"/><text x="0.6776%" y="303.50"></text></g><g><title>0x7ff8067d6984 (57 samples, 0.01%)</title><rect x="0.4788%" y="309" width="0.0136%" height="15" fill="rgb(208,68,35)" fg:x="2002" fg:w="57"/><text x="0.7288%" y="319.50"></text></g><g><title>0x7ff8067d6844 (85 samples, 0.02%)</title><rect x="0.6249%" y="293" width="0.0203%" height="15" fill="rgb(232,128,0)" fg:x="2613" fg:w="85"/><text x="0.8749%" y="303.50"></text></g><g><title>0x7ff8067d68aa (5,144 samples, 1.23%)</title><rect x="0.6483%" y="293" width="1.2302%" height="15" fill="rgb(207,160,47)" fg:x="2711" fg:w="5144"/><text x="0.8983%" y="303.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (5,137 samples, 1.23%)</title><rect x="0.6500%" y="277" width="1.2285%" height="15" fill="rgb(228,23,34)" fg:x="2718" fg:w="5137"/><text x="0.9000%" y="287.50"></text></g><g><title>0x7ff8067d6984 (84 samples, 0.02%)</title><rect x="1.8986%" y="293" width="0.0201%" height="15" fill="rgb(218,30,26)" fg:x="7939" fg:w="84"/><text x="2.1486%" y="303.50"></text></g><g><title>pthread_mutex_destroy (245 samples, 0.06%)</title><rect x="1.9301%" y="277" width="0.0586%" height="15" fill="rgb(220,122,19)" fg:x="8071" fg:w="245"/><text x="2.1801%" y="287.50"></text></g><g><title>&lt;std::sys::sync::mutex::pthread::Mutex as core::ops::drop::Drop&gt;::drop (417 samples, 0.10%)</title><rect x="1.9237%" y="293" width="0.0997%" height="15" fill="rgb(250,228,42)" fg:x="8044" fg:w="417"/><text x="2.1737%" y="303.50"></text></g><g><title>pthread_mutex_unlock (145 samples, 0.03%)</title><rect x="1.9887%" y="277" width="0.0347%" height="15" fill="rgb(240,193,28)" fg:x="8316" fg:w="145"/><text x="2.2387%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (6,318 samples, 1.51%)</title><rect x="0.5551%" y="309" width="1.5109%" height="15" fill="rgb(216,20,37)" fg:x="2321" fg:w="6318"/><text x="0.8051%" y="319.50"></text></g><g><title>pthread_mutex_trylock (142 samples, 0.03%)</title><rect x="2.0320%" y="293" width="0.0340%" height="15" fill="rgb(206,188,39)" fg:x="8497" fg:w="142"/><text x="2.2820%" y="303.50"></text></g><g><title>futures_timer::native::global::raw_clone (83 samples, 0.02%)</title><rect x="2.0660%" y="309" width="0.0198%" height="15" fill="rgb(217,207,13)" fg:x="8639" fg:w="83"/><text x="2.3160%" y="319.50"></text></g><g><title>futures_timer::native::heap::Heap&lt;T&gt;::push (260 samples, 0.06%)</title><rect x="2.0901%" y="309" width="0.0622%" height="15" fill="rgb(231,73,38)" fg:x="8740" fg:w="260"/><text x="2.3401%" y="319.50"></text></g><g><title>futures_timer::native::heap::Heap&lt;T&gt;::percolate_up (55 samples, 0.01%)</title><rect x="2.1391%" y="293" width="0.0132%" height="15" fill="rgb(225,20,46)" fg:x="8945" fg:w="55"/><text x="2.3891%" y="303.50"></text></g><g><title>pthread_mutex_unlock (358 samples, 0.09%)</title><rect x="2.1523%" y="309" width="0.0856%" height="15" fill="rgb(210,31,41)" fg:x="9000" fg:w="358"/><text x="2.4023%" y="319.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (651 samples, 0.16%)</title><rect x="2.2379%" y="309" width="0.1557%" height="15" fill="rgb(221,200,47)" fg:x="9358" fg:w="651"/><text x="2.4879%" y="319.50"></text></g><g><title>pthread_mutex_lock (637 samples, 0.15%)</title><rect x="2.2413%" y="293" width="0.1523%" height="15" fill="rgb(226,26,5)" fg:x="9372" fg:w="637"/><text x="2.4913%" y="303.50"></text></g><g><title>0x7ff8067b5208 (64 samples, 0.02%)</title><rect x="2.4675%" y="293" width="0.0153%" height="15" fill="rgb(249,33,26)" fg:x="10318" fg:w="64"/><text x="2.7175%" y="303.50"></text></g><g><title>0x7ff8067b5225 (47 samples, 0.01%)</title><rect x="2.4852%" y="293" width="0.0112%" height="15" fill="rgb(235,183,28)" fg:x="10392" fg:w="47"/><text x="2.7352%" y="303.50"></text></g><g><title>0x7ff8067b523b (49 samples, 0.01%)</title><rect x="2.4998%" y="293" width="0.0117%" height="15" fill="rgb(221,5,38)" fg:x="10453" fg:w="49"/><text x="2.7498%" y="303.50"></text></g><g><title>0x7ff8067b5313 (329 samples, 0.08%)</title><rect x="2.5237%" y="293" width="0.0787%" height="15" fill="rgb(247,18,42)" fg:x="10553" fg:w="329"/><text x="2.7737%" y="303.50"></text></g><g><title>0x7ff8067b5330 (96 samples, 0.02%)</title><rect x="2.6057%" y="293" width="0.0230%" height="15" fill="rgb(241,131,45)" fg:x="10896" fg:w="96"/><text x="2.8557%" y="303.50"></text></g><g><title>0x7ff8067d6607 (127 samples, 0.03%)</title><rect x="2.6330%" y="277" width="0.0304%" height="15" fill="rgb(249,31,29)" fg:x="11010" fg:w="127"/><text x="2.8830%" y="287.50"></text></g><g><title>0x7ff8067b53c7 (143 samples, 0.03%)</title><rect x="2.6301%" y="293" width="0.0342%" height="15" fill="rgb(225,111,53)" fg:x="10998" fg:w="143"/><text x="2.8801%" y="303.50"></text></g><g><title>pthread_mutex_init (117 samples, 0.03%)</title><rect x="2.6732%" y="293" width="0.0280%" height="15" fill="rgb(238,160,17)" fg:x="11178" fg:w="117"/><text x="2.9232%" y="303.50"></text></g><g><title>std::sys::sync::once_box::OnceBox$LT$T$GT$::initialize::h1db14ccd83739d5b (.llvm.8465266497648202264) (1,382 samples, 0.33%)</title><rect x="2.3960%" y="309" width="0.3305%" height="15" fill="rgb(214,148,48)" fg:x="10019" fg:w="1382"/><text x="2.6460%" y="319.50"></text></g><g><title>&lt;futures_timer::native::timer::Timer as core::future::future::Future&gt;::poll (10,849 samples, 2.59%)</title><rect x="0.1325%" y="325" width="2.5945%" height="15" fill="rgb(232,36,49)" fg:x="554" fg:w="10849"/><text x="0.3825%" y="335.50">&lt;f..</text></g><g><title>futures_timer::native::heap::Heap&lt;T&gt;::remove (2,327 samples, 0.56%)</title><rect x="2.9577%" y="309" width="0.5565%" height="15" fill="rgb(209,103,24)" fg:x="12368" fg:w="2327"/><text x="3.2077%" y="319.50"></text></g><g><title>pthread_mutex_unlock (73 samples, 0.02%)</title><rect x="3.5142%" y="309" width="0.0175%" height="15" fill="rgb(229,88,8)" fg:x="14695" fg:w="73"/><text x="3.7642%" y="319.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (510 samples, 0.12%)</title><rect x="3.5317%" y="309" width="0.1220%" height="15" fill="rgb(213,181,19)" fg:x="14768" fg:w="510"/><text x="3.7817%" y="319.50"></text></g><g><title>pthread_mutex_lock (503 samples, 0.12%)</title><rect x="3.5334%" y="293" width="0.1203%" height="15" fill="rgb(254,191,54)" fg:x="14775" fg:w="503"/><text x="3.7834%" y="303.50"></text></g><g><title>0x7ff80683f8c6 (2,701 samples, 0.65%)</title><rect x="3.6754%" y="277" width="0.6459%" height="15" fill="rgb(241,83,37)" fg:x="15369" fg:w="2701"/><text x="3.9254%" y="287.50"></text></g><g><title>mach_timebase_info (2,701 samples, 0.65%)</title><rect x="3.6754%" y="261" width="0.6459%" height="15" fill="rgb(233,36,39)" fg:x="15369" fg:w="2701"/><text x="3.9254%" y="271.50"></text></g><g><title>0x7ff80683f91d (176 samples, 0.04%)</title><rect x="4.3249%" y="277" width="0.0421%" height="15" fill="rgb(226,3,54)" fg:x="18085" fg:w="176"/><text x="4.5749%" y="287.50"></text></g><g><title>mach_absolute_time (176 samples, 0.04%)</title><rect x="4.3249%" y="261" width="0.0421%" height="15" fill="rgb(245,192,40)" fg:x="18085" fg:w="176"/><text x="4.5749%" y="271.50"></text></g><g><title>0x7ff80683f93d (77 samples, 0.02%)</title><rect x="4.3692%" y="277" width="0.0184%" height="15" fill="rgb(238,167,29)" fg:x="18270" fg:w="77"/><text x="4.6192%" y="287.50"></text></g><g><title>0x7ff80684e86d (3,023 samples, 0.72%)</title><rect x="3.6716%" y="293" width="0.7229%" height="15" fill="rgb(232,182,51)" fg:x="15353" fg:w="3023"/><text x="3.9216%" y="303.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (3,125 samples, 0.75%)</title><rect x="3.6536%" y="309" width="0.7473%" height="15" fill="rgb(231,60,39)" fg:x="15278" fg:w="3125"/><text x="3.9036%" y="319.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (7,152 samples, 1.71%)</title><rect x="4.4753%" y="277" width="1.7104%" height="15" fill="rgb(208,69,12)" fg:x="18714" fg:w="7152"/><text x="4.7253%" y="287.50"></text></g><g><title>mio::waker::Waker::wake (7,040 samples, 1.68%)</title><rect x="4.5021%" y="261" width="1.6836%" height="15" fill="rgb(235,93,37)" fg:x="18826" fg:w="7040"/><text x="4.7521%" y="271.50"></text></g><g><title>kevent (6,908 samples, 1.65%)</title><rect x="4.5337%" y="245" width="1.6520%" height="15" fill="rgb(213,116,39)" fg:x="18958" fg:w="6908"/><text x="4.7837%" y="255.50"></text></g><g><title>tokio::runtime::context::with_scheduler (7,521 samples, 1.80%)</title><rect x="4.4414%" y="293" width="1.7986%" height="15" fill="rgb(222,207,29)" fg:x="18572" fg:w="7521"/><text x="4.6914%" y="303.50">t..</text></g><g><title>tokio::runtime::scheduler::inject::Inject&lt;T&gt;::push (227 samples, 0.05%)</title><rect x="6.1857%" y="277" width="0.0543%" height="15" fill="rgb(206,96,30)" fg:x="25866" fg:w="227"/><text x="6.4357%" y="287.50"></text></g><g><title>futures_timer::native::timer::Timer::advance (15,222 samples, 3.64%)</title><rect x="2.7377%" y="325" width="3.6403%" height="15" fill="rgb(218,138,4)" fg:x="11448" fg:w="15222"/><text x="2.9877%" y="335.50">futu..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (8,260 samples, 1.98%)</title><rect x="4.4026%" y="309" width="1.9753%" height="15" fill="rgb(250,191,14)" fg:x="18410" fg:w="8260"/><text x="4.6526%" y="319.50">t..</text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (544 samples, 0.13%)</title><rect x="6.2479%" y="293" width="0.1301%" height="15" fill="rgb(239,60,40)" fg:x="26126" fg:w="544"/><text x="6.4979%" y="303.50"></text></g><g><title>0x7ff80683f8c6 (102 samples, 0.02%)</title><rect x="6.3952%" y="293" width="0.0244%" height="15" fill="rgb(206,27,48)" fg:x="26742" fg:w="102"/><text x="6.6452%" y="303.50"></text></g><g><title>mach_timebase_info (102 samples, 0.02%)</title><rect x="6.3952%" y="277" width="0.0244%" height="15" fill="rgb(225,35,8)" fg:x="26742" fg:w="102"/><text x="6.6452%" y="287.50"></text></g><g><title>0x7ff80683f91d (146 samples, 0.03%)</title><rect x="6.4239%" y="293" width="0.0349%" height="15" fill="rgb(250,213,24)" fg:x="26862" fg:w="146"/><text x="6.6739%" y="303.50"></text></g><g><title>mach_absolute_time (146 samples, 0.03%)</title><rect x="6.4239%" y="277" width="0.0349%" height="15" fill="rgb(247,123,22)" fg:x="26862" fg:w="146"/><text x="6.6739%" y="287.50"></text></g><g><title>0x7ff80683f93d (86 samples, 0.02%)</title><rect x="6.4605%" y="293" width="0.0206%" height="15" fill="rgb(231,138,38)" fg:x="27015" fg:w="86"/><text x="6.7105%" y="303.50"></text></g><g><title>0x7ff80684e86d (380 samples, 0.09%)</title><rect x="6.3923%" y="309" width="0.0909%" height="15" fill="rgb(231,145,46)" fg:x="26730" fg:w="380"/><text x="6.6423%" y="319.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (468 samples, 0.11%)</title><rect x="6.3782%" y="325" width="0.1119%" height="15" fill="rgb(251,118,11)" fg:x="26671" fg:w="468"/><text x="6.6282%" y="335.50"></text></g><g><title>0x7ff806824cc4 (78 samples, 0.02%)</title><rect x="6.6367%" y="277" width="0.0187%" height="15" fill="rgb(217,147,25)" fg:x="27752" fg:w="78"/><text x="6.8867%" y="287.50"></text></g><g><title>mach_absolute_time (78 samples, 0.02%)</title><rect x="6.6367%" y="261" width="0.0187%" height="15" fill="rgb(247,81,37)" fg:x="27752" fg:w="78"/><text x="6.8867%" y="271.50"></text></g><g><title>0x7ff8067f72e6 (96 samples, 0.02%)</title><rect x="6.6339%" y="293" width="0.0230%" height="15" fill="rgb(209,12,38)" fg:x="27740" fg:w="96"/><text x="6.8839%" y="303.50"></text></g><g><title>0x7ff8067f730d (4,809 samples, 1.15%)</title><rect x="6.6621%" y="293" width="1.1500%" height="15" fill="rgb(227,1,9)" fg:x="27858" fg:w="4809"/><text x="6.9121%" y="303.50"></text></g><g><title>semaphore_timedwait_trap (4,674 samples, 1.12%)</title><rect x="6.6944%" y="277" width="1.1178%" height="15" fill="rgb(248,47,43)" fg:x="27993" fg:w="4674"/><text x="6.9444%" y="287.50"></text></g><g><title>0x7ff8067f7313 (43 samples, 0.01%)</title><rect x="7.8121%" y="293" width="0.0103%" height="15" fill="rgb(221,10,30)" fg:x="32667" fg:w="43"/><text x="8.0621%" y="303.50"></text></g><g><title>0x7ff8067f7759 (5,026 samples, 1.20%)</title><rect x="6.6298%" y="309" width="1.2019%" height="15" fill="rgb(210,229,1)" fg:x="27723" fg:w="5026"/><text x="6.8798%" y="319.50"></text></g><g><title>0x7ff8067f7762 (55 samples, 0.01%)</title><rect x="7.8317%" y="309" width="0.0132%" height="15" fill="rgb(222,148,37)" fg:x="32749" fg:w="55"/><text x="8.0817%" y="319.50"></text></g><g><title>0x7ff8067f728c (199 samples, 0.05%)</title><rect x="7.8485%" y="293" width="0.0476%" height="15" fill="rgb(234,67,33)" fg:x="32819" fg:w="199"/><text x="8.0985%" y="303.50"></text></g><g><title>semaphore_wait_trap (191 samples, 0.05%)</title><rect x="7.8504%" y="277" width="0.0457%" height="15" fill="rgb(247,98,35)" fg:x="32827" fg:w="191"/><text x="8.1004%" y="287.50"></text></g><g><title>0x7ff8067f7781 (225 samples, 0.05%)</title><rect x="7.8466%" y="309" width="0.0538%" height="15" fill="rgb(247,138,52)" fg:x="32811" fg:w="225"/><text x="8.0966%" y="319.50"></text></g><g><title>0x7ff8068249ac (117 samples, 0.03%)</title><rect x="7.9047%" y="309" width="0.0280%" height="15" fill="rgb(213,79,30)" fg:x="33054" fg:w="117"/><text x="8.1547%" y="319.50"></text></g><g><title>mach_absolute_time (117 samples, 0.03%)</title><rect x="7.9047%" y="293" width="0.0280%" height="15" fill="rgb(246,177,23)" fg:x="33054" fg:w="117"/><text x="8.1547%" y="303.50"></text></g><g><title>std::thread::park_timeout (6,036 samples, 1.44%)</title><rect x="6.4961%" y="325" width="1.4435%" height="15" fill="rgb(230,62,27)" fg:x="27164" fg:w="6036"/><text x="6.7461%" y="335.50"></text></g><g><title>futures_timer::native::global::run (33,146 samples, 7.93%)</title><rect x="0.0143%" y="341" width="7.9267%" height="15" fill="rgb(216,154,8)" fg:x="60" fg:w="33146"/><text x="0.2643%" y="351.50">futures_tim..</text></g><g><title>&lt;Unknown Address&gt; (107 samples, 0.03%)</title><rect x="8.0168%" y="245" width="0.0256%" height="15" fill="rgb(244,35,45)" fg:x="33523" fg:w="107"/><text x="8.2668%" y="255.50"></text></g><g><title>std::path::Path::components (85 samples, 0.02%)</title><rect x="8.0221%" y="229" width="0.0203%" height="15" fill="rgb(251,115,12)" fg:x="33545" fg:w="85"/><text x="8.2721%" y="239.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (44 samples, 0.01%)</title><rect x="8.2861%" y="197" width="0.0105%" height="15" fill="rgb(240,54,50)" fg:x="34649" fg:w="44"/><text x="8.5361%" y="207.50"></text></g><g><title>&lt;futures_util::future::join_all::JoinAll&lt;F&gt; as core::future::future::Future&gt;::poll (55 samples, 0.01%)</title><rect x="8.2851%" y="229" width="0.0132%" height="15" fill="rgb(233,84,52)" fg:x="34645" fg:w="55"/><text x="8.5351%" y="239.50"></text></g><g><title>&lt;futures_util::stream::stream::collect::Collect&lt;St,C&gt; as core::future::future::Future&gt;::poll (55 samples, 0.01%)</title><rect x="8.2851%" y="213" width="0.0132%" height="15" fill="rgb(207,117,47)" fg:x="34645" fg:w="55"/><text x="8.5351%" y="223.50"></text></g><g><title>_platform_memcmp$VARIANT$Base (392 samples, 0.09%)</title><rect x="8.3138%" y="229" width="0.0937%" height="15" fill="rgb(249,43,39)" fg:x="34765" fg:w="392"/><text x="8.5638%" y="239.50"></text></g><g><title>std::path::Components::len_before_body (785 samples, 0.19%)</title><rect x="9.7088%" y="197" width="0.1877%" height="15" fill="rgb(209,38,44)" fg:x="40598" fg:w="785"/><text x="9.9588%" y="207.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (6,268 samples, 1.50%)</title><rect x="8.7842%" y="213" width="1.4990%" height="15" fill="rgb(236,212,23)" fg:x="36732" fg:w="6268"/><text x="9.0342%" y="223.50"></text></g><g><title>std::path::Components::parse_next_component_back (1,617 samples, 0.39%)</title><rect x="9.8965%" y="197" width="0.3867%" height="15" fill="rgb(242,79,21)" fg:x="41383" fg:w="1617"/><text x="10.1465%" y="207.50"></text></g><g><title>_platform_memcmp$VARIANT$Base (242 samples, 0.06%)</title><rect x="10.2832%" y="213" width="0.0579%" height="15" fill="rgb(211,96,35)" fg:x="43000" fg:w="242"/><text x="10.5332%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::eq_by (8,875 samples, 2.12%)</title><rect x="8.4088%" y="229" width="2.1224%" height="15" fill="rgb(253,215,40)" fg:x="35162" fg:w="8875"/><text x="8.6588%" y="239.50">c..</text></g><g><title>std::path::Components::len_before_body (795 samples, 0.19%)</title><rect x="10.3411%" y="213" width="0.1901%" height="15" fill="rgb(211,81,21)" fg:x="43242" fg:w="795"/><text x="10.5911%" y="223.50"></text></g><g><title>0x7ff806877123 (52 samples, 0.01%)</title><rect x="10.5441%" y="117" width="0.0124%" height="15" fill="rgb(208,190,38)" fg:x="44091" fg:w="52"/><text x="10.7941%" y="127.50"></text></g><g><title>0x7ff80687712c (44 samples, 0.01%)</title><rect x="10.5565%" y="117" width="0.0105%" height="15" fill="rgb(235,213,38)" fg:x="44143" fg:w="44"/><text x="10.8065%" y="127.50"></text></g><g><title>0x7ff806877137 (49 samples, 0.01%)</title><rect x="10.5673%" y="117" width="0.0117%" height="15" fill="rgb(237,122,38)" fg:x="44188" fg:w="49"/><text x="10.8173%" y="127.50"></text></g><g><title>0x7ff80684e8f6 (163 samples, 0.04%)</title><rect x="10.5434%" y="133" width="0.0390%" height="15" fill="rgb(244,218,35)" fg:x="44088" fg:w="163"/><text x="10.7934%" y="143.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (193 samples, 0.05%)</title><rect x="10.5388%" y="197" width="0.0462%" height="15" fill="rgb(240,68,47)" fg:x="44069" fg:w="193"/><text x="10.7888%" y="207.50"></text></g><g><title>once_cell::imp::initialize_or_wait (193 samples, 0.05%)</title><rect x="10.5388%" y="181" width="0.0462%" height="15" fill="rgb(210,16,53)" fg:x="44069" fg:w="193"/><text x="10.7888%" y="191.50"></text></g><g><title>once_cell::imp::OnceCell$LT$T$GT$::initialize::_$u7b$$u7b$closure$u7d$$u7d$::hd12ae1697f79bd24 (.llvm.16041530799740990472) (193 samples, 0.05%)</title><rect x="10.5388%" y="165" width="0.0462%" height="15" fill="rgb(235,124,12)" fg:x="44069" fg:w="193"/><text x="10.7888%" y="175.50"></text></g><g><title>quanta::Calibration::calibrate (193 samples, 0.05%)</title><rect x="10.5388%" y="149" width="0.0462%" height="15" fill="rgb(224,169,11)" fg:x="44069" fg:w="193"/><text x="10.7888%" y="159.50"></text></g><g><title>governor::state::direct::_&lt;impl governor::state::RateLimiter&lt;governor::state::direct::NotKeyed,governor::state::in_memory::InMemoryState,governor::clock::quanta::QuantaClock,governor::middleware::NoOpMiddleware&lt;governor::clock::quanta::QuantaInstant&gt;&gt;&gt;::direct (209 samples, 0.05%)</title><rect x="10.5388%" y="229" width="0.0500%" height="15" fill="rgb(250,166,2)" fg:x="44069" fg:w="209"/><text x="10.7888%" y="239.50"></text></g><g><title>&lt;quanta::Clock as core::default::Default&gt;::default (209 samples, 0.05%)</title><rect x="10.5388%" y="213" width="0.0500%" height="15" fill="rgb(242,216,29)" fg:x="44069" fg:w="209"/><text x="10.7888%" y="223.50"></text></g><g><title>std::path::Path::components (341 samples, 0.08%)</title><rect x="10.5888%" y="229" width="0.0815%" height="15" fill="rgb(230,116,27)" fg:x="44278" fg:w="341"/><text x="10.8388%" y="239.50"></text></g><g><title>storagev2::disk::writer::flusher::Flusher::get_partition_metrics (79 samples, 0.02%)</title><rect x="10.6706%" y="229" width="0.0189%" height="15" fill="rgb(228,99,48)" fg:x="44620" fg:w="79"/><text x="10.9206%" y="239.50"></text></g><g><title>storagev2::disk::writer::test::run_flush_benchmark::_$u7b$$u7b$closure$u7d$$u7d$::he02f1855f2419fa4 (.llvm.11541602224641052514) (11,222 samples, 2.68%)</title><rect x="8.0166%" y="261" width="2.6837%" height="15" fill="rgb(253,11,6)" fg:x="33522" fg:w="11222"/><text x="8.2666%" y="271.50">st..</text></g><g><title>storagev2::disk::writer::test::test_flush_speed_with_dynamic_rate_multi_partition::_{{closure}} (11,059 samples, 2.64%)</title><rect x="8.0556%" y="245" width="2.6447%" height="15" fill="rgb(247,143,39)" fg:x="33685" fg:w="11059"/><text x="8.3056%" y="255.50">st..</text></g><g><title>0x7ff80684e86d (45 samples, 0.01%)</title><rect x="10.7041%" y="213" width="0.0108%" height="15" fill="rgb(236,97,10)" fg:x="44760" fg:w="45"/><text x="10.9541%" y="223.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (52 samples, 0.01%)</title><rect x="10.7029%" y="229" width="0.0124%" height="15" fill="rgb(233,208,19)" fg:x="44755" fg:w="52"/><text x="10.9529%" y="239.50"></text></g><g><title>tokio::runtime::metrics::batch::MetricsBatch::end_processing_scheduled_tasks (71 samples, 0.02%)</title><rect x="10.7003%" y="261" width="0.0170%" height="15" fill="rgb(216,164,2)" fg:x="44744" fg:w="71"/><text x="10.9503%" y="271.50"></text></g><g><title>std::time::Instant::elapsed (63 samples, 0.02%)</title><rect x="10.7022%" y="245" width="0.0151%" height="15" fill="rgb(220,129,5)" fg:x="44752" fg:w="63"/><text x="10.9522%" y="255.50"></text></g><g><title>0x7ff80684e86d (46 samples, 0.01%)</title><rect x="10.7223%" y="229" width="0.0110%" height="15" fill="rgb(242,17,10)" fg:x="44836" fg:w="46"/><text x="10.9723%" y="239.50"></text></g><g><title>tokio::runtime::metrics::batch::MetricsBatch::start_processing_scheduled_tasks (72 samples, 0.02%)</title><rect x="10.7172%" y="261" width="0.0172%" height="15" fill="rgb(242,107,0)" fg:x="44815" fg:w="72"/><text x="10.9672%" y="271.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (55 samples, 0.01%)</title><rect x="10.7213%" y="245" width="0.0132%" height="15" fill="rgb(251,28,31)" fg:x="44832" fg:w="55"/><text x="10.9713%" y="255.50"></text></g><g><title>0x7ff80683f8c6 (1,720 samples, 0.41%)</title><rect x="10.7871%" y="197" width="0.4113%" height="15" fill="rgb(233,223,10)" fg:x="45107" fg:w="1720"/><text x="11.0371%" y="207.50"></text></g><g><title>mach_timebase_info (1,718 samples, 0.41%)</title><rect x="10.7875%" y="181" width="0.4108%" height="15" fill="rgb(215,21,27)" fg:x="45109" fg:w="1718"/><text x="11.0375%" y="191.50"></text></g><g><title>0x7ff80683f91d (46 samples, 0.01%)</title><rect x="11.2006%" y="197" width="0.0110%" height="15" fill="rgb(232,23,21)" fg:x="46836" fg:w="46"/><text x="11.4506%" y="207.50"></text></g><g><title>mach_absolute_time (46 samples, 0.01%)</title><rect x="11.2006%" y="181" width="0.0110%" height="15" fill="rgb(244,5,23)" fg:x="46836" fg:w="46"/><text x="11.4506%" y="191.50"></text></g><g><title>0x7ff80684e86d (1,827 samples, 0.44%)</title><rect x="10.7849%" y="213" width="0.4369%" height="15" fill="rgb(226,81,46)" fg:x="45098" fg:w="1827"/><text x="11.0349%" y="223.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1,858 samples, 0.44%)</title><rect x="10.7792%" y="229" width="0.4443%" height="15" fill="rgb(247,70,30)" fg:x="45074" fg:w="1858"/><text x="11.0292%" y="239.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (88 samples, 0.02%)</title><rect x="11.2269%" y="229" width="0.0210%" height="15" fill="rgb(212,68,19)" fg:x="46946" fg:w="88"/><text x="11.4769%" y="239.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn::hdc27603f1e2477ca (.llvm.11592589432301260788) (1,764 samples, 0.42%)</title><rect x="11.2479%" y="229" width="0.4219%" height="15" fill="rgb(240,187,13)" fg:x="47034" fg:w="1764"/><text x="11.4979%" y="239.50"></text></g><g><title>mio::poll::Poll::poll (1,676 samples, 0.40%)</title><rect x="11.2689%" y="213" width="0.4008%" height="15" fill="rgb(223,113,26)" fg:x="47122" fg:w="1676"/><text x="11.5189%" y="223.50"></text></g><g><title>kevent (1,601 samples, 0.38%)</title><rect x="11.2869%" y="197" width="0.3829%" height="15" fill="rgb(206,192,2)" fg:x="47197" fg:w="1601"/><text x="11.5369%" y="207.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal::h05d49ce90ffebeb3 (.llvm.11592589432301260788) (3,859 samples, 0.92%)</title><rect x="10.7548%" y="245" width="0.9229%" height="15" fill="rgb(241,108,4)" fg:x="44972" fg:w="3859"/><text x="11.0048%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (4,031 samples, 0.96%)</title><rect x="10.7345%" y="261" width="0.9640%" height="15" fill="rgb(247,173,49)" fg:x="44887" fg:w="4031"/><text x="10.9845%" y="271.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (87 samples, 0.02%)</title><rect x="11.6776%" y="245" width="0.0208%" height="15" fill="rgb(224,114,35)" fg:x="48831" fg:w="87"/><text x="11.9276%" y="255.50"></text></g><g><title>0x7ff80683f8c6 (53 samples, 0.01%)</title><rect x="11.7054%" y="197" width="0.0127%" height="15" fill="rgb(245,159,27)" fg:x="48947" fg:w="53"/><text x="11.9554%" y="207.50"></text></g><g><title>mach_timebase_info (53 samples, 0.01%)</title><rect x="11.7054%" y="181" width="0.0127%" height="15" fill="rgb(245,172,44)" fg:x="48947" fg:w="53"/><text x="11.9554%" y="191.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (60 samples, 0.01%)</title><rect x="11.7049%" y="229" width="0.0143%" height="15" fill="rgb(236,23,11)" fg:x="48945" fg:w="60"/><text x="11.9549%" y="239.50"></text></g><g><title>0x7ff80684e86d (58 samples, 0.01%)</title><rect x="11.7054%" y="213" width="0.0139%" height="15" fill="rgb(205,117,38)" fg:x="48947" fg:w="58"/><text x="11.9554%" y="223.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn::hdc27603f1e2477ca (.llvm.11592589432301260788) (202 samples, 0.05%)</title><rect x="11.7231%" y="229" width="0.0483%" height="15" fill="rgb(237,72,25)" fg:x="49021" fg:w="202"/><text x="11.9731%" y="239.50"></text></g><g><title>mio::poll::Poll::poll (193 samples, 0.05%)</title><rect x="11.7252%" y="213" width="0.0462%" height="15" fill="rgb(244,70,9)" fg:x="49030" fg:w="193"/><text x="11.9752%" y="223.50"></text></g><g><title>kevent (180 samples, 0.04%)</title><rect x="11.7283%" y="197" width="0.0430%" height="15" fill="rgb(217,125,39)" fg:x="49043" fg:w="180"/><text x="11.9783%" y="207.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal::h05d49ce90ffebeb3 (.llvm.11592589432301260788) (308 samples, 0.07%)</title><rect x="11.7016%" y="245" width="0.0737%" height="15" fill="rgb(235,36,10)" fg:x="48931" fg:w="308"/><text x="11.9516%" y="255.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (65 samples, 0.02%)</title><rect x="11.7814%" y="229" width="0.0155%" height="15" fill="rgb(251,123,47)" fg:x="49265" fg:w="65"/><text x="12.0314%" y="239.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (44 samples, 0.01%)</title><rect x="11.7865%" y="213" width="0.0105%" height="15" fill="rgb(221,13,13)" fg:x="49286" fg:w="44"/><text x="12.0365%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park_yield (503 samples, 0.12%)</title><rect x="11.6984%" y="261" width="0.1203%" height="15" fill="rgb(238,131,9)" fg:x="48918" fg:w="503"/><text x="11.9484%" y="271.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (182 samples, 0.04%)</title><rect x="11.7752%" y="245" width="0.0435%" height="15" fill="rgb(211,50,8)" fg:x="49239" fg:w="182"/><text x="12.0252%" y="255.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (89 samples, 0.02%)</title><rect x="11.7975%" y="229" width="0.0213%" height="15" fill="rgb(245,182,24)" fg:x="49332" fg:w="89"/><text x="12.0475%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (893 samples, 0.21%)</title><rect x="11.8187%" y="261" width="0.2136%" height="15" fill="rgb(242,14,37)" fg:x="49421" fg:w="893"/><text x="12.0687%" y="271.50"></text></g><g><title>&lt;Unknown Address&gt; (65 samples, 0.02%)</title><rect x="12.1308%" y="229" width="0.0155%" height="15" fill="rgb(246,228,12)" fg:x="50726" fg:w="65"/><text x="12.3808%" y="239.50"></text></g><g><title>pthread_cond_signal (42 samples, 0.01%)</title><rect x="12.1894%" y="133" width="0.0100%" height="15" fill="rgb(213,55,15)" fg:x="50971" fg:w="42"/><text x="12.4394%" y="143.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::start_seek (52 samples, 0.01%)</title><rect x="12.1875%" y="197" width="0.0124%" height="15" fill="rgb(209,9,3)" fg:x="50963" fg:w="52"/><text x="12.4375%" y="207.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (52 samples, 0.01%)</title><rect x="12.1875%" y="181" width="0.0124%" height="15" fill="rgb(230,59,30)" fg:x="50963" fg:w="52"/><text x="12.4375%" y="191.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (47 samples, 0.01%)</title><rect x="12.1887%" y="165" width="0.0112%" height="15" fill="rgb(209,121,21)" fg:x="50968" fg:w="47"/><text x="12.4387%" y="175.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (44 samples, 0.01%)</title><rect x="12.1894%" y="149" width="0.0105%" height="15" fill="rgb(220,109,13)" fg:x="50971" fg:w="44"/><text x="12.4394%" y="159.50"></text></g><g><title>0x7ff8068630df (50 samples, 0.01%)</title><rect x="12.2021%" y="149" width="0.0120%" height="15" fill="rgb(232,18,1)" fg:x="51024" fg:w="50"/><text x="12.4521%" y="159.50"></text></g><g><title>0x7ff8068463a6 (50 samples, 0.01%)</title><rect x="12.2021%" y="133" width="0.0120%" height="15" fill="rgb(215,41,42)" fg:x="51024" fg:w="50"/><text x="12.4521%" y="143.50"></text></g><g><title>__getdirentries64 (50 samples, 0.01%)</title><rect x="12.2021%" y="117" width="0.0120%" height="15" fill="rgb(224,123,36)" fg:x="51024" fg:w="50"/><text x="12.4521%" y="127.50"></text></g><g><title>&lt;std::sys::pal::unix::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (55 samples, 0.01%)</title><rect x="12.2018%" y="165" width="0.0132%" height="15" fill="rgb(240,125,3)" fg:x="51023" fg:w="55"/><text x="12.4518%" y="175.50"></text></g><g><title>&lt;std::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 0.01%)</title><rect x="12.2018%" y="181" width="0.0134%" height="15" fill="rgb(205,98,50)" fg:x="51023" fg:w="56"/><text x="12.4518%" y="191.50"></text></g><g><title>std::path::Path::is_dir (42 samples, 0.01%)</title><rect x="12.2193%" y="181" width="0.0100%" height="15" fill="rgb(205,185,37)" fg:x="51096" fg:w="42"/><text x="12.4693%" y="191.50"></text></g><g><title>0x7ff8068449e1 (89 samples, 0.02%)</title><rect x="12.2293%" y="165" width="0.0213%" height="15" fill="rgb(238,207,15)" fg:x="51138" fg:w="89"/><text x="12.4793%" y="175.50"></text></g><g><title>open$NOCANCEL (89 samples, 0.02%)</title><rect x="12.2293%" y="149" width="0.0213%" height="15" fill="rgb(213,199,42)" fg:x="51138" fg:w="89"/><text x="12.4793%" y="159.50"></text></g><g><title>__open_nocancel (89 samples, 0.02%)</title><rect x="12.2293%" y="133" width="0.0213%" height="15" fill="rgb(235,201,11)" fg:x="51138" fg:w="89"/><text x="12.4793%" y="143.50"></text></g><g><title>std::sys::pal::unix::fs::readdir (112 samples, 0.03%)</title><rect x="12.2293%" y="181" width="0.0268%" height="15" fill="rgb(207,46,11)" fg:x="51138" fg:w="112"/><text x="12.4793%" y="191.50"></text></g><g><title>common::util::other::dir_recursive (257 samples, 0.06%)</title><rect x="12.2014%" y="197" width="0.0615%" height="15" fill="rgb(241,35,35)" fg:x="51021" fg:w="257"/><text x="12.4514%" y="207.50"></text></g><g><title>std::sys::pal::unix::fs::stat (69 samples, 0.02%)</title><rect x="12.2671%" y="197" width="0.0165%" height="15" fill="rgb(243,32,47)" fg:x="51296" fg:w="69"/><text x="12.5171%" y="207.50"></text></g><g><title>stat$INODE64 (67 samples, 0.02%)</title><rect x="12.2676%" y="181" width="0.0160%" height="15" fill="rgb(247,202,23)" fg:x="51298" fg:w="67"/><text x="12.5176%" y="191.50"></text></g><g><title>storagev2::disk::fd_cache::create_writer_fd (474 samples, 0.11%)</title><rect x="12.2853%" y="197" width="0.1134%" height="15" fill="rgb(219,102,11)" fg:x="51372" fg:w="474"/><text x="12.5353%" y="207.50"></text></g><g><title>std::fs::OpenOptions::_open (435 samples, 0.10%)</title><rect x="12.2946%" y="181" width="0.1040%" height="15" fill="rgb(243,110,44)" fg:x="51411" fg:w="435"/><text x="12.5446%" y="191.50"></text></g><g><title>open (435 samples, 0.10%)</title><rect x="12.2946%" y="165" width="0.1040%" height="15" fill="rgb(222,74,54)" fg:x="51411" fg:w="435"/><text x="12.5446%" y="175.50"></text></g><g><title>__open (435 samples, 0.10%)</title><rect x="12.2946%" y="149" width="0.1040%" height="15" fill="rgb(216,99,12)" fg:x="51411" fg:w="435"/><text x="12.5446%" y="159.50"></text></g><g><title>std::fs::OpenOptions::_open (448 samples, 0.11%)</title><rect x="12.4039%" y="165" width="0.1071%" height="15" fill="rgb(226,22,26)" fg:x="51868" fg:w="448"/><text x="12.6539%" y="175.50"></text></g><g><title>open (448 samples, 0.11%)</title><rect x="12.4039%" y="149" width="0.1071%" height="15" fill="rgb(217,163,10)" fg:x="51868" fg:w="448"/><text x="12.6539%" y="159.50"></text></g><g><title>__open (447 samples, 0.11%)</title><rect x="12.4042%" y="133" width="0.1069%" height="15" fill="rgb(213,25,53)" fg:x="51869" fg:w="447"/><text x="12.6542%" y="143.50"></text></g><g><title>storagev2::disk::meta::WriterPositionPtr::new (471 samples, 0.11%)</title><rect x="12.3987%" y="197" width="0.1126%" height="15" fill="rgb(252,105,26)" fg:x="51846" fg:w="471"/><text x="12.6487%" y="207.50"></text></g><g><title>storagev2::disk::fd_cache::create_writer_fd (467 samples, 0.11%)</title><rect x="12.3996%" y="181" width="0.1117%" height="15" fill="rgb(220,39,43)" fg:x="51850" fg:w="467"/><text x="12.6496%" y="191.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (44 samples, 0.01%)</title><rect x="12.5142%" y="181" width="0.0105%" height="15" fill="rgb(229,68,48)" fg:x="52329" fg:w="44"/><text x="12.7642%" y="191.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (47 samples, 0.01%)</title><rect x="12.5142%" y="197" width="0.0112%" height="15" fill="rgb(252,8,32)" fg:x="52329" fg:w="47"/><text x="12.7642%" y="207.50"></text></g><g><title>storagev2::disk::writer::TopicPartitionManager::get_or_create_topic_partition::_{{closure}} (1,469 samples, 0.35%)</title><rect x="12.1763%" y="213" width="0.3513%" height="15" fill="rgb(223,20,43)" fg:x="50916" fg:w="1469"/><text x="12.4263%" y="223.50"></text></g><g><title>storagev2::disk::writer::DiskStorageWriter::new::_$u7b$$u7b$closure$u7d$$u7d$::h0d45c312d0cbc88e (.llvm.724537013135552685) (1,501 samples, 0.36%)</title><rect x="12.1703%" y="229" width="0.3590%" height="15" fill="rgb(229,81,49)" fg:x="50891" fg:w="1501"/><text x="12.4203%" y="239.50"></text></g><g><title>&lt;core::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (48 samples, 0.01%)</title><rect x="12.5371%" y="213" width="0.0115%" height="15" fill="rgb(236,28,36)" fg:x="52425" fg:w="48"/><text x="12.7871%" y="223.50"></text></g><g><title>0x7ff8067b742f (66 samples, 0.02%)</title><rect x="12.7933%" y="181" width="0.0158%" height="15" fill="rgb(249,185,26)" fg:x="53496" fg:w="66"/><text x="13.0433%" y="191.50"></text></g><g><title>0x7ff8067b622a (96 samples, 0.02%)</title><rect x="12.7897%" y="197" width="0.0230%" height="15" fill="rgb(249,174,33)" fg:x="53481" fg:w="96"/><text x="13.0397%" y="207.50"></text></g><g><title>_platform_memcmp$VARIANT$Base (194 samples, 0.05%)</title><rect x="13.9215%" y="133" width="0.0464%" height="15" fill="rgb(233,201,37)" fg:x="58214" fg:w="194"/><text x="14.1715%" y="143.50"></text></g><g><title>_$LT$std..path..PathBuf$u20$as$u20$core..cmp..PartialEq$GT$::eq::ha8ca9e43c08bccd1 (.llvm.7082537364009689419) (1,446 samples, 0.35%)</title><rect x="13.8869%" y="149" width="0.3458%" height="15" fill="rgb(221,78,26)" fg:x="58069" fg:w="1446"/><text x="14.1369%" y="159.50"></text></g><g><title>std::path::Path::components (1,078 samples, 0.26%)</title><rect x="13.9749%" y="133" width="0.2578%" height="15" fill="rgb(250,127,30)" fg:x="58437" fg:w="1078"/><text x="14.2249%" y="143.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (8,433 samples, 2.02%)</title><rect x="13.2713%" y="165" width="2.0167%" height="15" fill="rgb(230,49,44)" fg:x="55495" fg:w="8433"/><text x="13.5213%" y="175.50">&lt;..</text></g><g><title>dashmap::DashMap$LT$K$C$V$C$S$GT$::hash_u64::hbd53c616c4e8f94e (.llvm.7082537364009689419) (4,413 samples, 1.06%)</title><rect x="14.2327%" y="149" width="1.0553%" height="15" fill="rgb(229,67,23)" fg:x="59515" fg:w="4413"/><text x="14.4827%" y="159.50"></text></g><g><title>&lt;std::path::PathBuf as core::hash::Hash&gt;::hash (4,002 samples, 0.96%)</title><rect x="14.3309%" y="133" width="0.9571%" height="15" fill="rgb(249,83,47)" fg:x="59926" fg:w="4002"/><text x="14.5809%" y="143.50"></text></g><g><title>_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$::write::hb824622b973a5f90 (.llvm.7082537364009689419) (1,456 samples, 0.35%)</title><rect x="14.9398%" y="117" width="0.3482%" height="15" fill="rgb(215,43,3)" fg:x="62472" fg:w="1456"/><text x="15.1898%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,727 samples, 2.57%)</title><rect x="12.8502%" y="181" width="2.5653%" height="15" fill="rgb(238,154,13)" fg:x="53734" fg:w="10727"/><text x="13.1002%" y="191.50">&lt;c..</text></g><g><title>&lt;dashmap::iter::Iter&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (533 samples, 0.13%)</title><rect x="15.2880%" y="165" width="0.1275%" height="15" fill="rgb(219,56,2)" fg:x="63928" fg:w="533"/><text x="15.5380%" y="175.50"></text></g><g><title>0x7ff8067b93b0 (53 samples, 0.01%)</title><rect x="15.4320%" y="117" width="0.0127%" height="15" fill="rgb(233,0,4)" fg:x="64530" fg:w="53"/><text x="15.6820%" y="127.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (53 samples, 0.01%)</title><rect x="15.4320%" y="101" width="0.0127%" height="15" fill="rgb(235,30,7)" fg:x="64530" fg:w="53"/><text x="15.6820%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10,930 samples, 2.61%)</title><rect x="12.8334%" y="197" width="2.6138%" height="15" fill="rgb(250,79,13)" fg:x="53664" fg:w="10930"/><text x="13.0834%" y="207.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (133 samples, 0.03%)</title><rect x="15.4155%" y="181" width="0.0318%" height="15" fill="rgb(211,146,34)" fg:x="64461" fg:w="133"/><text x="15.6655%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow::h14a3ae5848e00c88 (.llvm.15150753405431101526) (129 samples, 0.03%)</title><rect x="15.4164%" y="165" width="0.0308%" height="15" fill="rgb(228,22,38)" fg:x="64465" fg:w="129"/><text x="15.6664%" y="175.50"></text></g><g><title>0x7ff8067e026b (122 samples, 0.03%)</title><rect x="15.4181%" y="149" width="0.0292%" height="15" fill="rgb(235,168,5)" fg:x="64472" fg:w="122"/><text x="15.6681%" y="159.50"></text></g><g><title>0x7ff8067dfb9f (122 samples, 0.03%)</title><rect x="15.4181%" y="133" width="0.0292%" height="15" fill="rgb(221,155,16)" fg:x="64472" fg:w="122"/><text x="15.6681%" y="143.50"></text></g><g><title>storagev2::disk::writer::flusher::Flusher::flush_by_state (12,230 samples, 2.92%)</title><rect x="12.5493%" y="213" width="2.9247%" height="15" fill="rgb(215,215,53)" fg:x="52476" fg:w="12230"/><text x="12.7993%" y="223.50">st..</text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::try_send (86 samples, 0.02%)</title><rect x="15.4535%" y="197" width="0.0206%" height="15" fill="rgb(223,4,10)" fg:x="64620" fg:w="86"/><text x="15.7035%" y="207.50"></text></g><g><title>storagev2::disk::writer::DiskStorageWriter::new::_$u7b$$u7b$closure$u7d$$u7d$::h71dd674823a42fca (.llvm.724537013135552685) (12,345 samples, 2.95%)</title><rect x="12.5292%" y="229" width="2.9522%" height="15" fill="rgb(234,103,6)" fg:x="52392" fg:w="12345"/><text x="12.7792%" y="239.50">sto..</text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (103 samples, 0.02%)</title><rect x="15.5083%" y="213" width="0.0246%" height="15" fill="rgb(227,97,0)" fg:x="64849" fg:w="103"/><text x="15.7583%" y="223.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (53 samples, 0.01%)</title><rect x="15.5202%" y="197" width="0.0127%" height="15" fill="rgb(234,150,53)" fg:x="64899" fg:w="53"/><text x="15.7702%" y="207.50"></text></g><g><title>__rdl_alloc (42 samples, 0.01%)</title><rect x="15.5393%" y="181" width="0.0100%" height="15" fill="rgb(228,201,54)" fg:x="64979" fg:w="42"/><text x="15.7893%" y="191.50"></text></g><g><title>0x7ff8067e0345 (42 samples, 0.01%)</title><rect x="15.5393%" y="165" width="0.0100%" height="15" fill="rgb(222,22,37)" fg:x="64979" fg:w="42"/><text x="15.7893%" y="175.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (56 samples, 0.01%)</title><rect x="15.5530%" y="165" width="0.0134%" height="15" fill="rgb(237,53,32)" fg:x="65036" fg:w="56"/><text x="15.8030%" y="175.50"></text></g><g><title>_pthread_mutex_firstfit_wake (52 samples, 0.01%)</title><rect x="15.5539%" y="149" width="0.0124%" height="15" fill="rgb(233,25,53)" fg:x="65040" fg:w="52"/><text x="15.8039%" y="159.50"></text></g><g><title>__psynch_mutexdrop (52 samples, 0.01%)</title><rect x="15.5539%" y="133" width="0.0124%" height="15" fill="rgb(210,40,34)" fg:x="65040" fg:w="52"/><text x="15.8039%" y="143.50"></text></g><g><title>__psynch_cvsignal (333 samples, 0.08%)</title><rect x="15.5821%" y="133" width="0.0796%" height="15" fill="rgb(241,220,44)" fg:x="65158" fg:w="333"/><text x="15.8321%" y="143.50"></text></g><g><title>pthread_cond_signal (341 samples, 0.08%)</title><rect x="15.5817%" y="149" width="0.0815%" height="15" fill="rgb(235,28,35)" fg:x="65156" fg:w="341"/><text x="15.8317%" y="159.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::start_seek (560 samples, 0.13%)</title><rect x="15.5329%" y="213" width="0.1339%" height="15" fill="rgb(210,56,17)" fg:x="64952" fg:w="560"/><text x="15.7829%" y="223.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (546 samples, 0.13%)</title><rect x="15.5362%" y="197" width="0.1306%" height="15" fill="rgb(224,130,29)" fg:x="64966" fg:w="546"/><text x="15.7862%" y="207.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (489 samples, 0.12%)</title><rect x="15.5499%" y="181" width="0.1169%" height="15" fill="rgb(235,212,8)" fg:x="65023" fg:w="489"/><text x="15.7999%" y="191.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (364 samples, 0.09%)</title><rect x="15.5798%" y="165" width="0.0870%" height="15" fill="rgb(223,33,50)" fg:x="65148" fg:w="364"/><text x="15.8298%" y="175.50"></text></g><g><title>__psynch_cvsignal (337 samples, 0.08%)</title><rect x="15.7130%" y="133" width="0.0806%" height="15" fill="rgb(219,149,13)" fg:x="65705" fg:w="337"/><text x="15.9630%" y="143.50"></text></g><g><title>pthread_cond_signal (345 samples, 0.08%)</title><rect x="15.7118%" y="149" width="0.0825%" height="15" fill="rgb(250,156,29)" fg:x="65700" fg:w="345"/><text x="15.9618%" y="159.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (370 samples, 0.09%)</title><rect x="15.7103%" y="165" width="0.0885%" height="15" fill="rgb(216,193,19)" fg:x="65694" fg:w="370"/><text x="15.9603%" y="175.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (555 samples, 0.13%)</title><rect x="15.6668%" y="213" width="0.1327%" height="15" fill="rgb(216,135,14)" fg:x="65512" fg:w="555"/><text x="15.9168%" y="223.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (507 samples, 0.12%)</title><rect x="15.6783%" y="197" width="0.1212%" height="15" fill="rgb(241,47,5)" fg:x="65560" fg:w="507"/><text x="15.9283%" y="207.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (465 samples, 0.11%)</title><rect x="15.6883%" y="181" width="0.1112%" height="15" fill="rgb(233,42,35)" fg:x="65602" fg:w="465"/><text x="15.9383%" y="191.50"></text></g><g><title>serde_json::ser::format_escaped_str (58 samples, 0.01%)</title><rect x="15.8098%" y="181" width="0.0139%" height="15" fill="rgb(231,13,6)" fg:x="66110" fg:w="58"/><text x="16.0598%" y="191.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (86 samples, 0.02%)</title><rect x="15.8046%" y="197" width="0.0206%" height="15" fill="rgb(207,181,40)" fg:x="66088" fg:w="86"/><text x="16.0546%" y="207.50"></text></g><g><title>storagev2::disk::meta::_::_&lt;impl serde::ser::Serialize for storagev2::disk::meta::WriterPositionPtrSnapshot&gt;::serialize (93 samples, 0.02%)</title><rect x="15.8031%" y="213" width="0.0222%" height="15" fill="rgb(254,173,49)" fg:x="66082" fg:w="93"/><text x="16.0531%" y="223.50"></text></g><g><title>&lt;&amp;mut F as core::future::future::Future&gt;::poll (45 samples, 0.01%)</title><rect x="15.8318%" y="197" width="0.0108%" height="15" fill="rgb(221,1,38)" fg:x="66202" fg:w="45"/><text x="16.0818%" y="207.50"></text></g><g><title>0x7ff8067b9d11 (61 samples, 0.01%)</title><rect x="15.8545%" y="149" width="0.0146%" height="15" fill="rgb(206,124,46)" fg:x="66297" fg:w="61"/><text x="16.1045%" y="159.50"></text></g><g><title>tokio::fs::file::Inner::poll_complete_inflight (123 samples, 0.03%)</title><rect x="15.8431%" y="197" width="0.0294%" height="15" fill="rgb(249,21,11)" fg:x="66249" fg:w="123"/><text x="16.0931%" y="207.50"></text></g><g><title>tokio::fs::file::Inner::poll_flush (121 samples, 0.03%)</title><rect x="15.8435%" y="181" width="0.0289%" height="15" fill="rgb(222,201,40)" fg:x="66251" fg:w="121"/><text x="16.0935%" y="191.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (84 samples, 0.02%)</title><rect x="15.8524%" y="165" width="0.0201%" height="15" fill="rgb(235,61,29)" fg:x="66288" fg:w="84"/><text x="16.1024%" y="175.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (48 samples, 0.01%)</title><rect x="15.8768%" y="165" width="0.0115%" height="15" fill="rgb(219,207,3)" fg:x="66390" fg:w="48"/><text x="16.1268%" y="175.50"></text></g><g><title>_pthread_mutex_firstfit_wake (48 samples, 0.01%)</title><rect x="15.8768%" y="149" width="0.0115%" height="15" fill="rgb(222,56,46)" fg:x="66390" fg:w="48"/><text x="16.1268%" y="159.50"></text></g><g><title>__psynch_mutexdrop (47 samples, 0.01%)</title><rect x="15.8770%" y="133" width="0.0112%" height="15" fill="rgb(239,76,54)" fg:x="66391" fg:w="47"/><text x="16.1270%" y="143.50"></text></g><g><title>__psynch_cvsignal (354 samples, 0.08%)</title><rect x="15.9024%" y="133" width="0.0847%" height="15" fill="rgb(231,124,27)" fg:x="66497" fg:w="354"/><text x="16.1524%" y="143.50"></text></g><g><title>pthread_cond_signal (357 samples, 0.09%)</title><rect x="15.9019%" y="149" width="0.0854%" height="15" fill="rgb(249,195,6)" fg:x="66495" fg:w="357"/><text x="16.1519%" y="159.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (384 samples, 0.09%)</title><rect x="15.8997%" y="165" width="0.0918%" height="15" fill="rgb(237,174,47)" fg:x="66486" fg:w="384"/><text x="16.1497%" y="175.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (494 samples, 0.12%)</title><rect x="15.8741%" y="181" width="0.1181%" height="15" fill="rgb(206,201,31)" fg:x="66379" fg:w="494"/><text x="16.1241%" y="191.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (43 samples, 0.01%)</title><rect x="15.9928%" y="181" width="0.0103%" height="15" fill="rgb(231,57,52)" fg:x="66875" fg:w="43"/><text x="16.2428%" y="191.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (547 samples, 0.13%)</title><rect x="15.8725%" y="197" width="0.1308%" height="15" fill="rgb(248,177,22)" fg:x="66372" fg:w="547"/><text x="16.1225%" y="207.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (55 samples, 0.01%)</title><rect x="16.0033%" y="197" width="0.0132%" height="15" fill="rgb(215,211,37)" fg:x="66919" fg:w="55"/><text x="16.2533%" y="207.50"></text></g><g><title>tokio::fs::file::File::set_len::_{{closure}} (811 samples, 0.19%)</title><rect x="15.8254%" y="213" width="0.1939%" height="15" fill="rgb(241,128,51)" fg:x="66175" fg:w="811"/><text x="16.0754%" y="223.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (48 samples, 0.01%)</title><rect x="16.0217%" y="197" width="0.0115%" height="15" fill="rgb(227,165,31)" fg:x="66996" fg:w="48"/><text x="16.2717%" y="207.50"></text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::read::_{{closure}} (51 samples, 0.01%)</title><rect x="16.0212%" y="213" width="0.0122%" height="15" fill="rgb(228,167,24)" fg:x="66994" fg:w="51"/><text x="16.2712%" y="223.50"></text></g><g><title>storagev2::disk::writer::flusher::Flusher::new::_$u7b$$u7b$closure$u7d$$u7d$::h1864b876068895a2 (.llvm.724537013135552685) (2,328 samples, 0.56%)</title><rect x="15.4815%" y="229" width="0.5567%" height="15" fill="rgb(228,143,12)" fg:x="64737" fg:w="2328"/><text x="15.7315%" y="239.50"></text></g><g><title>0x7ff8067b9d11 (44 samples, 0.01%)</title><rect x="16.1731%" y="213" width="0.0105%" height="15" fill="rgb(249,149,8)" fg:x="67629" fg:w="44"/><text x="16.4231%" y="223.50"></text></g><g><title>&lt;Unknown Address&gt; (43 samples, 0.01%)</title><rect x="16.2333%" y="213" width="0.0103%" height="15" fill="rgb(243,35,44)" fg:x="67881" fg:w="43"/><text x="16.4833%" y="223.50"></text></g><g><title>&lt;tokio_util::sync::cancellation_token::WaitForCancellationFuture as core::future::future::Future&gt;::poll (69 samples, 0.02%)</title><rect x="16.2515%" y="197" width="0.0165%" height="15" fill="rgb(246,89,9)" fg:x="67957" fg:w="69"/><text x="16.5015%" y="207.50"></text></g><g><title>tokio::sync::mpsc::list::Rx$LT$T$GT$::pop::h12c51d67c608f638 (.llvm.15150753405431101526) (82 samples, 0.02%)</title><rect x="16.2749%" y="181" width="0.0196%" height="15" fill="rgb(233,213,13)" fg:x="68055" fg:w="82"/><text x="16.5249%" y="191.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (111 samples, 0.03%)</title><rect x="16.2702%" y="197" width="0.0265%" height="15" fill="rgb(233,141,41)" fg:x="68035" fg:w="111"/><text x="16.5202%" y="207.50"></text></g><g><title>&lt;core::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (216 samples, 0.05%)</title><rect x="16.2458%" y="213" width="0.0517%" height="15" fill="rgb(239,167,4)" fg:x="67933" fg:w="216"/><text x="16.4958%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;storagev2::disk::writer::buffer::PartitionWriterBuffer::flush::{{closure}}&gt; (55 samples, 0.01%)</title><rect x="16.3096%" y="213" width="0.0132%" height="15" fill="rgb(209,217,16)" fg:x="68200" fg:w="55"/><text x="16.5596%" y="223.50"></text></g><g><title>0x7ff8067b5225 (48 samples, 0.01%)</title><rect x="17.5670%" y="197" width="0.0115%" height="15" fill="rgb(219,88,35)" fg:x="73458" fg:w="48"/><text x="17.8170%" y="207.50"></text></g><g><title>0x7ff8067b5313 (54 samples, 0.01%)</title><rect x="17.5936%" y="197" width="0.0129%" height="15" fill="rgb(220,193,23)" fg:x="73569" fg:w="54"/><text x="17.8436%" y="207.50"></text></g><g><title>0x7ff8067b742f (113 samples, 0.03%)</title><rect x="17.6259%" y="181" width="0.0270%" height="15" fill="rgb(230,90,52)" fg:x="73704" fg:w="113"/><text x="17.8759%" y="191.50"></text></g><g><title>0x7ff8067b622a (155 samples, 0.04%)</title><rect x="17.6192%" y="197" width="0.0371%" height="15" fill="rgb(252,106,19)" fg:x="73676" fg:w="155"/><text x="17.8692%" y="207.50"></text></g><g><title>0x7ff8067b6254 (44 samples, 0.01%)</title><rect x="17.6562%" y="197" width="0.0105%" height="15" fill="rgb(206,74,20)" fg:x="73831" fg:w="44"/><text x="17.9062%" y="207.50"></text></g><g><title>0x7ff8067b9d11 (102 samples, 0.02%)</title><rect x="17.6979%" y="197" width="0.0244%" height="15" fill="rgb(230,138,44)" fg:x="74005" fg:w="102"/><text x="17.9479%" y="207.50"></text></g><g><title>0x7ff8067d67df (78 samples, 0.02%)</title><rect x="17.7670%" y="197" width="0.0187%" height="15" fill="rgb(235,182,43)" fg:x="74294" fg:w="78"/><text x="18.0170%" y="207.50"></text></g><g><title>0x7ff8067d6844 (98 samples, 0.02%)</title><rect x="17.7945%" y="197" width="0.0234%" height="15" fill="rgb(242,16,51)" fg:x="74409" fg:w="98"/><text x="18.0445%" y="207.50"></text></g><g><title>0x7ff8067d68aa (123 samples, 0.03%)</title><rect x="17.8265%" y="197" width="0.0294%" height="15" fill="rgb(248,9,4)" fg:x="74543" fg:w="123"/><text x="18.0765%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (113 samples, 0.03%)</title><rect x="17.8289%" y="181" width="0.0270%" height="15" fill="rgb(210,31,22)" fg:x="74553" fg:w="113"/><text x="18.0789%" y="191.50"></text></g><g><title>0x7ff8067d6961 (63 samples, 0.02%)</title><rect x="17.8703%" y="197" width="0.0151%" height="15" fill="rgb(239,54,39)" fg:x="74726" fg:w="63"/><text x="18.1203%" y="207.50"></text></g><g><title>0x7ff8067d6984 (175 samples, 0.04%)</title><rect x="17.8889%" y="197" width="0.0419%" height="15" fill="rgb(230,99,41)" fg:x="74804" fg:w="175"/><text x="18.1389%" y="207.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (70 samples, 0.02%)</title><rect x="18.2402%" y="165" width="0.0167%" height="15" fill="rgb(253,106,12)" fg:x="76273" fg:w="70"/><text x="18.4902%" y="175.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (355 samples, 0.08%)</title><rect x="18.1790%" y="181" width="0.0849%" height="15" fill="rgb(213,46,41)" fg:x="76017" fg:w="355"/><text x="18.4290%" y="191.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (35,005 samples, 8.37%)</title><rect x="18.2685%" y="181" width="8.3712%" height="15" fill="rgb(215,133,35)" fg:x="76391" fg:w="35005"/><text x="18.5185%" y="191.50">_platform_me..</text></g><g><title>0x7ff8067b9278 (42 samples, 0.01%)</title><rect x="26.6469%" y="117" width="0.0100%" height="15" fill="rgb(213,28,5)" fg:x="111426" fg:w="42"/><text x="26.8969%" y="127.50"></text></g><g><title>0x7ff8067bfcaf (96 samples, 0.02%)</title><rect x="26.6574%" y="85" width="0.0230%" height="15" fill="rgb(215,77,49)" fg:x="111470" fg:w="96"/><text x="26.9074%" y="95.50"></text></g><g><title>0x7ff8067ce2b0 (96 samples, 0.02%)</title><rect x="26.6574%" y="69" width="0.0230%" height="15" fill="rgb(248,100,22)" fg:x="111470" fg:w="96"/><text x="26.9074%" y="79.50"></text></g><g><title>mach_vm_map (96 samples, 0.02%)</title><rect x="26.6574%" y="53" width="0.0230%" height="15" fill="rgb(208,67,9)" fg:x="111470" fg:w="96"/><text x="26.9074%" y="63.50"></text></g><g><title>_kernelrpc_mach_vm_map_trap (96 samples, 0.02%)</title><rect x="26.6574%" y="37" width="0.0230%" height="15" fill="rgb(219,133,21)" fg:x="111470" fg:w="96"/><text x="26.9074%" y="47.50"></text></g><g><title>0x7ff8067b936f (111 samples, 0.03%)</title><rect x="26.6569%" y="117" width="0.0265%" height="15" fill="rgb(246,46,29)" fg:x="111468" fg:w="111"/><text x="26.9069%" y="127.50"></text></g><g><title>0x7ff8067b62da (110 samples, 0.03%)</title><rect x="26.6571%" y="101" width="0.0263%" height="15" fill="rgb(246,185,52)" fg:x="111469" fg:w="110"/><text x="26.9071%" y="111.50"></text></g><g><title>0x7ff8067b93b0 (1,164 samples, 0.28%)</title><rect x="26.6835%" y="117" width="0.2784%" height="15" fill="rgb(252,136,11)" fg:x="111579" fg:w="1164"/><text x="26.9335%" y="127.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1,163 samples, 0.28%)</title><rect x="26.6837%" y="101" width="0.2781%" height="15" fill="rgb(219,138,53)" fg:x="111580" fg:w="1163"/><text x="26.9337%" y="111.50"></text></g><g><title>0x7ff8067bfeda (261 samples, 0.06%)</title><rect x="26.9704%" y="85" width="0.0624%" height="15" fill="rgb(211,51,23)" fg:x="112779" fg:w="261"/><text x="27.2204%" y="95.50"></text></g><g><title>0x7ff8067ce62e (260 samples, 0.06%)</title><rect x="26.9707%" y="69" width="0.0622%" height="15" fill="rgb(247,221,28)" fg:x="112780" fg:w="260"/><text x="27.2207%" y="79.50"></text></g><g><title>mach_vm_deallocate (260 samples, 0.06%)</title><rect x="26.9707%" y="53" width="0.0622%" height="15" fill="rgb(251,222,45)" fg:x="112780" fg:w="260"/><text x="27.2207%" y="63.50"></text></g><g><title>_kernelrpc_mach_vm_deallocate_trap (259 samples, 0.06%)</title><rect x="26.9709%" y="37" width="0.0619%" height="15" fill="rgb(217,162,53)" fg:x="112781" fg:w="259"/><text x="27.2209%" y="47.50"></text></g><g><title>0x7ff8067caaa5 (299 samples, 0.07%)</title><rect x="26.9635%" y="101" width="0.0715%" height="15" fill="rgb(229,93,14)" fg:x="112750" fg:w="299"/><text x="27.2135%" y="111.50"></text></g><g><title>0x7ff8067dfb9f (1,633 samples, 0.39%)</title><rect x="26.6447%" y="133" width="0.3905%" height="15" fill="rgb(209,67,49)" fg:x="111417" fg:w="1633"/><text x="26.8947%" y="143.50"></text></g><g><title>0x7ff8067b93bd (307 samples, 0.07%)</title><rect x="26.9618%" y="117" width="0.0734%" height="15" fill="rgb(213,87,29)" fg:x="112743" fg:w="307"/><text x="27.2118%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1,656 samples, 0.40%)</title><rect x="26.6397%" y="181" width="0.3960%" height="15" fill="rgb(205,151,52)" fg:x="111396" fg:w="1656"/><text x="26.8897%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow::hf558d70e8ae63120 (.llvm.3614328785669206289) (1,653 samples, 0.40%)</title><rect x="26.6404%" y="165" width="0.3953%" height="15" fill="rgb(253,215,39)" fg:x="111399" fg:w="1653"/><text x="26.8904%" y="175.50"></text></g><g><title>0x7ff8067e026b (1,635 samples, 0.39%)</title><rect x="26.6447%" y="149" width="0.3910%" height="15" fill="rgb(221,220,41)" fg:x="111417" fg:w="1635"/><text x="26.8947%" y="159.50"></text></g><g><title>0x7ff8067b734b (52 samples, 0.01%)</title><rect x="27.1689%" y="101" width="0.0124%" height="15" fill="rgb(218,133,21)" fg:x="113609" fg:w="52"/><text x="27.4189%" y="111.50"></text></g><g><title>0x7ff8067b7b46 (48 samples, 0.01%)</title><rect x="27.1926%" y="85" width="0.0115%" height="15" fill="rgb(221,193,43)" fg:x="113708" fg:w="48"/><text x="27.4426%" y="95.50"></text></g><g><title>0x7ff8067b809a (54 samples, 0.01%)</title><rect x="27.2490%" y="85" width="0.0129%" height="15" fill="rgb(240,128,52)" fg:x="113944" fg:w="54"/><text x="27.4990%" y="95.50"></text></g><g><title>0x7ff8067b80ce (86 samples, 0.02%)</title><rect x="27.2622%" y="85" width="0.0206%" height="15" fill="rgb(253,114,12)" fg:x="113999" fg:w="86"/><text x="27.5122%" y="95.50"></text></g><g><title>0x7ff8067b742f (491 samples, 0.12%)</title><rect x="27.1821%" y="101" width="0.1174%" height="15" fill="rgb(215,223,47)" fg:x="113664" fg:w="491"/><text x="27.4321%" y="111.50"></text></g><g><title>0x7ff8067bdd8f (695 samples, 0.17%)</title><rect x="27.1582%" y="117" width="0.1662%" height="15" fill="rgb(248,225,23)" fg:x="113564" fg:w="695"/><text x="27.4082%" y="127.50"></text></g><g><title>0x7ff8067ba2bc (76 samples, 0.02%)</title><rect x="27.3951%" y="85" width="0.0182%" height="15" fill="rgb(250,108,0)" fg:x="114555" fg:w="76"/><text x="27.6451%" y="95.50"></text></g><g><title>0x7ff8067c5a47 (66 samples, 0.02%)</title><rect x="27.4226%" y="85" width="0.0158%" height="15" fill="rgb(228,208,7)" fg:x="114670" fg:w="66"/><text x="27.6726%" y="95.50"></text></g><g><title>0x7ff8067b9d11 (277 samples, 0.07%)</title><rect x="27.3724%" y="101" width="0.0662%" height="15" fill="rgb(244,45,10)" fg:x="114460" fg:w="277"/><text x="27.6224%" y="111.50"></text></g><g><title>0x7ff8067be058 (425 samples, 0.10%)</title><rect x="27.3497%" y="117" width="0.1016%" height="15" fill="rgb(207,125,25)" fg:x="114365" fg:w="425"/><text x="27.5997%" y="127.50"></text></g><g><title>0x7ff8067dfd99 (1,280 samples, 0.31%)</title><rect x="27.1457%" y="133" width="0.3061%" height="15" fill="rgb(210,195,18)" fg:x="113512" fg:w="1280"/><text x="27.3957%" y="143.50"></text></g><g><title>0x7ff8067e0345 (1,439 samples, 0.34%)</title><rect x="27.1115%" y="149" width="0.3441%" height="15" fill="rgb(249,80,12)" fg:x="113369" fg:w="1439"/><text x="27.3615%" y="159.50"></text></g><g><title>__rdl_alloc (1,470 samples, 0.35%)</title><rect x="27.1055%" y="165" width="0.3515%" height="15" fill="rgb(221,65,9)" fg:x="113344" fg:w="1470"/><text x="27.3555%" y="175.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (700 samples, 0.17%)</title><rect x="27.5305%" y="149" width="0.1674%" height="15" fill="rgb(235,49,36)" fg:x="115121" fg:w="700"/><text x="27.7805%" y="159.50"></text></g><g><title>_pthread_mutex_firstfit_wake (670 samples, 0.16%)</title><rect x="27.5377%" y="133" width="0.1602%" height="15" fill="rgb(225,32,20)" fg:x="115151" fg:w="670"/><text x="27.7877%" y="143.50"></text></g><g><title>__psynch_mutexdrop (660 samples, 0.16%)</title><rect x="27.5401%" y="117" width="0.1578%" height="15" fill="rgb(215,141,46)" fg:x="115161" fg:w="660"/><text x="27.7901%" y="127.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (276 samples, 0.07%)</title><rect x="27.6979%" y="149" width="0.0660%" height="15" fill="rgb(250,160,47)" fg:x="115821" fg:w="276"/><text x="27.9479%" y="159.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (72 samples, 0.02%)</title><rect x="27.7467%" y="133" width="0.0172%" height="15" fill="rgb(216,222,40)" fg:x="116025" fg:w="72"/><text x="27.9967%" y="143.50"></text></g><g><title>cthread_yield (167 samples, 0.04%)</title><rect x="27.7830%" y="133" width="0.0399%" height="15" fill="rgb(234,217,39)" fg:x="116177" fg:w="167"/><text x="28.0330%" y="143.50"></text></g><g><title>swtch_pri (159 samples, 0.04%)</title><rect x="27.7850%" y="117" width="0.0380%" height="15" fill="rgb(207,178,40)" fg:x="116185" fg:w="159"/><text x="28.0350%" y="127.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (250 samples, 0.06%)</title><rect x="27.7639%" y="149" width="0.0598%" height="15" fill="rgb(221,136,13)" fg:x="116097" fg:w="250"/><text x="28.0139%" y="159.50"></text></g><g><title>__psynch_cvsignal (6,427 samples, 1.54%)</title><rect x="27.8643%" y="117" width="1.5370%" height="15" fill="rgb(249,199,10)" fg:x="116517" fg:w="6427"/><text x="28.1143%" y="127.50"></text></g><g><title>pthread_cond_signal (6,559 samples, 1.57%)</title><rect x="27.8493%" y="133" width="1.5685%" height="15" fill="rgb(249,222,13)" fg:x="116454" fg:w="6559"/><text x="28.0993%" y="143.50"></text></g><g><title>_pthread_cond_updateval (69 samples, 0.02%)</title><rect x="29.4013%" y="117" width="0.0165%" height="15" fill="rgb(244,185,38)" fg:x="122944" fg:w="69"/><text x="29.6513%" y="127.50"></text></g><g><title>pthread_mutex_lock (113 samples, 0.03%)</title><rect x="29.4178%" y="133" width="0.0270%" height="15" fill="rgb(236,202,9)" fg:x="123013" fg:w="113"/><text x="29.6678%" y="143.50"></text></g><g><title>0x7ff80683f8c6 (43 samples, 0.01%)</title><rect x="29.4487%" y="101" width="0.0103%" height="15" fill="rgb(250,229,37)" fg:x="123142" fg:w="43"/><text x="29.6987%" y="111.50"></text></g><g><title>mach_timebase_info (43 samples, 0.01%)</title><rect x="29.4487%" y="85" width="0.0103%" height="15" fill="rgb(206,174,23)" fg:x="123142" fg:w="43"/><text x="29.6987%" y="95.50"></text></g><g><title>0x7ff80684e86d (105 samples, 0.03%)</title><rect x="29.4482%" y="117" width="0.0251%" height="15" fill="rgb(211,33,43)" fg:x="123140" fg:w="105"/><text x="29.6982%" y="127.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (121 samples, 0.03%)</title><rect x="29.4451%" y="133" width="0.0289%" height="15" fill="rgb(245,58,50)" fg:x="123127" fg:w="121"/><text x="29.6951%" y="143.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (6,905 samples, 1.65%)</title><rect x="27.8237%" y="149" width="1.6513%" height="15" fill="rgb(244,68,36)" fg:x="116347" fg:w="6905"/><text x="28.0737%" y="159.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (10,245 samples, 2.45%)</title><rect x="27.0357%" y="181" width="2.4500%" height="15" fill="rgb(232,229,15)" fg:x="113052" fg:w="10245"/><text x="27.2857%" y="191.50">to..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (8,454 samples, 2.02%)</title><rect x="27.4640%" y="165" width="2.0217%" height="15" fill="rgb(254,30,23)" fg:x="114843" fg:w="8454"/><text x="27.7140%" y="175.50">t..</text></g><g><title>_platform_bzero$VARIANT$Haswell (73 samples, 0.02%)</title><rect x="29.5235%" y="149" width="0.0175%" height="15" fill="rgb(235,160,14)" fg:x="123455" fg:w="73"/><text x="29.7735%" y="159.50"></text></g><g><title>0x7ff8067b9b8b (102 samples, 0.02%)</title><rect x="29.5235%" y="165" width="0.0244%" height="15" fill="rgb(212,155,44)" fg:x="123455" fg:w="102"/><text x="29.7735%" y="175.50"></text></g><g><title>0x7ff8067b9ba8 (53 samples, 0.01%)</title><rect x="29.5486%" y="165" width="0.0127%" height="15" fill="rgb(226,2,50)" fg:x="123560" fg:w="53"/><text x="29.7986%" y="175.50"></text></g><g><title>0x7ff8067bac2e (95 samples, 0.02%)</title><rect x="29.5886%" y="133" width="0.0227%" height="15" fill="rgb(234,177,6)" fg:x="123727" fg:w="95"/><text x="29.8386%" y="143.50"></text></g><g><title>0x7ff8067ba0f3 (173 samples, 0.04%)</title><rect x="29.5797%" y="149" width="0.0414%" height="15" fill="rgb(217,24,9)" fg:x="123690" fg:w="173"/><text x="29.8297%" y="159.50"></text></g><g><title>0x7ff8067bac2e (59 samples, 0.01%)</title><rect x="29.6462%" y="133" width="0.0141%" height="15" fill="rgb(220,13,46)" fg:x="123968" fg:w="59"/><text x="29.8962%" y="143.50"></text></g><g><title>0x7ff8067ba222 (167 samples, 0.04%)</title><rect x="29.6374%" y="149" width="0.0399%" height="15" fill="rgb(239,221,27)" fg:x="123931" fg:w="167"/><text x="29.8874%" y="159.50"></text></g><g><title>0x7ff8067ba8a7 (59 samples, 0.01%)</title><rect x="29.6936%" y="133" width="0.0141%" height="15" fill="rgb(222,198,25)" fg:x="124166" fg:w="59"/><text x="29.9436%" y="143.50"></text></g><g><title>0x7ff8067ba2bc (158 samples, 0.04%)</title><rect x="29.6787%" y="149" width="0.0378%" height="15" fill="rgb(211,99,13)" fg:x="124104" fg:w="158"/><text x="29.9287%" y="159.50"></text></g><g><title>0x7ff8067c5a47 (106 samples, 0.03%)</title><rect x="29.7304%" y="149" width="0.0253%" height="15" fill="rgb(232,111,31)" fg:x="124320" fg:w="106"/><text x="29.9804%" y="159.50"></text></g><g><title>0x7ff8067b9d11 (804 samples, 0.19%)</title><rect x="29.5637%" y="165" width="0.1923%" height="15" fill="rgb(245,82,37)" fg:x="123623" fg:w="804"/><text x="29.8137%" y="175.50"></text></g><g><title>0x7ff8067b9d6d (92 samples, 0.02%)</title><rect x="29.7665%" y="165" width="0.0220%" height="15" fill="rgb(227,149,46)" fg:x="124471" fg:w="92"/><text x="30.0165%" y="175.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (1,439 samples, 0.34%)</title><rect x="29.4857%" y="181" width="0.3441%" height="15" fill="rgb(218,36,50)" fg:x="123297" fg:w="1439"/><text x="29.7357%" y="191.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (47 samples, 0.01%)</title><rect x="29.8186%" y="165" width="0.0112%" height="15" fill="rgb(226,80,48)" fg:x="124689" fg:w="47"/><text x="30.0686%" y="175.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (49,686 samples, 11.88%)</title><rect x="17.9482%" y="197" width="11.8821%" height="15" fill="rgb(238,224,15)" fg:x="75052" fg:w="49686"/><text x="18.1982%" y="207.50">&lt;tokio::fs::file::..</text></g><g><title>bytes::bytes::owned_drop (258 samples, 0.06%)</title><rect x="29.8588%" y="197" width="0.0617%" height="15" fill="rgb(241,136,10)" fg:x="124857" fg:w="258"/><text x="30.1088%" y="207.50"></text></g><g><title>bytes::bytes::shared_drop::h2f4486fd7f0a6f4b (.llvm.6858511044588184240) (235 samples, 0.06%)</title><rect x="29.9205%" y="197" width="0.0562%" height="15" fill="rgb(208,32,45)" fg:x="125115" fg:w="235"/><text x="30.1705%" y="207.50"></text></g><g><title>0x7ff8067b8982 (66 samples, 0.02%)</title><rect x="30.6334%" y="181" width="0.0158%" height="15" fill="rgb(207,135,9)" fg:x="128096" fg:w="66"/><text x="30.8834%" y="191.50"></text></g><g><title>0x7ff8067b8b90 (54 samples, 0.01%)</title><rect x="30.6626%" y="181" width="0.0129%" height="15" fill="rgb(206,86,44)" fg:x="128218" fg:w="54"/><text x="30.9126%" y="191.50"></text></g><g><title>0x7ff8067b8c70 (59 samples, 0.01%)</title><rect x="30.6764%" y="181" width="0.0141%" height="15" fill="rgb(245,177,15)" fg:x="128276" fg:w="59"/><text x="30.9264%" y="191.50"></text></g><g><title>0x7ff8067b8ca8 (45 samples, 0.01%)</title><rect x="30.6915%" y="181" width="0.0108%" height="15" fill="rgb(206,64,50)" fg:x="128339" fg:w="45"/><text x="30.9415%" y="191.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::pop (3,077 samples, 0.74%)</title><rect x="29.9839%" y="197" width="0.7358%" height="15" fill="rgb(234,36,40)" fg:x="125380" fg:w="3077"/><text x="30.2339%" y="207.50"></text></g><g><title>0x7ff80683f8c6 (46 samples, 0.01%)</title><rect x="30.7659%" y="165" width="0.0110%" height="15" fill="rgb(213,64,8)" fg:x="128650" fg:w="46"/><text x="31.0159%" y="175.50"></text></g><g><title>mach_timebase_info (45 samples, 0.01%)</title><rect x="30.7661%" y="149" width="0.0108%" height="15" fill="rgb(210,75,36)" fg:x="128651" fg:w="45"/><text x="31.0161%" y="159.50"></text></g><g><title>0x7ff80683f91d (248 samples, 0.06%)</title><rect x="30.7821%" y="165" width="0.0593%" height="15" fill="rgb(229,88,21)" fg:x="128718" fg:w="248"/><text x="31.0321%" y="175.50"></text></g><g><title>mach_absolute_time (248 samples, 0.06%)</title><rect x="30.7821%" y="149" width="0.0593%" height="15" fill="rgb(252,204,47)" fg:x="128718" fg:w="248"/><text x="31.0321%" y="159.50"></text></g><g><title>0x7ff80683f93d (129 samples, 0.03%)</title><rect x="30.8450%" y="165" width="0.0308%" height="15" fill="rgb(208,77,27)" fg:x="128981" fg:w="129"/><text x="31.0950%" y="175.50"></text></g><g><title>0x7ff80684e86d (486 samples, 0.12%)</title><rect x="30.7616%" y="181" width="0.1162%" height="15" fill="rgb(221,76,26)" fg:x="128632" fg:w="486"/><text x="31.0116%" y="191.50"></text></g><g><title>0x7ff806846923 (446 samples, 0.11%)</title><rect x="30.8955%" y="165" width="0.1067%" height="15" fill="rgb(225,139,18)" fg:x="129192" fg:w="446"/><text x="31.1455%" y="175.50"></text></g><g><title>__commpage_gettimeofday_internal (442 samples, 0.11%)</title><rect x="30.8965%" y="149" width="0.1057%" height="15" fill="rgb(230,137,11)" fg:x="129196" fg:w="442"/><text x="31.1465%" y="159.50"></text></g><g><title>mach_absolute_time (302 samples, 0.07%)</title><rect x="30.9299%" y="133" width="0.0722%" height="15" fill="rgb(212,28,1)" fg:x="129336" fg:w="302"/><text x="31.1799%" y="143.50"></text></g><g><title>0x7ff80684e8b3 (542 samples, 0.13%)</title><rect x="30.8890%" y="181" width="0.1296%" height="15" fill="rgb(248,164,17)" fg:x="129165" fg:w="542"/><text x="31.1390%" y="191.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1,293 samples, 0.31%)</title><rect x="30.7197%" y="197" width="0.3092%" height="15" fill="rgb(222,171,42)" fg:x="128457" fg:w="1293"/><text x="30.9697%" y="207.50"></text></g><g><title>0x7ff80683f8c6 (186 samples, 0.04%)</title><rect x="31.0392%" y="149" width="0.0445%" height="15" fill="rgb(243,84,45)" fg:x="129793" fg:w="186"/><text x="31.2892%" y="159.50"></text></g><g><title>mach_timebase_info (186 samples, 0.04%)</title><rect x="31.0392%" y="133" width="0.0445%" height="15" fill="rgb(252,49,23)" fg:x="129793" fg:w="186"/><text x="31.2892%" y="143.50"></text></g><g><title>0x7ff80683f91d (70 samples, 0.02%)</title><rect x="31.0851%" y="149" width="0.0167%" height="15" fill="rgb(215,19,7)" fg:x="129985" fg:w="70"/><text x="31.3351%" y="159.50"></text></g><g><title>mach_absolute_time (70 samples, 0.02%)</title><rect x="31.0851%" y="133" width="0.0167%" height="15" fill="rgb(238,81,41)" fg:x="129985" fg:w="70"/><text x="31.3351%" y="143.50"></text></g><g><title>0x7ff80683f93d (42 samples, 0.01%)</title><rect x="31.1019%" y="149" width="0.0100%" height="15" fill="rgb(210,199,37)" fg:x="130055" fg:w="42"/><text x="31.3519%" y="159.50"></text></g><g><title>0x7ff80684e86d (314 samples, 0.08%)</title><rect x="31.0380%" y="165" width="0.0751%" height="15" fill="rgb(244,192,49)" fg:x="129788" fg:w="314"/><text x="31.2880%" y="175.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (349 samples, 0.08%)</title><rect x="31.0328%" y="181" width="0.0835%" height="15" fill="rgb(226,211,11)" fg:x="129766" fg:w="349"/><text x="31.2828%" y="191.50"></text></g><g><title>std::time::Instant::elapsed (373 samples, 0.09%)</title><rect x="31.0289%" y="197" width="0.0892%" height="15" fill="rgb(236,162,54)" fg:x="129750" fg:w="373"/><text x="31.2789%" y="207.50"></text></g><g><title>std::time::SystemTime::duration_since (79 samples, 0.02%)</title><rect x="31.1181%" y="197" width="0.0189%" height="15" fill="rgb(220,229,9)" fg:x="130123" fg:w="79"/><text x="31.3681%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (46 samples, 0.01%)</title><rect x="31.1260%" y="181" width="0.0110%" height="15" fill="rgb(250,87,22)" fg:x="130156" fg:w="46"/><text x="31.3760%" y="191.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked::h75cb40919419cfec (.llvm.6710397505999662456) (70 samples, 0.02%)</title><rect x="31.1373%" y="197" width="0.0167%" height="15" fill="rgb(239,43,17)" fg:x="130203" fg:w="70"/><text x="31.3873%" y="207.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (82 samples, 0.02%)</title><rect x="31.2748%" y="181" width="0.0196%" height="15" fill="rgb(231,177,25)" fg:x="130778" fg:w="82"/><text x="31.5248%" y="191.50"></text></g><g><title>storagev2::disk::writer::buffer::PartitionWriterBuffer::flush::_{{closure}} (62,618 samples, 14.97%)</title><rect x="16.3237%" y="213" width="14.9747%" height="15" fill="rgb(219,179,1)" fg:x="68259" fg:w="62618"/><text x="16.5737%" y="223.50">storagev2::disk::writer..</text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::write::_{{closure}} (604 samples, 0.14%)</title><rect x="31.1540%" y="197" width="0.1444%" height="15" fill="rgb(238,219,53)" fg:x="130273" fg:w="604"/><text x="31.4040%" y="207.50"></text></g><g><title>storagev2::disk::writer::flusher::Flusher::new::_$u7b$$u7b$closure$u7d$$u7d$::hfdd5c17341b69c6f (.llvm.724537013135552685) (63,843 samples, 15.27%)</title><rect x="16.0382%" y="229" width="15.2677%" height="15" fill="rgb(232,167,36)" fg:x="67065" fg:w="63843"/><text x="16.2882%" y="239.50">storagev2::disk::writer..</text></g><g><title>0x7ff8067b7306 (128 samples, 0.03%)</title><rect x="31.6763%" y="197" width="0.0306%" height="15" fill="rgb(244,19,51)" fg:x="132457" fg:w="128"/><text x="31.9263%" y="207.50"></text></g><g><title>0x7ff8067b734b (102 samples, 0.02%)</title><rect x="31.7129%" y="197" width="0.0244%" height="15" fill="rgb(224,6,22)" fg:x="132610" fg:w="102"/><text x="31.9629%" y="207.50"></text></g><g><title>0x7ff8067b809a (49 samples, 0.01%)</title><rect x="31.7973%" y="181" width="0.0117%" height="15" fill="rgb(224,145,5)" fg:x="132963" fg:w="49"/><text x="32.0473%" y="191.50"></text></g><g><title>0x7ff8067b80ce (131 samples, 0.03%)</title><rect x="31.8112%" y="181" width="0.0313%" height="15" fill="rgb(234,130,49)" fg:x="133021" fg:w="131"/><text x="32.0612%" y="191.50"></text></g><g><title>0x7ff8067b742f (593 samples, 0.14%)</title><rect x="31.7423%" y="197" width="0.1418%" height="15" fill="rgb(254,6,2)" fg:x="132733" fg:w="593"/><text x="31.9923%" y="207.50"></text></g><g><title>0x7ff8067b76f2 (116 samples, 0.03%)</title><rect x="31.8860%" y="197" width="0.0277%" height="15" fill="rgb(208,96,46)" fg:x="133334" fg:w="116"/><text x="32.1360%" y="207.50"></text></g><g><title>0x7ff8067b622a (1,142 samples, 0.27%)</title><rect x="31.6739%" y="213" width="0.2731%" height="15" fill="rgb(239,3,39)" fg:x="132447" fg:w="1142"/><text x="31.9239%" y="223.50"></text></g><g><title>0x7ff8067cdfda (77 samples, 0.02%)</title><rect x="31.9286%" y="197" width="0.0184%" height="15" fill="rgb(233,210,1)" fg:x="133512" fg:w="77"/><text x="32.1786%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (112 samples, 0.03%)</title><rect x="31.9721%" y="197" width="0.0268%" height="15" fill="rgb(244,137,37)" fg:x="133694" fg:w="112"/><text x="32.2221%" y="207.50"></text></g><g><title>0x7ff8067b9b8b (166 samples, 0.04%)</title><rect x="31.9721%" y="213" width="0.0397%" height="15" fill="rgb(240,136,2)" fg:x="133694" fg:w="166"/><text x="32.2221%" y="223.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (54 samples, 0.01%)</title><rect x="31.9989%" y="197" width="0.0129%" height="15" fill="rgb(239,18,37)" fg:x="133806" fg:w="54"/><text x="32.2489%" y="207.50"></text></g><g><title>0x7ff8067b9ba8 (168 samples, 0.04%)</title><rect x="32.0135%" y="213" width="0.0402%" height="15" fill="rgb(218,185,22)" fg:x="133867" fg:w="168"/><text x="32.2635%" y="223.50"></text></g><g><title>0x7ff8067ba0f3 (132 samples, 0.03%)</title><rect x="32.0965%" y="197" width="0.0316%" height="15" fill="rgb(225,218,4)" fg:x="134214" fg:w="132"/><text x="32.3465%" y="207.50"></text></g><g><title>0x7ff8067ba2bc (133 samples, 0.03%)</title><rect x="32.1364%" y="197" width="0.0318%" height="15" fill="rgb(230,182,32)" fg:x="134381" fg:w="133"/><text x="32.3864%" y="207.50"></text></g><g><title>0x7ff8067b9d11 (565 samples, 0.14%)</title><rect x="32.0644%" y="213" width="0.1351%" height="15" fill="rgb(242,56,43)" fg:x="134080" fg:w="565"/><text x="32.3144%" y="223.50"></text></g><g><title>0x7ff8067b9d24 (91 samples, 0.02%)</title><rect x="32.2010%" y="213" width="0.0218%" height="15" fill="rgb(233,99,24)" fg:x="134651" fg:w="91"/><text x="32.4510%" y="223.50"></text></g><g><title>&lt;futures_timer::native::delay::Delay as core::future::future::Future&gt;::poll (400 samples, 0.10%)</title><rect x="32.3438%" y="213" width="0.0957%" height="15" fill="rgb(234,209,42)" fg:x="135248" fg:w="400"/><text x="32.5938%" y="223.50"></text></g><g><title>0x7ff8067f724b (1,481 samples, 0.35%)</title><rect x="32.5939%" y="165" width="0.3542%" height="15" fill="rgb(227,7,12)" fg:x="136294" fg:w="1481"/><text x="32.8439%" y="175.50"></text></g><g><title>semaphore_signal_trap (1,470 samples, 0.35%)</title><rect x="32.5965%" y="149" width="0.3515%" height="15" fill="rgb(245,203,43)" fg:x="136305" fg:w="1470"/><text x="32.8465%" y="159.50"></text></g><g><title>0x7ff8067f76f7 (1,515 samples, 0.36%)</title><rect x="32.5927%" y="181" width="0.3623%" height="15" fill="rgb(238,205,33)" fg:x="136289" fg:w="1515"/><text x="32.8427%" y="191.50"></text></g><g><title>futures_timer::native::global::raw_wake (1,603 samples, 0.38%)</title><rect x="32.5788%" y="197" width="0.3833%" height="15" fill="rgb(231,56,7)" fg:x="136231" fg:w="1603"/><text x="32.8288%" y="207.50"></text></g><g><title>pthread_mutex_unlock (69 samples, 0.02%)</title><rect x="32.9622%" y="197" width="0.0165%" height="15" fill="rgb(244,186,29)" fg:x="137834" fg:w="69"/><text x="33.2122%" y="207.50"></text></g><g><title>&lt;futures_timer::native::delay::Delay as core::ops::drop::Drop&gt;::drop (2,628 samples, 0.63%)</title><rect x="32.4394%" y="213" width="0.6285%" height="15" fill="rgb(234,111,31)" fg:x="135648" fg:w="2628"/><text x="32.6894%" y="223.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (373 samples, 0.09%)</title><rect x="32.9787%" y="197" width="0.0892%" height="15" fill="rgb(241,149,10)" fg:x="137903" fg:w="373"/><text x="33.2287%" y="207.50"></text></g><g><title>pthread_mutex_lock (367 samples, 0.09%)</title><rect x="32.9801%" y="181" width="0.0878%" height="15" fill="rgb(249,206,44)" fg:x="137909" fg:w="367"/><text x="33.2301%" y="191.50"></text></g><g><title>&lt;futures_timer::native::timer::TimerHandle as core::default::Default&gt;::default (173 samples, 0.04%)</title><rect x="33.0679%" y="213" width="0.0414%" height="15" fill="rgb(251,153,30)" fg:x="138276" fg:w="173"/><text x="33.3179%" y="223.50"></text></g><g><title>&lt;governor::clock::quanta::QuantaClock as governor::clock::Clock&gt;::now (104 samples, 0.02%)</title><rect x="33.1093%" y="213" width="0.0249%" height="15" fill="rgb(239,152,38)" fg:x="138449" fg:w="104"/><text x="33.3593%" y="223.50"></text></g><g><title>&lt;governor::state::in_memory::InMemoryState as governor::state::StateStore&gt;::measure_and_replace (200 samples, 0.05%)</title><rect x="33.1497%" y="213" width="0.0478%" height="15" fill="rgb(249,139,47)" fg:x="138618" fg:w="200"/><text x="33.3997%" y="223.50"></text></g><g><title>0x7ff8067b51fe (58 samples, 0.01%)</title><rect x="33.9403%" y="197" width="0.0139%" height="15" fill="rgb(244,64,35)" fg:x="141924" fg:w="58"/><text x="34.1903%" y="207.50"></text></g><g><title>0x7ff8067b5208 (213 samples, 0.05%)</title><rect x="33.9544%" y="197" width="0.0509%" height="15" fill="rgb(216,46,15)" fg:x="141983" fg:w="213"/><text x="34.2044%" y="207.50"></text></g><g><title>0x7ff8067b5225 (97 samples, 0.02%)</title><rect x="34.0125%" y="197" width="0.0232%" height="15" fill="rgb(250,74,19)" fg:x="142226" fg:w="97"/><text x="34.2625%" y="207.50"></text></g><g><title>0x7ff8067b523b (121 samples, 0.03%)</title><rect x="34.0419%" y="197" width="0.0289%" height="15" fill="rgb(249,42,33)" fg:x="142349" fg:w="121"/><text x="34.2919%" y="207.50"></text></g><g><title>0x7ff8067b52ef (52 samples, 0.01%)</title><rect x="34.0981%" y="197" width="0.0124%" height="15" fill="rgb(242,149,17)" fg:x="142584" fg:w="52"/><text x="34.3481%" y="207.50"></text></g><g><title>0x7ff8067b5313 (612 samples, 0.15%)</title><rect x="34.1170%" y="197" width="0.1464%" height="15" fill="rgb(244,29,21)" fg:x="142663" fg:w="612"/><text x="34.3670%" y="207.50"></text></g><g><title>0x7ff8067b5330 (252 samples, 0.06%)</title><rect x="34.2717%" y="197" width="0.0603%" height="15" fill="rgb(220,130,37)" fg:x="143310" fg:w="252"/><text x="34.5217%" y="207.50"></text></g><g><title>0x7ff8067d6607 (59 samples, 0.01%)</title><rect x="34.3342%" y="181" width="0.0141%" height="15" fill="rgb(211,67,2)" fg:x="143571" fg:w="59"/><text x="34.5842%" y="191.50"></text></g><g><title>0x7ff8067b53c7 (66 samples, 0.02%)</title><rect x="34.3339%" y="197" width="0.0158%" height="15" fill="rgb(235,68,52)" fg:x="143570" fg:w="66"/><text x="34.5839%" y="207.50"></text></g><g><title>0x7ff8067d6844 (59 samples, 0.01%)</title><rect x="34.3944%" y="197" width="0.0141%" height="15" fill="rgb(246,142,3)" fg:x="143823" fg:w="59"/><text x="34.6444%" y="207.50"></text></g><g><title>0x7ff8067d68aa (68 samples, 0.02%)</title><rect x="34.4121%" y="197" width="0.0163%" height="15" fill="rgb(241,25,7)" fg:x="143897" fg:w="68"/><text x="34.6621%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (62 samples, 0.01%)</title><rect x="34.4135%" y="181" width="0.0148%" height="15" fill="rgb(242,119,39)" fg:x="143903" fg:w="62"/><text x="34.6635%" y="191.50"></text></g><g><title>0x7ff8067d6984 (90 samples, 0.02%)</title><rect x="34.4480%" y="197" width="0.0215%" height="15" fill="rgb(241,98,45)" fg:x="144047" fg:w="90"/><text x="34.6980%" y="207.50"></text></g><g><title>_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$::write::hb824622b973a5f90 (.llvm.7082537364009689419) (278 samples, 0.07%)</title><rect x="34.8210%" y="181" width="0.0665%" height="15" fill="rgb(254,28,30)" fg:x="145607" fg:w="278"/><text x="35.0710%" y="191.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (2,433 samples, 0.58%)</title><rect x="34.4862%" y="197" width="0.5818%" height="15" fill="rgb(241,142,54)" fg:x="144207" fg:w="2433"/><text x="34.7362%" y="207.50"></text></g><g><title>_platform_memcmp$VARIANT$Base (755 samples, 0.18%)</title><rect x="34.8875%" y="181" width="0.1806%" height="15" fill="rgb(222,85,15)" fg:x="145885" fg:w="755"/><text x="35.1375%" y="191.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (925 samples, 0.22%)</title><rect x="35.0762%" y="197" width="0.2212%" height="15" fill="rgb(210,85,47)" fg:x="146674" fg:w="925"/><text x="35.3262%" y="207.50"></text></g><g><title>bytes::bytes::shared_drop::h2f4486fd7f0a6f4b (.llvm.6858511044588184240) (136 samples, 0.03%)</title><rect x="35.2986%" y="197" width="0.0325%" height="15" fill="rgb(224,206,25)" fg:x="147604" fg:w="136"/><text x="35.5486%" y="207.50"></text></g><g><title>0x7ff8067d6844 (48 samples, 0.01%)</title><rect x="35.5069%" y="181" width="0.0115%" height="15" fill="rgb(243,201,19)" fg:x="148475" fg:w="48"/><text x="35.7569%" y="191.50"></text></g><g><title>0x7ff8067d68aa (68 samples, 0.02%)</title><rect x="35.5208%" y="181" width="0.0163%" height="15" fill="rgb(236,59,4)" fg:x="148533" fg:w="68"/><text x="35.7708%" y="191.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (61 samples, 0.01%)</title><rect x="35.5225%" y="165" width="0.0146%" height="15" fill="rgb(254,179,45)" fg:x="148540" fg:w="61"/><text x="35.7725%" y="175.50"></text></g><g><title>0x7ff8067d6984 (68 samples, 0.02%)</title><rect x="35.5593%" y="181" width="0.0163%" height="15" fill="rgb(226,14,10)" fg:x="148694" fg:w="68"/><text x="35.8093%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;storagev2::disk::writer::buffer::PartitionWriterBuffer&gt; (1,045 samples, 0.25%)</title><rect x="35.3311%" y="197" width="0.2499%" height="15" fill="rgb(244,27,41)" fg:x="147740" fg:w="1045"/><text x="35.5811%" y="207.50"></text></g><g><title>0x7ff8067b6b32 (117 samples, 0.03%)</title><rect x="36.0428%" y="149" width="0.0280%" height="15" fill="rgb(235,35,32)" fg:x="150716" fg:w="117"/><text x="36.2928%" y="159.50"></text></g><g><title>0x7ff8067baee4 (241 samples, 0.06%)</title><rect x="36.0835%" y="133" width="0.0576%" height="15" fill="rgb(218,68,31)" fg:x="150886" fg:w="241"/><text x="36.3335%" y="143.50"></text></g><g><title>0x7ff8067b6c33 (251 samples, 0.06%)</title><rect x="36.0825%" y="149" width="0.0600%" height="15" fill="rgb(207,120,37)" fg:x="150882" fg:w="251"/><text x="36.3325%" y="159.50"></text></g><g><title>0x7ff8067b643d (437 samples, 0.10%)</title><rect x="36.0419%" y="165" width="0.1045%" height="15" fill="rgb(227,98,0)" fg:x="150712" fg:w="437"/><text x="36.2919%" y="175.50"></text></g><g><title>0x7ff8067b6254 (493 samples, 0.12%)</title><rect x="36.0318%" y="181" width="0.1179%" height="15" fill="rgb(207,7,3)" fg:x="150670" fg:w="493"/><text x="36.2818%" y="191.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::push (2,432 samples, 0.58%)</title><rect x="35.5810%" y="197" width="0.5816%" height="15" fill="rgb(206,98,19)" fg:x="148785" fg:w="2432"/><text x="35.8310%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (49 samples, 0.01%)</title><rect x="36.1509%" y="181" width="0.0117%" height="15" fill="rgb(217,5,26)" fg:x="151168" fg:w="49"/><text x="36.4009%" y="191.50"></text></g><g><title>_platform_memcmp$VARIANT$Base (68 samples, 0.02%)</title><rect x="36.5694%" y="149" width="0.0163%" height="15" fill="rgb(235,190,38)" fg:x="152918" fg:w="68"/><text x="36.8194%" y="159.50"></text></g><g><title>_$LT$std..path..PathBuf$u20$as$u20$core..cmp..PartialEq$GT$::eq::ha8ca9e43c08bccd1 (.llvm.7082537364009689419) (671 samples, 0.16%)</title><rect x="36.5551%" y="165" width="0.1605%" height="15" fill="rgb(247,86,24)" fg:x="152858" fg:w="671"/><text x="36.8051%" y="175.50"></text></g><g><title>std::path::Path::components (529 samples, 0.13%)</title><rect x="36.5890%" y="149" width="0.1265%" height="15" fill="rgb(205,101,16)" fg:x="153000" fg:w="529"/><text x="36.8390%" y="159.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get_mut (3,564 samples, 0.85%)</title><rect x="36.2081%" y="181" width="0.8523%" height="15" fill="rgb(246,168,33)" fg:x="151407" fg:w="3564"/><text x="36.4581%" y="191.50"></text></g><g><title>dashmap::DashMap$LT$K$C$V$C$S$GT$::hash_u64::hbd53c616c4e8f94e (.llvm.7082537364009689419) (1,442 samples, 0.34%)</title><rect x="36.7155%" y="165" width="0.3448%" height="15" fill="rgb(231,114,1)" fg:x="153529" fg:w="1442"/><text x="36.9655%" y="175.50"></text></g><g><title>&lt;std::path::PathBuf as core::hash::Hash&gt;::hash (1,211 samples, 0.29%)</title><rect x="36.7708%" y="149" width="0.2896%" height="15" fill="rgb(207,184,53)" fg:x="153760" fg:w="1211"/><text x="37.0208%" y="159.50"></text></g><g><title>_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$::write::hb824622b973a5f90 (.llvm.7082537364009689419) (738 samples, 0.18%)</title><rect x="36.8839%" y="133" width="0.1765%" height="15" fill="rgb(224,95,51)" fg:x="154233" fg:w="738"/><text x="37.1339%" y="143.50"></text></g><g><title>0x7ff80683f8c6 (58 samples, 0.01%)</title><rect x="37.1068%" y="149" width="0.0139%" height="15" fill="rgb(212,188,45)" fg:x="155165" fg:w="58"/><text x="37.3568%" y="159.50"></text></g><g><title>mach_timebase_info (58 samples, 0.01%)</title><rect x="37.1068%" y="133" width="0.0139%" height="15" fill="rgb(223,154,38)" fg:x="155165" fg:w="58"/><text x="37.3568%" y="143.50"></text></g><g><title>0x7ff80683f91d (575 samples, 0.14%)</title><rect x="37.1281%" y="149" width="0.1375%" height="15" fill="rgb(251,22,52)" fg:x="155254" fg:w="575"/><text x="37.3781%" y="159.50"></text></g><g><title>mach_absolute_time (574 samples, 0.14%)</title><rect x="37.1283%" y="133" width="0.1373%" height="15" fill="rgb(229,209,22)" fg:x="155255" fg:w="574"/><text x="37.3783%" y="143.50"></text></g><g><title>0x7ff80683f93d (312 samples, 0.07%)</title><rect x="37.2720%" y="149" width="0.0746%" height="15" fill="rgb(234,138,34)" fg:x="155856" fg:w="312"/><text x="37.5220%" y="159.50"></text></g><g><title>0x7ff80684e86d (1,066 samples, 0.25%)</title><rect x="37.0953%" y="165" width="0.2549%" height="15" fill="rgb(212,95,11)" fg:x="155117" fg:w="1066"/><text x="37.3453%" y="175.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1,319 samples, 0.32%)</title><rect x="37.0625%" y="181" width="0.3154%" height="15" fill="rgb(240,179,47)" fg:x="154980" fg:w="1319"/><text x="37.3125%" y="191.50"></text></g><g><title>std::time::Instant::duration_since (75 samples, 0.02%)</title><rect x="37.3780%" y="181" width="0.0179%" height="15" fill="rgb(240,163,11)" fg:x="156299" fg:w="75"/><text x="37.6280%" y="191.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (48 samples, 0.01%)</title><rect x="37.3844%" y="165" width="0.0115%" height="15" fill="rgb(236,37,12)" fg:x="156326" fg:w="48"/><text x="37.6344%" y="175.50"></text></g><g><title>_$LT$storagev2..disk..writer..DiskStorageWriter$u20$as$u20$storagev2..StorageWriter$GT$::store::_$u7b$$u7b$closure$u7d$$u7d$::h209f07eea55c7d7c (.llvm.545498345717494327) (17,524 samples, 4.19%)</title><rect x="33.2075%" y="213" width="4.1908%" height="15" fill="rgb(232,164,16)" fg:x="138860" fg:w="17524"/><text x="33.4575%" y="223.50">_$LT$..</text></g><g><title>storagev2::disk::writer::flusher::Flusher::update_partition_write_count (5,165 samples, 1.24%)</title><rect x="36.1631%" y="197" width="1.2352%" height="15" fill="rgb(244,205,15)" fg:x="151219" fg:w="5165"/><text x="36.4131%" y="207.50"></text></g><g><title>__rdl_alloc (59 samples, 0.01%)</title><rect x="37.3983%" y="213" width="0.0141%" height="15" fill="rgb(223,117,47)" fg:x="156384" fg:w="59"/><text x="37.6483%" y="223.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (416 samples, 0.10%)</title><rect x="37.4167%" y="213" width="0.0995%" height="15" fill="rgb(244,107,35)" fg:x="156461" fg:w="416"/><text x="37.6667%" y="223.50"></text></g><g><title>bytes::bytes::promotable_even_clone (312 samples, 0.07%)</title><rect x="37.5188%" y="213" width="0.0746%" height="15" fill="rgb(205,140,8)" fg:x="156888" fg:w="312"/><text x="37.7688%" y="223.50"></text></g><g><title>bytes::bytes::shared_clone::had8607b974c311e6 (.llvm.6858511044588184240) (91 samples, 0.02%)</title><rect x="37.5934%" y="213" width="0.0218%" height="15" fill="rgb(228,84,46)" fg:x="157200" fg:w="91"/><text x="37.8434%" y="223.50"></text></g><g><title>0x7ff8067b5225 (49 samples, 0.01%)</title><rect x="37.7690%" y="197" width="0.0117%" height="15" fill="rgb(254,188,9)" fg:x="157934" fg:w="49"/><text x="38.0190%" y="207.50"></text></g><g><title>0x7ff8067b523b (48 samples, 0.01%)</title><rect x="37.7817%" y="197" width="0.0115%" height="15" fill="rgb(206,112,54)" fg:x="157987" fg:w="48"/><text x="38.0317%" y="207.50"></text></g><g><title>0x7ff8067b5313 (267 samples, 0.06%)</title><rect x="37.8008%" y="197" width="0.0639%" height="15" fill="rgb(216,84,49)" fg:x="158067" fg:w="267"/><text x="38.0508%" y="207.50"></text></g><g><title>0x7ff8067b5330 (61 samples, 0.01%)</title><rect x="37.8658%" y="197" width="0.0146%" height="15" fill="rgb(214,194,35)" fg:x="158339" fg:w="61"/><text x="38.1158%" y="207.50"></text></g><g><title>0x7ff8067d6607 (87 samples, 0.02%)</title><rect x="37.8845%" y="181" width="0.0208%" height="15" fill="rgb(249,28,3)" fg:x="158417" fg:w="87"/><text x="38.1345%" y="191.50"></text></g><g><title>0x7ff8067b53c7 (102 samples, 0.02%)</title><rect x="37.8816%" y="197" width="0.0244%" height="15" fill="rgb(222,56,52)" fg:x="158405" fg:w="102"/><text x="38.1316%" y="207.50"></text></g><g><title>0x7ff8067f7709 (47 samples, 0.01%)</title><rect x="37.9113%" y="197" width="0.0112%" height="15" fill="rgb(245,217,50)" fg:x="158529" fg:w="47"/><text x="38.1613%" y="207.50"></text></g><g><title>0x7ff8067f724b (2,829 samples, 0.68%)</title><rect x="37.9593%" y="165" width="0.6765%" height="15" fill="rgb(213,201,24)" fg:x="158730" fg:w="2829"/><text x="38.2093%" y="175.50"></text></g><g><title>semaphore_signal_trap (2,813 samples, 0.67%)</title><rect x="37.9632%" y="149" width="0.6727%" height="15" fill="rgb(248,116,28)" fg:x="158746" fg:w="2813"/><text x="38.2132%" y="159.50"></text></g><g><title>0x7ff8067f76f7 (2,865 samples, 0.69%)</title><rect x="37.9569%" y="181" width="0.6851%" height="15" fill="rgb(219,72,43)" fg:x="158720" fg:w="2865"/><text x="38.2069%" y="191.50"></text></g><g><title>futures_timer::native::delay::Delay::new_handle (4,339 samples, 1.04%)</title><rect x="37.6224%" y="213" width="1.0376%" height="15" fill="rgb(209,138,14)" fg:x="157321" fg:w="4339"/><text x="37.8724%" y="223.50"></text></g><g><title>futures_timer::native::global::raw_wake (3,044 samples, 0.73%)</title><rect x="37.9321%" y="197" width="0.7280%" height="15" fill="rgb(222,18,33)" fg:x="158616" fg:w="3044"/><text x="38.1821%" y="207.50"></text></g><g><title>std::sys::sync::thread_parking::darwin::Parker::unpark (65 samples, 0.02%)</title><rect x="38.6445%" y="181" width="0.0155%" height="15" fill="rgb(213,199,7)" fg:x="161595" fg:w="65"/><text x="38.8945%" y="191.50"></text></g><g><title>quanta::Clock::raw (158 samples, 0.04%)</title><rect x="38.6600%" y="213" width="0.0378%" height="15" fill="rgb(250,110,10)" fg:x="161660" fg:w="158"/><text x="38.9100%" y="223.50"></text></g><g><title>rand::rngs::thread::rng (165 samples, 0.04%)</title><rect x="38.7043%" y="213" width="0.0395%" height="15" fill="rgb(248,123,6)" fg:x="161845" fg:w="165"/><text x="38.9543%" y="223.50"></text></g><g><title>0x7ff80683f91d (113 samples, 0.03%)</title><rect x="38.7657%" y="181" width="0.0270%" height="15" fill="rgb(206,91,31)" fg:x="162102" fg:w="113"/><text x="39.0157%" y="191.50"></text></g><g><title>mach_absolute_time (113 samples, 0.03%)</title><rect x="38.7657%" y="165" width="0.0270%" height="15" fill="rgb(211,154,13)" fg:x="162102" fg:w="113"/><text x="39.0157%" y="175.50"></text></g><g><title>0x7ff80683f93d (57 samples, 0.01%)</title><rect x="38.7937%" y="181" width="0.0136%" height="15" fill="rgb(225,148,7)" fg:x="162219" fg:w="57"/><text x="39.0437%" y="191.50"></text></g><g><title>0x7ff80684e86d (211 samples, 0.05%)</title><rect x="38.7574%" y="197" width="0.0505%" height="15" fill="rgb(220,160,43)" fg:x="162067" fg:w="211"/><text x="39.0074%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (262 samples, 0.06%)</title><rect x="38.7507%" y="213" width="0.0627%" height="15" fill="rgb(213,52,39)" fg:x="162039" fg:w="262"/><text x="39.0007%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (52 samples, 0.01%)</title><rect x="38.8145%" y="213" width="0.0124%" height="15" fill="rgb(243,137,7)" fg:x="162306" fg:w="52"/><text x="39.0645%" y="223.50"></text></g><g><title>0x7ff80683f8c6 (108 samples, 0.03%)</title><rect x="38.8915%" y="165" width="0.0258%" height="15" fill="rgb(230,79,13)" fg:x="162628" fg:w="108"/><text x="39.1415%" y="175.50"></text></g><g><title>mach_timebase_info (107 samples, 0.03%)</title><rect x="38.8918%" y="149" width="0.0256%" height="15" fill="rgb(247,105,23)" fg:x="162629" fg:w="107"/><text x="39.1418%" y="159.50"></text></g><g><title>0x7ff80683f91d (547 samples, 0.13%)</title><rect x="38.9283%" y="165" width="0.1308%" height="15" fill="rgb(223,179,41)" fg:x="162782" fg:w="547"/><text x="39.1783%" y="175.50"></text></g><g><title>mach_absolute_time (547 samples, 0.13%)</title><rect x="38.9283%" y="149" width="0.1308%" height="15" fill="rgb(218,9,34)" fg:x="162782" fg:w="547"/><text x="39.1783%" y="159.50"></text></g><g><title>0x7ff80683f93d (295 samples, 0.07%)</title><rect x="39.0671%" y="165" width="0.0705%" height="15" fill="rgb(222,106,8)" fg:x="163362" fg:w="295"/><text x="39.3171%" y="175.50"></text></g><g><title>0x7ff80684e86d (1,092 samples, 0.26%)</title><rect x="38.8834%" y="181" width="0.2611%" height="15" fill="rgb(211,220,0)" fg:x="162594" fg:w="1092"/><text x="39.1334%" y="191.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1,328 samples, 0.32%)</title><rect x="38.8501%" y="197" width="0.3176%" height="15" fill="rgb(229,52,16)" fg:x="162455" fg:w="1328"/><text x="39.1001%" y="207.50"></text></g><g><title>std::time::Instant::duration_since (131 samples, 0.03%)</title><rect x="39.1677%" y="197" width="0.0313%" height="15" fill="rgb(212,155,18)" fg:x="163783" fg:w="131"/><text x="39.4177%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (75 samples, 0.02%)</title><rect x="39.1811%" y="181" width="0.0179%" height="15" fill="rgb(242,21,14)" fg:x="163839" fg:w="75"/><text x="39.4311%" y="191.50"></text></g><g><title>storagev2::disk::writer::test::test_flush_speed_with_dynamic_rate_multi_partition::_$u7b$$u7b$closure$u7d$$u7d$::_$u7b$$u7b$closure$u7d$$u7d$::h4c7fffdf3b56e342 (.llvm.724537013135552685) (33,016 samples, 7.90%)</title><rect x="31.3059%" y="229" width="7.8956%" height="15" fill="rgb(222,19,48)" fg:x="130908" fg:w="33016"/><text x="31.5559%" y="239.50">storagev2::..</text></g><g><title>tokio::time::instant::Instant::elapsed (1,559 samples, 0.37%)</title><rect x="38.8286%" y="213" width="0.3728%" height="15" fill="rgb(232,45,27)" fg:x="162365" fg:w="1559"/><text x="39.0786%" y="223.50"></text></g><g><title>0x7ff8067b742f (45 samples, 0.01%)</title><rect x="39.2261%" y="197" width="0.0108%" height="15" fill="rgb(249,103,42)" fg:x="164027" fg:w="45"/><text x="39.4761%" y="207.50"></text></g><g><title>0x7ff8067b622a (78 samples, 0.02%)</title><rect x="39.2211%" y="213" width="0.0187%" height="15" fill="rgb(246,81,33)" fg:x="164006" fg:w="78"/><text x="39.4711%" y="223.50"></text></g><g><title>0x7ff8067b9d11 (46 samples, 0.01%)</title><rect x="39.2483%" y="213" width="0.0110%" height="15" fill="rgb(252,33,42)" fg:x="164120" fg:w="46"/><text x="39.4983%" y="223.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (103 samples, 0.02%)</title><rect x="39.2741%" y="213" width="0.0246%" height="15" fill="rgb(209,212,41)" fg:x="164228" fg:w="103"/><text x="39.5241%" y="223.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::poll_elapsed (87 samples, 0.02%)</title><rect x="39.2780%" y="197" width="0.0208%" height="15" fill="rgb(207,154,6)" fg:x="164244" fg:w="87"/><text x="39.5280%" y="207.50"></text></g><g><title>0x7ff8067b5313 (56 samples, 0.01%)</title><rect x="39.3863%" y="197" width="0.0134%" height="15" fill="rgb(223,64,47)" fg:x="164697" fg:w="56"/><text x="39.6363%" y="207.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (266 samples, 0.06%)</title><rect x="39.4195%" y="197" width="0.0636%" height="15" fill="rgb(211,161,38)" fg:x="164836" fg:w="266"/><text x="39.6695%" y="207.50"></text></g><g><title>_platform_memcmp$VARIANT$Base (77 samples, 0.02%)</title><rect x="39.4647%" y="181" width="0.0184%" height="15" fill="rgb(219,138,40)" fg:x="165025" fg:w="77"/><text x="39.7147%" y="191.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (104 samples, 0.02%)</title><rect x="39.4836%" y="197" width="0.0249%" height="15" fill="rgb(241,228,46)" fg:x="165104" fg:w="104"/><text x="39.7336%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;storagev2::disk::writer::buffer::PartitionWriterBuffer&gt; (64 samples, 0.02%)</title><rect x="39.5121%" y="197" width="0.0153%" height="15" fill="rgb(223,209,38)" fg:x="165223" fg:w="64"/><text x="39.7621%" y="207.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::push (202 samples, 0.05%)</title><rect x="39.5274%" y="197" width="0.0483%" height="15" fill="rgb(236,164,45)" fg:x="165287" fg:w="202"/><text x="39.7774%" y="207.50"></text></g><g><title>_$LT$std..path..PathBuf$u20$as$u20$core..cmp..PartialEq$GT$::eq::ha8ca9e43c08bccd1 (.llvm.7082537364009689419) (73 samples, 0.02%)</title><rect x="39.6197%" y="165" width="0.0175%" height="15" fill="rgb(231,15,5)" fg:x="165673" fg:w="73"/><text x="39.8697%" y="175.50"></text></g><g><title>std::path::Path::components (64 samples, 0.02%)</title><rect x="39.6219%" y="149" width="0.0153%" height="15" fill="rgb(252,35,15)" fg:x="165682" fg:w="64"/><text x="39.8719%" y="159.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get_mut (346 samples, 0.08%)</title><rect x="39.5812%" y="181" width="0.0827%" height="15" fill="rgb(248,181,18)" fg:x="165512" fg:w="346"/><text x="39.8312%" y="191.50"></text></g><g><title>dashmap::DashMap$LT$K$C$V$C$S$GT$::hash_u64::hbd53c616c4e8f94e (.llvm.7082537364009689419) (112 samples, 0.03%)</title><rect x="39.6372%" y="165" width="0.0268%" height="15" fill="rgb(233,39,42)" fg:x="165746" fg:w="112"/><text x="39.8872%" y="175.50"></text></g><g><title>&lt;std::path::PathBuf as core::hash::Hash&gt;::hash (87 samples, 0.02%)</title><rect x="39.6431%" y="149" width="0.0208%" height="15" fill="rgb(238,110,33)" fg:x="165771" fg:w="87"/><text x="39.8931%" y="159.50"></text></g><g><title>_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$::write::hb824622b973a5f90 (.llvm.7082537364009689419) (54 samples, 0.01%)</title><rect x="39.6510%" y="133" width="0.0129%" height="15" fill="rgb(233,195,10)" fg:x="165804" fg:w="54"/><text x="39.9010%" y="143.50"></text></g><g><title>0x7ff80684e86d (74 samples, 0.02%)</title><rect x="39.6666%" y="165" width="0.0177%" height="15" fill="rgb(254,105,3)" fg:x="165869" fg:w="74"/><text x="39.9166%" y="175.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (91 samples, 0.02%)</title><rect x="39.6640%" y="181" width="0.0218%" height="15" fill="rgb(221,225,9)" fg:x="165858" fg:w="91"/><text x="39.9140%" y="191.50"></text></g><g><title>storagev2::disk::writer::flusher::Flusher::update_partition_write_count (464 samples, 0.11%)</title><rect x="39.5767%" y="197" width="0.1110%" height="15" fill="rgb(224,227,45)" fg:x="165493" fg:w="464"/><text x="39.8267%" y="207.50"></text></g><g><title>_$LT$storagev2..disk..writer..DiskStorageWriter$u20$as$u20$storagev2..StorageWriter$GT$::store::_$u7b$$u7b$closure$u7d$$u7d$::h209f07eea55c7d7c (.llvm.545498345717494327) (1,627 samples, 0.39%)</title><rect x="39.2993%" y="213" width="0.3891%" height="15" fill="rgb(229,198,43)" fg:x="164333" fg:w="1627"/><text x="39.5493%" y="223.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (46 samples, 0.01%)</title><rect x="39.7120%" y="197" width="0.0110%" height="15" fill="rgb(206,209,35)" fg:x="166059" fg:w="46"/><text x="39.9620%" y="207.50"></text></g><g><title>tokio::time::instant::Instant::elapsed (59 samples, 0.01%)</title><rect x="39.7115%" y="213" width="0.0141%" height="15" fill="rgb(245,195,53)" fg:x="166057" fg:w="59"/><text x="39.9615%" y="223.50"></text></g><g><title>storagev2::disk::writer::test::test_flush_speed_with_dynamic_rate_multi_partition::_$u7b$$u7b$closure$u7d$$u7d$::_$u7b$$u7b$closure$u7d$$u7d$::h5ba6c53d5c33bfb0 (.llvm.724537013135552685) (2,251 samples, 0.54%)</title><rect x="39.2015%" y="229" width="0.5383%" height="15" fill="rgb(240,92,26)" fg:x="163924" fg:w="2251"/><text x="39.4515%" y="239.50"></text></g><g><title>tokio::time::sleep::sleep (59 samples, 0.01%)</title><rect x="39.7257%" y="213" width="0.0141%" height="15" fill="rgb(207,40,23)" fg:x="166116" fg:w="59"/><text x="39.9757%" y="223.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (115,765 samples, 27.68%)</title><rect x="12.0658%" y="245" width="27.6845%" height="15" fill="rgb(223,111,35)" fg:x="50454" fg:w="115765"/><text x="12.3158%" y="255.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (115 samples, 0.03%)</title><rect x="39.7591%" y="245" width="0.0275%" height="15" fill="rgb(229,147,28)" fg:x="166256" fg:w="115"/><text x="40.0091%" y="255.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (116,090 samples, 27.76%)</title><rect x="12.0402%" y="261" width="27.7622%" height="15" fill="rgb(211,29,28)" fg:x="50347" fg:w="116090"/><text x="12.2902%" y="271.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::..</text></g><g><title>tokio::runtime::task::state::State::transition_to_running (66 samples, 0.02%)</title><rect x="39.7866%" y="245" width="0.0158%" height="15" fill="rgb(228,72,33)" fg:x="166371" fg:w="66"/><text x="40.0366%" y="255.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (145 samples, 0.03%)</title><rect x="39.8024%" y="261" width="0.0347%" height="15" fill="rgb(205,214,31)" fg:x="166437" fg:w="145"/><text x="40.0524%" y="271.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (133,317 samples, 31.88%)</title><rect x="7.9601%" y="277" width="31.8820%" height="15" fill="rgb(224,111,15)" fg:x="33286" fg:w="133317"/><text x="8.2101%" y="287.50">tokio::runtime::runtime::Runtime::block_on</text></g><g><title>test::run_test::_{{closure}} (133,401 samples, 31.90%)</title><rect x="7.9415%" y="341" width="31.9021%" height="15" fill="rgb(253,21,26)" fg:x="33208" fg:w="133401"/><text x="8.1915%" y="351.50">test::run_test::_{{closure}}</text></g><g><title>test::__rust_begin_short_backtrace (133,401 samples, 31.90%)</title><rect x="7.9415%" y="325" width="31.9021%" height="15" fill="rgb(245,139,43)" fg:x="33208" fg:w="133401"/><text x="8.1915%" y="335.50">test::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (133,401 samples, 31.90%)</title><rect x="7.9415%" y="309" width="31.9021%" height="15" fill="rgb(252,170,7)" fg:x="33208" fg:w="133401"/><text x="8.1915%" y="319.50">core::ops::function::FnOnce::call_once</text></g><g><title>storagev2::disk::writer::test::run_flush_benchmark (133,401 samples, 31.90%)</title><rect x="7.9415%" y="293" width="31.9021%" height="15" fill="rgb(231,118,14)" fg:x="33208" fg:w="133401"/><text x="8.1915%" y="303.50">storagev2::disk::writer::test::run_flush_benchmark</text></g><g><title>0x7ff80684e83f (50 samples, 0.01%)</title><rect x="40.0715%" y="325" width="0.0120%" height="15" fill="rgb(238,83,0)" fg:x="167562" fg:w="50"/><text x="40.3215%" y="335.50"></text></g><g><title>0x7ff80699f89f (43 samples, 0.01%)</title><rect x="40.0896%" y="325" width="0.0103%" height="15" fill="rgb(221,39,39)" fg:x="167638" fg:w="43"/><text x="40.3396%" y="335.50"></text></g><g><title>&lt;Unknown Address&gt; (48 samples, 0.01%)</title><rect x="40.1004%" y="325" width="0.0115%" height="15" fill="rgb(222,119,46)" fg:x="167683" fg:w="48"/><text x="40.3504%" y="335.50"></text></g><g><title>0x7ff806846923 (51 samples, 0.01%)</title><rect x="40.2465%" y="309" width="0.0122%" height="15" fill="rgb(222,165,49)" fg:x="168294" fg:w="51"/><text x="40.4965%" y="319.50"></text></g><g><title>__commpage_gettimeofday_internal (51 samples, 0.01%)</title><rect x="40.2465%" y="293" width="0.0122%" height="15" fill="rgb(219,113,52)" fg:x="168294" fg:w="51"/><text x="40.4965%" y="303.50"></text></g><g><title>__commpage_gettimeofday (50 samples, 0.01%)</title><rect x="40.2778%" y="309" width="0.0120%" height="15" fill="rgb(214,7,15)" fg:x="168425" fg:w="50"/><text x="40.5278%" y="319.50"></text></g><g><title>__gettimeofday (1,467 samples, 0.35%)</title><rect x="40.5514%" y="293" width="0.3508%" height="15" fill="rgb(235,32,4)" fg:x="169569" fg:w="1467"/><text x="40.8014%" y="303.50"></text></g><g><title>__psynch_cvwait (12,818 samples, 3.07%)</title><rect x="40.9022%" y="293" width="3.0653%" height="15" fill="rgb(238,90,54)" fg:x="171036" fg:w="12818"/><text x="41.1522%" y="303.50">__p..</text></g><g><title>_pthread_mutex_firstfit_lock_slow (1,095 samples, 0.26%)</title><rect x="43.9748%" y="293" width="0.2619%" height="15" fill="rgb(213,208,19)" fg:x="183884" fg:w="1095"/><text x="44.2248%" y="303.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (1,083 samples, 0.26%)</title><rect x="43.9776%" y="277" width="0.2590%" height="15" fill="rgb(233,156,4)" fg:x="183896" fg:w="1083"/><text x="44.2276%" y="287.50"></text></g><g><title>__psynch_mutexwait (1,048 samples, 0.25%)</title><rect x="43.9860%" y="261" width="0.2506%" height="15" fill="rgb(207,194,5)" fg:x="183931" fg:w="1048"/><text x="44.2360%" y="271.50"></text></g><g><title>pthread_mutex_lock (130 samples, 0.03%)</title><rect x="44.2366%" y="293" width="0.0311%" height="15" fill="rgb(206,111,30)" fg:x="184979" fg:w="130"/><text x="44.4866%" y="303.50"></text></g><g><title>_pthread_cond_wait (16,975 samples, 4.06%)</title><rect x="40.3018%" y="309" width="4.0595%" height="15" fill="rgb(243,70,54)" fg:x="168525" fg:w="16975"/><text x="40.5518%" y="319.50">_pth..</text></g><g><title>pthread_testcancel (391 samples, 0.09%)</title><rect x="44.2677%" y="293" width="0.0935%" height="15" fill="rgb(242,28,8)" fg:x="185109" fg:w="391"/><text x="44.5177%" y="303.50"></text></g><g><title>__psynch_cvwait (46 samples, 0.01%)</title><rect x="44.3842%" y="277" width="0.0110%" height="15" fill="rgb(219,106,18)" fg:x="185596" fg:w="46"/><text x="44.6342%" y="287.50"></text></g><g><title>_pthread_cond_wait (52 samples, 0.01%)</title><rect x="44.3839%" y="293" width="0.0124%" height="15" fill="rgb(244,222,10)" fg:x="185595" fg:w="52"/><text x="44.6339%" y="303.50"></text></g><g><title>cthread_yield (355 samples, 0.08%)</title><rect x="44.3964%" y="293" width="0.0849%" height="15" fill="rgb(236,179,52)" fg:x="185647" fg:w="355"/><text x="44.6464%" y="303.50"></text></g><g><title>swtch_pri (326 samples, 0.08%)</title><rect x="44.4033%" y="277" width="0.0780%" height="15" fill="rgb(213,23,39)" fg:x="185676" fg:w="326"/><text x="44.6533%" y="287.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (512 samples, 0.12%)</title><rect x="44.3617%" y="309" width="0.1224%" height="15" fill="rgb(238,48,10)" fg:x="185502" fg:w="512"/><text x="44.6117%" y="319.50"></text></g><g><title>__psynch_cvsignal (59 samples, 0.01%)</title><rect x="44.4851%" y="277" width="0.0141%" height="15" fill="rgb(251,196,23)" fg:x="186018" fg:w="59"/><text x="44.7351%" y="287.50"></text></g><g><title>pthread_cond_signal (61 samples, 0.01%)</title><rect x="44.4849%" y="293" width="0.0146%" height="15" fill="rgb(250,152,24)" fg:x="186017" fg:w="61"/><text x="44.7349%" y="303.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (65 samples, 0.02%)</title><rect x="44.4841%" y="309" width="0.0155%" height="15" fill="rgb(209,150,17)" fg:x="186014" fg:w="65"/><text x="44.7341%" y="319.50"></text></g><g><title>pthread_mutex_lock (55 samples, 0.01%)</title><rect x="44.4997%" y="309" width="0.0132%" height="15" fill="rgb(234,202,34)" fg:x="186079" fg:w="55"/><text x="44.7497%" y="319.50"></text></g><g><title>pthread_mutex_unlock (66 samples, 0.02%)</title><rect x="44.5128%" y="309" width="0.0158%" height="15" fill="rgb(253,148,53)" fg:x="186134" fg:w="66"/><text x="44.7628%" y="319.50"></text></g><g><title>0x7ff80684e86d (74 samples, 0.02%)</title><rect x="44.5327%" y="293" width="0.0177%" height="15" fill="rgb(218,129,16)" fg:x="186217" fg:w="74"/><text x="44.7827%" y="303.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (18,535 samples, 4.43%)</title><rect x="40.1202%" y="325" width="4.4325%" height="15" fill="rgb(216,85,19)" fg:x="167766" fg:w="18535"/><text x="40.3702%" y="335.50">parki..</text></g><g><title>std::sys::pal::unix::time::Timespec::now (101 samples, 0.02%)</title><rect x="44.5286%" y="309" width="0.0242%" height="15" fill="rgb(235,228,7)" fg:x="186200" fg:w="101"/><text x="44.7786%" y="319.50"></text></g><g><title>__psynch_cvwait (148 samples, 0.04%)</title><rect x="44.6233%" y="293" width="0.0354%" height="15" fill="rgb(245,175,0)" fg:x="186596" fg:w="148"/><text x="44.8733%" y="303.50"></text></g><g><title>_pthread_cond_wait (183 samples, 0.04%)</title><rect x="44.6217%" y="309" width="0.0438%" height="15" fill="rgb(208,168,36)" fg:x="186589" fg:w="183"/><text x="44.8717%" y="319.50"></text></g><g><title>cthread_yield (1,379 samples, 0.33%)</title><rect x="44.6654%" y="309" width="0.3298%" height="15" fill="rgb(246,171,24)" fg:x="186772" fg:w="1379"/><text x="44.9154%" y="319.50"></text></g><g><title>swtch_pri (1,260 samples, 0.30%)</title><rect x="44.6939%" y="293" width="0.3013%" height="15" fill="rgb(215,142,24)" fg:x="186891" fg:w="1260"/><text x="44.9439%" y="303.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1,893 samples, 0.45%)</title><rect x="44.5528%" y="325" width="0.4527%" height="15" fill="rgb(250,187,7)" fg:x="186301" fg:w="1893"/><text x="44.8028%" y="335.50"></text></g><g><title>__psynch_cvsignal (61 samples, 0.01%)</title><rect x="45.0055%" y="293" width="0.0146%" height="15" fill="rgb(228,66,33)" fg:x="188194" fg:w="61"/><text x="45.2555%" y="303.50"></text></g><g><title>pthread_cond_signal (62 samples, 0.01%)</title><rect x="45.0055%" y="309" width="0.0148%" height="15" fill="rgb(234,215,21)" fg:x="188194" fg:w="62"/><text x="45.2555%" y="319.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (83 samples, 0.02%)</title><rect x="45.0055%" y="325" width="0.0198%" height="15" fill="rgb(222,191,20)" fg:x="188194" fg:w="83"/><text x="45.2555%" y="335.50"></text></g><g><title>0x7ff80683f8c6 (693 samples, 0.17%)</title><rect x="45.0433%" y="293" width="0.1657%" height="15" fill="rgb(245,79,54)" fg:x="188352" fg:w="693"/><text x="45.2933%" y="303.50"></text></g><g><title>mach_timebase_info (693 samples, 0.17%)</title><rect x="45.0433%" y="277" width="0.1657%" height="15" fill="rgb(240,10,37)" fg:x="188352" fg:w="693"/><text x="45.2933%" y="287.50"></text></g><g><title>0x7ff80683f91d (63 samples, 0.02%)</title><rect x="45.2104%" y="293" width="0.0151%" height="15" fill="rgb(214,192,32)" fg:x="189051" fg:w="63"/><text x="45.4604%" y="303.50"></text></g><g><title>mach_absolute_time (63 samples, 0.02%)</title><rect x="45.2104%" y="277" width="0.0151%" height="15" fill="rgb(209,36,54)" fg:x="189051" fg:w="63"/><text x="45.4604%" y="287.50"></text></g><g><title>0x7ff80684e86d (820 samples, 0.20%)</title><rect x="45.0413%" y="309" width="0.1961%" height="15" fill="rgb(220,10,11)" fg:x="188344" fg:w="820"/><text x="45.2913%" y="319.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (875 samples, 0.21%)</title><rect x="45.0294%" y="325" width="0.2093%" height="15" fill="rgb(221,106,17)" fg:x="188294" fg:w="875"/><text x="45.2794%" y="335.50"></text></g><g><title>0x7ff80699f892 (183 samples, 0.04%)</title><rect x="46.1656%" y="309" width="0.0438%" height="15" fill="rgb(251,142,44)" fg:x="193045" fg:w="183"/><text x="46.4156%" y="319.50"></text></g><g><title>0x7ff80699f896 (63 samples, 0.02%)</title><rect x="46.2093%" y="309" width="0.0151%" height="15" fill="rgb(238,13,15)" fg:x="193228" fg:w="63"/><text x="46.4593%" y="319.50"></text></g><g><title>0x7ff80699f89f (674 samples, 0.16%)</title><rect x="46.2244%" y="309" width="0.1612%" height="15" fill="rgb(208,107,27)" fg:x="193291" fg:w="674"/><text x="46.4744%" y="319.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Seek&gt;::seek (135 samples, 0.03%)</title><rect x="46.9351%" y="277" width="0.0323%" height="15" fill="rgb(205,136,37)" fg:x="196263" fg:w="135"/><text x="47.1851%" y="287.50"></text></g><g><title>__lseek (125 samples, 0.03%)</title><rect x="46.9375%" y="261" width="0.0299%" height="15" fill="rgb(250,205,27)" fg:x="196273" fg:w="125"/><text x="47.1875%" y="271.50"></text></g><g><title>std::fs::DirBuilder::create_dir_all (694 samples, 0.17%)</title><rect x="46.9698%" y="277" width="0.1660%" height="15" fill="rgb(210,80,43)" fg:x="196408" fg:w="694"/><text x="47.2198%" y="287.50"></text></g><g><title>mkdir (683 samples, 0.16%)</title><rect x="46.9724%" y="261" width="0.1633%" height="15" fill="rgb(247,160,36)" fg:x="196419" fg:w="683"/><text x="47.2224%" y="271.50"></text></g><g><title>std::fs::File::set_len (12,444 samples, 2.98%)</title><rect x="47.1358%" y="277" width="2.9759%" height="15" fill="rgb(234,13,49)" fg:x="197102" fg:w="12444"/><text x="47.3858%" y="287.50">std..</text></g><g><title>ftruncate (12,418 samples, 2.97%)</title><rect x="47.1420%" y="261" width="2.9697%" height="15" fill="rgb(234,122,0)" fg:x="197128" fg:w="12418"/><text x="47.3920%" y="271.50">ftr..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (205,753 samples, 49.20%)</title><rect x="50.2573%" y="261" width="49.2046%" height="15" fill="rgb(207,146,38)" fg:x="210155" fg:w="205753"/><text x="50.5073%" y="271.50">&lt;&amp;std::fs::File as std::io::Write&gt;::write</text></g><g><title>write (204,771 samples, 48.97%)</title><rect x="50.4922%" y="245" width="48.9698%" height="15" fill="rgb(207,177,25)" fg:x="211137" fg:w="204771"/><text x="50.7422%" y="255.50">write</text></g><g><title>tokio::io::blocking::Buf::write_to (206,366 samples, 49.35%)</title><rect x="50.1117%" y="277" width="49.3512%" height="15" fill="rgb(211,178,42)" fg:x="209546" fg:w="206366"/><text x="50.3617%" y="287.50">tokio::io::blocking::Buf::write_to</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (220,709 samples, 52.78%)</title><rect x="46.6819%" y="293" width="52.7812%" height="15" fill="rgb(230,69,54)" fg:x="195204" fg:w="220709"/><text x="46.9319%" y="303.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>core::ptr::drop_in_place$LT$tokio..runtime..task..core..Stage$LT$tokio..runtime..blocking..task..BlockingTask$LT$$LT$tokio..fs..file..File$u20$as$u20$tokio..io..async_write..AsyncWrite$GT$..poll_write..$u7b$$u7b$closure$u7d$$u7d$$GT$$GT$$GT$::he5aa7062414bca57 (.llvm.2572065288955653979) (43 samples, 0.01%)</title><rect x="99.4677%" y="293" width="0.0103%" height="15" fill="rgb(214,135,41)" fg:x="415932" fg:w="43"/><text x="99.7177%" y="303.50"></text></g><g><title>0x7ff80686baa3 (73 samples, 0.02%)</title><rect x="99.4846%" y="229" width="0.0175%" height="15" fill="rgb(237,67,25)" fg:x="416003" fg:w="73"/><text x="99.7346%" y="239.50"></text></g><g><title>0x7ff80684603b (57 samples, 0.01%)</title><rect x="99.4885%" y="213" width="0.0136%" height="15" fill="rgb(222,189,50)" fg:x="416019" fg:w="57"/><text x="99.7385%" y="223.50"></text></g><g><title>__getdirentries64 (57 samples, 0.01%)</title><rect x="99.4885%" y="197" width="0.0136%" height="15" fill="rgb(245,148,34)" fg:x="416019" fg:w="57"/><text x="99.7385%" y="207.50"></text></g><g><title>openat (168 samples, 0.04%)</title><rect x="99.5081%" y="229" width="0.0402%" height="15" fill="rgb(222,29,6)" fg:x="416101" fg:w="168"/><text x="99.7581%" y="239.50"></text></g><g><title>__openat (167 samples, 0.04%)</title><rect x="99.5083%" y="213" width="0.0399%" height="15" fill="rgb(221,189,43)" fg:x="416102" fg:w="167"/><text x="99.7583%" y="223.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all (1,260 samples, 0.30%)</title><rect x="99.4779%" y="293" width="0.3013%" height="15" fill="rgb(207,36,27)" fg:x="415975" fg:w="1260"/><text x="99.7279%" y="303.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_recursive (1,260 samples, 0.30%)</title><rect x="99.4779%" y="277" width="0.3013%" height="15" fill="rgb(217,90,24)" fg:x="415975" fg:w="1260"/><text x="99.7279%" y="287.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_recursive (1,259 samples, 0.30%)</title><rect x="99.4782%" y="261" width="0.3011%" height="15" fill="rgb(224,66,35)" fg:x="415976" fg:w="1259"/><text x="99.7282%" y="271.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_recursive (1,250 samples, 0.30%)</title><rect x="99.4803%" y="245" width="0.2989%" height="15" fill="rgb(221,13,50)" fg:x="415985" fg:w="1250"/><text x="99.7303%" y="255.50"></text></g><g><title>unlinkat (966 samples, 0.23%)</title><rect x="99.5483%" y="229" width="0.2310%" height="15" fill="rgb(236,68,49)" fg:x="416269" fg:w="966"/><text x="99.7983%" y="239.50"></text></g><g><title>__unlinkat (965 samples, 0.23%)</title><rect x="99.5485%" y="213" width="0.2308%" height="15" fill="rgb(229,146,28)" fg:x="416270" fg:w="965"/><text x="99.7985%" y="223.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (223,246 samples, 53.39%)</title><rect x="46.3951%" y="309" width="53.3880%" height="15" fill="rgb(225,31,38)" fg:x="194005" fg:w="223246"/><text x="46.6451%" y="319.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (125 samples, 0.03%)</title><rect x="99.7831%" y="309" width="0.0299%" height="15" fill="rgb(250,208,3)" fg:x="417251" fg:w="125"/><text x="100.0331%" y="319.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (109 samples, 0.03%)</title><rect x="99.8171%" y="277" width="0.0261%" height="15" fill="rgb(246,54,23)" fg:x="417393" fg:w="109"/><text x="100.0671%" y="287.50"></text></g><g><title>mio::waker::Waker::wake (105 samples, 0.03%)</title><rect x="99.8180%" y="261" width="0.0251%" height="15" fill="rgb(243,76,11)" fg:x="417397" fg:w="105"/><text x="100.0680%" y="271.50"></text></g><g><title>kevent (103 samples, 0.02%)</title><rect x="99.8185%" y="245" width="0.0246%" height="15" fill="rgb(245,21,50)" fg:x="417399" fg:w="103"/><text x="100.0685%" y="255.50"></text></g><g><title>tokio::runtime::context::with_scheduler (118 samples, 0.03%)</title><rect x="99.8161%" y="293" width="0.0282%" height="15" fill="rgb(228,9,43)" fg:x="417389" fg:w="118"/><text x="100.0661%" y="303.50"></text></g><g><title>tokio::runtime::task::harness::Harness$LT$T$C$S$GT$::complete::h0ce3e0d66899a5eb (.llvm.15480949991314898764) (140 samples, 0.03%)</title><rect x="99.8135%" y="309" width="0.0335%" height="15" fill="rgb(208,100,47)" fg:x="417378" fg:w="140"/><text x="100.0635%" y="319.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (159 samples, 0.04%)</title><rect x="99.8553%" y="277" width="0.0380%" height="15" fill="rgb(232,26,8)" fg:x="417553" fg:w="159"/><text x="100.1053%" y="287.50"></text></g><g><title>mio::waker::Waker::wake (154 samples, 0.04%)</title><rect x="99.8565%" y="261" width="0.0368%" height="15" fill="rgb(216,166,38)" fg:x="417558" fg:w="154"/><text x="100.1065%" y="271.50"></text></g><g><title>kevent (148 samples, 0.04%)</title><rect x="99.8579%" y="245" width="0.0354%" height="15" fill="rgb(251,202,51)" fg:x="417564" fg:w="148"/><text x="100.1079%" y="255.50"></text></g><g><title>tokio::runtime::context::with_scheduler (177 samples, 0.04%)</title><rect x="99.8544%" y="293" width="0.0423%" height="15" fill="rgb(254,216,34)" fg:x="417549" fg:w="177"/><text x="100.1044%" y="303.50"></text></g><g><title>tokio::runtime::task::harness::Harness$LT$T$C$S$GT$::complete::h58ad049546bf370c (.llvm.3193921096100719124) (201 samples, 0.05%)</title><rect x="99.8524%" y="309" width="0.0481%" height="15" fill="rgb(251,32,27)" fg:x="417541" fg:w="201"/><text x="100.1024%" y="319.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (119 samples, 0.03%)</title><rect x="99.9467%" y="277" width="0.0285%" height="15" fill="rgb(208,127,28)" fg:x="417935" fg:w="119"/><text x="100.1967%" y="287.50"></text></g><g><title>mio::waker::Waker::wake (113 samples, 0.03%)</title><rect x="99.9481%" y="261" width="0.0270%" height="15" fill="rgb(224,137,22)" fg:x="417941" fg:w="113"/><text x="100.1981%" y="271.50"></text></g><g><title>kevent (113 samples, 0.03%)</title><rect x="99.9481%" y="245" width="0.0270%" height="15" fill="rgb(254,70,32)" fg:x="417941" fg:w="113"/><text x="100.1981%" y="255.50"></text></g><g><title>tokio::runtime::context::with_scheduler (127 samples, 0.03%)</title><rect x="99.9462%" y="293" width="0.0304%" height="15" fill="rgb(229,75,37)" fg:x="417933" fg:w="127"/><text x="100.1962%" y="303.50"></text></g><g><title>tokio::runtime::task::harness::Harness$LT$T$C$S$GT$::complete::hdd5cd30a9a4b1154 (.llvm.15480949991314898764) (332 samples, 0.08%)</title><rect x="99.9005%" y="309" width="0.0794%" height="15" fill="rgb(252,64,23)" fg:x="417742" fg:w="332"/><text x="100.1505%" y="319.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (228,890 samples, 54.74%)</title><rect x="45.2429%" y="325" width="54.7377%" height="15" fill="rgb(232,162,48)" fg:x="189187" fg:w="228890"/><text x="45.4929%" y="335.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (251,537 samples, 60.15%)</title><rect x="39.8436%" y="341" width="60.1536%" height="15" fill="rgb(246,160,12)" fg:x="166609" fg:w="251537"/><text x="40.0936%" y="351.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::raw::poll (69 samples, 0.02%)</title><rect x="99.9806%" y="325" width="0.0165%" height="15" fill="rgb(247,166,0)" fg:x="418077" fg:w="69"/><text x="100.2306%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (418,130 samples, 99.99%)</title><rect x="0.0043%" y="373" width="99.9933%" height="15" fill="rgb(249,219,21)" fg:x="18" fg:w="418130"/><text x="0.2543%" y="383.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (418,130 samples, 99.99%)</title><rect x="0.0043%" y="357" width="99.9933%" height="15" fill="rgb(205,209,3)" fg:x="18" fg:w="418130"/><text x="0.2543%" y="367.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>_pthread_start (418,145 samples, 100.00%)</title><rect x="0.0019%" y="405" width="99.9969%" height="15" fill="rgb(243,44,1)" fg:x="8" fg:w="418145"/><text x="0.2519%" y="415.50">_pthread_start</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (418,138 samples, 100.00%)</title><rect x="0.0036%" y="389" width="99.9952%" height="15" fill="rgb(206,159,16)" fg:x="15" fg:w="418138"/><text x="0.2536%" y="399.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>all (418,158 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(244,77,30)" fg:x="0" fg:w="418158"/><text x="0.2500%" y="447.50"></text></g><g><title>thread_start (418,150 samples, 100.00%)</title><rect x="0.0019%" y="421" width="99.9981%" height="15" fill="rgb(218,69,12)" fg:x="8" fg:w="418150"/><text x="0.2519%" y="431.50">thread_start</text></g></svg></svg>