<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="195959"><g><title>0x7ff8067ce62e (182 samples, 0.09%)</title><rect x="0.8446%" y="117" width="0.0929%" height="15" fill="rgb(227,0,7)" fg:x="1655" fg:w="182"/><text x="1.0946%" y="127.50"></text></g><g><title>mach_vm_deallocate (182 samples, 0.09%)</title><rect x="0.8446%" y="101" width="0.0929%" height="15" fill="rgb(217,0,24)" fg:x="1655" fg:w="182"/><text x="1.0946%" y="111.50"></text></g><g><title>_kernelrpc_mach_vm_deallocate_trap (181 samples, 0.09%)</title><rect x="0.8451%" y="85" width="0.0924%" height="15" fill="rgb(221,193,54)" fg:x="1656" fg:w="181"/><text x="1.0951%" y="95.50"></text></g><g><title>0x7ff8067bfeda (183 samples, 0.09%)</title><rect x="0.8446%" y="133" width="0.0934%" height="15" fill="rgb(248,212,6)" fg:x="1655" fg:w="183"/><text x="1.0946%" y="143.50"></text></g><g><title>0x7ff8067caaa5 (198 samples, 0.10%)</title><rect x="0.8390%" y="149" width="0.1010%" height="15" fill="rgb(208,68,35)" fg:x="1644" fg:w="198"/><text x="1.0890%" y="159.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (29 samples, 0.01%)</title><rect x="0.9400%" y="149" width="0.0148%" height="15" fill="rgb(232,128,0)" fg:x="1842" fg:w="29"/><text x="1.1900%" y="159.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Chan&lt;T,S&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.01%)</title><rect x="0.9400%" y="133" width="0.0148%" height="15" fill="rgb(207,160,47)" fg:x="1842" fg:w="29"/><text x="1.1900%" y="143.50"></text></g><g><title>bytes::bytes::shared_drop::h2f4486fd7f0a6f4b (.llvm.6858511044588184240) (444 samples, 0.23%)</title><rect x="0.9548%" y="149" width="0.2266%" height="15" fill="rgb(228,23,34)" fg:x="1871" fg:w="444"/><text x="1.2048%" y="159.50"></text></g><g><title>core::ptr::drop_in_place$LT$storagev2..disk..writer..DiskStorageWriter..get_partition_writer..$u7b$$u7b$closure$u7d$$u7d$..$u7b$$u7b$closure$u7d$$u7d$$GT$::ha96d85d302a6154b (.llvm.3445545093588245694) (2,268 samples, 1.16%)</title><rect x="0.0260%" y="165" width="1.1574%" height="15" fill="rgb(218,30,26)" fg:x="51" fg:w="2268"/><text x="0.2760%" y="175.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::close_and_shutdown_all (2,281 samples, 1.16%)</title><rect x="0.0204%" y="213" width="1.1640%" height="15" fill="rgb(220,122,19)" fg:x="40" fg:w="2281"/><text x="0.2704%" y="223.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::shutdown (2,277 samples, 1.16%)</title><rect x="0.0225%" y="197" width="1.1620%" height="15" fill="rgb(250,228,42)" fg:x="44" fg:w="2277"/><text x="0.2725%" y="207.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (2,275 samples, 1.16%)</title><rect x="0.0235%" y="181" width="1.1610%" height="15" fill="rgb(240,193,28)" fg:x="46" fg:w="2275"/><text x="0.2735%" y="191.50"></text></g><g><title>core::ptr::drop_in_place$LT$tokio..runtime..runtime..Runtime$GT$::h9f0c4a5e079c8f67 (.llvm.9900487145485074435) (2,283 samples, 1.17%)</title><rect x="0.0199%" y="277" width="1.1650%" height="15" fill="rgb(216,20,37)" fg:x="39" fg:w="2283"/><text x="0.2699%" y="287.50"></text></g><g><title>&lt;tokio::runtime::runtime::Runtime as core::ops::drop::Drop&gt;::drop (2,283 samples, 1.17%)</title><rect x="0.0199%" y="261" width="1.1650%" height="15" fill="rgb(206,188,39)" fg:x="39" fg:w="2283"/><text x="0.2699%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CurrentThread::shutdown (2,283 samples, 1.17%)</title><rect x="0.0199%" y="245" width="1.1650%" height="15" fill="rgb(217,207,13)" fg:x="39" fg:w="2283"/><text x="0.2699%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::shutdown2 (2,283 samples, 1.17%)</title><rect x="0.0199%" y="229" width="1.1650%" height="15" fill="rgb(231,73,38)" fg:x="39" fg:w="2283"/><text x="0.2699%" y="239.50"></text></g><g><title>0x7ff80699f892 (25 samples, 0.01%)</title><rect x="1.2993%" y="245" width="0.0128%" height="15" fill="rgb(225,20,46)" fg:x="2546" fg:w="25"/><text x="1.5493%" y="255.50"></text></g><g><title>0x7ff80699f8a8 (20 samples, 0.01%)</title><rect x="1.3171%" y="245" width="0.0102%" height="15" fill="rgb(210,31,41)" fg:x="2581" fg:w="20"/><text x="1.5671%" y="255.50"></text></g><g><title>&lt;tokio::task::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop (76 samples, 0.04%)</title><rect x="1.3350%" y="245" width="0.0388%" height="15" fill="rgb(221,200,47)" fg:x="2616" fg:w="76"/><text x="1.5850%" y="255.50"></text></g><g><title>0x7ff8067b622a (26 samples, 0.01%)</title><rect x="1.3840%" y="229" width="0.0133%" height="15" fill="rgb(226,26,5)" fg:x="2712" fg:w="26"/><text x="1.6340%" y="239.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (31 samples, 0.02%)</title><rect x="1.4447%" y="197" width="0.0158%" height="15" fill="rgb(249,33,26)" fg:x="2831" fg:w="31"/><text x="1.6947%" y="207.50"></text></g><g><title>&lt;futures_util::future::join_all::JoinAll&lt;F&gt; as core::future::future::Future&gt;::poll (83 samples, 0.04%)</title><rect x="1.4197%" y="229" width="0.0424%" height="15" fill="rgb(235,183,28)" fg:x="2782" fg:w="83"/><text x="1.6697%" y="239.50"></text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered$LT$Fut$GT$::release_task::h264ded4bb7a32eab (.llvm.7260838787244188652) (47 samples, 0.02%)</title><rect x="1.4381%" y="213" width="0.0240%" height="15" fill="rgb(221,5,38)" fg:x="2818" fg:w="47"/><text x="1.6881%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;storagev2::disk::writer::TopicStorage&gt; (37 samples, 0.02%)</title><rect x="1.5151%" y="213" width="0.0189%" height="15" fill="rgb(247,18,42)" fg:x="2969" fg:w="37"/><text x="1.7651%" y="223.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (36 samples, 0.02%)</title><rect x="1.5360%" y="213" width="0.0184%" height="15" fill="rgb(241,131,45)" fg:x="3010" fg:w="36"/><text x="1.7860%" y="223.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (28 samples, 0.01%)</title><rect x="1.5600%" y="213" width="0.0143%" height="15" fill="rgb(249,31,29)" fg:x="3057" fg:w="28"/><text x="1.8100%" y="223.50"></text></g><g><title>_$LT$storagev2..disk..writer..DiskStorageWriter$u20$as$u20$storagev2..StorageWriter$GT$::store::_$u7b$$u7b$closure$u7d$$u7d$::h099b0228c1e4ac4d (.llvm.8217435450359230035) (230 samples, 0.12%)</title><rect x="1.4626%" y="229" width="0.1174%" height="15" fill="rgb(225,111,53)" fg:x="2866" fg:w="230"/><text x="1.7126%" y="239.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (27 samples, 0.01%)</title><rect x="1.6070%" y="197" width="0.0138%" height="15" fill="rgb(238,160,17)" fg:x="3149" fg:w="27"/><text x="1.8570%" y="207.50"></text></g><g><title>__rdl_alloc (24 samples, 0.01%)</title><rect x="1.6085%" y="181" width="0.0122%" height="15" fill="rgb(214,148,48)" fg:x="3152" fg:w="24"/><text x="1.8585%" y="191.50"></text></g><g><title>0x7ff8067e0345 (24 samples, 0.01%)</title><rect x="1.6085%" y="165" width="0.0122%" height="15" fill="rgb(232,36,49)" fg:x="3152" fg:w="24"/><text x="1.8585%" y="175.50"></text></g><g><title>0x7ff8067dfd99 (23 samples, 0.01%)</title><rect x="1.6090%" y="149" width="0.0117%" height="15" fill="rgb(209,103,24)" fg:x="3153" fg:w="23"/><text x="1.8590%" y="159.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Handle::spawn (34 samples, 0.02%)</title><rect x="1.6054%" y="213" width="0.0174%" height="15" fill="rgb(229,88,8)" fg:x="3146" fg:w="34"/><text x="1.8554%" y="223.50"></text></g><g><title>storagev2::disk::writer::test::storage_store_bench_single_store_count::_$u7b$$u7b$closure$u7d$$u7d$::h5eecc1c5b85a3cf0 (.llvm.9900487145485074435) (489 samples, 0.25%)</title><rect x="1.3738%" y="245" width="0.2495%" height="15" fill="rgb(213,181,19)" fg:x="2692" fg:w="489"/><text x="1.6238%" y="255.50"></text></g><g><title>tokio::task::spawn::spawn (38 samples, 0.02%)</title><rect x="1.6039%" y="229" width="0.0194%" height="15" fill="rgb(254,191,54)" fg:x="3143" fg:w="38"/><text x="1.8539%" y="239.50"></text></g><g><title>0x7ff80684e86d (34 samples, 0.02%)</title><rect x="1.6299%" y="197" width="0.0174%" height="15" fill="rgb(241,83,37)" fg:x="3194" fg:w="34"/><text x="1.8799%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (39 samples, 0.02%)</title><rect x="1.6279%" y="213" width="0.0199%" height="15" fill="rgb(233,36,39)" fg:x="3190" fg:w="39"/><text x="1.8779%" y="223.50"></text></g><g><title>tokio::runtime::metrics::batch::MetricsBatch::end_processing_scheduled_tasks (56 samples, 0.03%)</title><rect x="1.6233%" y="245" width="0.0286%" height="15" fill="rgb(226,3,54)" fg:x="3181" fg:w="56"/><text x="1.8733%" y="255.50"></text></g><g><title>std::time::Instant::elapsed (53 samples, 0.03%)</title><rect x="1.6248%" y="229" width="0.0270%" height="15" fill="rgb(245,192,40)" fg:x="3184" fg:w="53"/><text x="1.8748%" y="239.50"></text></g><g><title>tokio::runtime::metrics::batch::MetricsBatch::start_processing_scheduled_tasks (33 samples, 0.02%)</title><rect x="1.6519%" y="245" width="0.0168%" height="15" fill="rgb(238,167,29)" fg:x="3237" fg:w="33"/><text x="1.9019%" y="255.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (27 samples, 0.01%)</title><rect x="1.6549%" y="229" width="0.0138%" height="15" fill="rgb(232,182,51)" fg:x="3243" fg:w="27"/><text x="1.9049%" y="239.50"></text></g><g><title>tokio::runtime::context::with_scheduler (145 samples, 0.07%)</title><rect x="1.8269%" y="213" width="0.0740%" height="15" fill="rgb(231,60,39)" fg:x="3580" fg:w="145"/><text x="2.0769%" y="223.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (93 samples, 0.05%)</title><rect x="1.8534%" y="197" width="0.0475%" height="15" fill="rgb(208,69,12)" fg:x="3632" fg:w="93"/><text x="2.1034%" y="207.50"></text></g><g><title>tokio::runtime::task::raw::schedule (30 samples, 0.02%)</title><rect x="1.9019%" y="213" width="0.0153%" height="15" fill="rgb(235,93,37)" fg:x="3727" fg:w="30"/><text x="2.1519%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (810 samples, 0.41%)</title><rect x="1.7095%" y="229" width="0.4134%" height="15" fill="rgb(213,116,39)" fg:x="3350" fg:w="810"/><text x="1.9595%" y="239.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (403 samples, 0.21%)</title><rect x="1.9172%" y="213" width="0.2057%" height="15" fill="rgb(222,207,29)" fg:x="3757" fg:w="403"/><text x="2.1672%" y="223.50"></text></g><g><title>0x7ff80683f8c6 (195 samples, 0.10%)</title><rect x="2.1469%" y="181" width="0.0995%" height="15" fill="rgb(206,96,30)" fg:x="4207" fg:w="195"/><text x="2.3969%" y="191.50"></text></g><g><title>mach_timebase_info (194 samples, 0.10%)</title><rect x="2.1474%" y="165" width="0.0990%" height="15" fill="rgb(218,138,4)" fg:x="4208" fg:w="194"/><text x="2.3974%" y="175.50"></text></g><g><title>0x7ff80683f91d (20 samples, 0.01%)</title><rect x="2.2479%" y="181" width="0.0102%" height="15" fill="rgb(250,191,14)" fg:x="4405" fg:w="20"/><text x="2.4979%" y="191.50"></text></g><g><title>mach_absolute_time (20 samples, 0.01%)</title><rect x="2.2479%" y="165" width="0.0102%" height="15" fill="rgb(239,60,40)" fg:x="4405" fg:w="20"/><text x="2.4979%" y="175.50"></text></g><g><title>0x7ff80684e86d (233 samples, 0.12%)</title><rect x="2.1469%" y="197" width="0.1189%" height="15" fill="rgb(206,27,48)" fg:x="4207" fg:w="233"/><text x="2.3969%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (242 samples, 0.12%)</title><rect x="2.1443%" y="213" width="0.1235%" height="15" fill="rgb(225,35,8)" fg:x="4202" fg:w="242"/><text x="2.3943%" y="223.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (24 samples, 0.01%)</title><rect x="2.2745%" y="213" width="0.0122%" height="15" fill="rgb(250,213,24)" fg:x="4457" fg:w="24"/><text x="2.5245%" y="223.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn::hdc27603f1e2477ca (.llvm.11592589432301260788) (685 samples, 0.35%)</title><rect x="2.2867%" y="213" width="0.3496%" height="15" fill="rgb(247,123,22)" fg:x="4481" fg:w="685"/><text x="2.5367%" y="223.50"></text></g><g><title>mio::poll::Poll::poll (635 samples, 0.32%)</title><rect x="2.3122%" y="197" width="0.3240%" height="15" fill="rgb(231,138,38)" fg:x="4531" fg:w="635"/><text x="2.5622%" y="207.50"></text></g><g><title>kevent (616 samples, 0.31%)</title><rect x="2.3219%" y="181" width="0.3144%" height="15" fill="rgb(231,145,46)" fg:x="4550" fg:w="616"/><text x="2.5719%" y="191.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal::h05d49ce90ffebeb3 (.llvm.11592589432301260788) (1,030 samples, 0.53%)</title><rect x="2.1229%" y="229" width="0.5256%" height="15" fill="rgb(251,118,11)" fg:x="4160" fg:w="1030"/><text x="2.3729%" y="239.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (49 samples, 0.03%)</title><rect x="2.6485%" y="229" width="0.0250%" height="15" fill="rgb(217,147,25)" fg:x="5190" fg:w="49"/><text x="2.8985%" y="239.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (26 samples, 0.01%)</title><rect x="2.6603%" y="213" width="0.0133%" height="15" fill="rgb(247,81,37)" fg:x="5213" fg:w="26"/><text x="2.9103%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park_yield (1,975 samples, 1.01%)</title><rect x="1.6687%" y="245" width="1.0079%" height="15" fill="rgb(209,12,38)" fg:x="3270" fg:w="1975"/><text x="1.9187%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (642 samples, 0.33%)</title><rect x="2.6766%" y="245" width="0.3276%" height="15" fill="rgb(227,1,9)" fg:x="5245" fg:w="642"/><text x="2.9266%" y="255.50"></text></g><g><title>0x7ff8067b5c2e (22 samples, 0.01%)</title><rect x="3.1369%" y="213" width="0.0112%" height="15" fill="rgb(248,47,43)" fg:x="6147" fg:w="22"/><text x="3.3869%" y="223.50"></text></g><g><title>0x7ff80699f892 (37 samples, 0.02%)</title><rect x="3.2573%" y="213" width="0.0189%" height="15" fill="rgb(221,10,30)" fg:x="6383" fg:w="37"/><text x="3.5073%" y="223.50"></text></g><g><title>0x7ff80699f8a4 (20 samples, 0.01%)</title><rect x="3.2854%" y="213" width="0.0102%" height="15" fill="rgb(210,229,1)" fg:x="6438" fg:w="20"/><text x="3.5354%" y="223.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (84 samples, 0.04%)</title><rect x="3.3063%" y="197" width="0.0429%" height="15" fill="rgb(222,148,37)" fg:x="6479" fg:w="84"/><text x="3.5563%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;storagev2::disk::writer::buffer::PartitionWriterBuffer::write_batch::{{closure}}&gt; (738 samples, 0.38%)</title><rect x="3.3594%" y="197" width="0.3766%" height="15" fill="rgb(234,67,33)" fg:x="6583" fg:w="738"/><text x="3.6094%" y="207.50"></text></g><g><title>&lt;Unknown Address&gt; (1,425 samples, 0.73%)</title><rect x="3.3012%" y="213" width="0.7272%" height="15" fill="rgb(247,98,35)" fg:x="6469" fg:w="1425"/><text x="3.5512%" y="223.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv_many (570 samples, 0.29%)</title><rect x="3.7375%" y="197" width="0.2909%" height="15" fill="rgb(247,138,52)" fg:x="7324" fg:w="570"/><text x="3.9875%" y="207.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (58 samples, 0.03%)</title><rect x="4.0284%" y="213" width="0.0296%" height="15" fill="rgb(213,79,30)" fg:x="7894" fg:w="58"/><text x="4.2784%" y="223.50"></text></g><g><title>DYLD-STUB$$_platform_memmove (909 samples, 0.46%)</title><rect x="4.0580%" y="213" width="0.4639%" height="15" fill="rgb(246,177,23)" fg:x="7952" fg:w="909"/><text x="4.3080%" y="223.50"></text></g><g><title>DYLD-STUB$$memcpy (103 samples, 0.05%)</title><rect x="4.5229%" y="213" width="0.0526%" height="15" fill="rgb(230,62,27)" fg:x="8863" fg:w="103"/><text x="4.7729%" y="223.50"></text></g><g><title>__rdl_alloc (48 samples, 0.02%)</title><rect x="4.5754%" y="213" width="0.0245%" height="15" fill="rgb(216,154,8)" fg:x="8966" fg:w="48"/><text x="4.8254%" y="223.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (357 samples, 0.18%)</title><rect x="4.6147%" y="213" width="0.1822%" height="15" fill="rgb(244,35,45)" fg:x="9043" fg:w="357"/><text x="4.8647%" y="223.50"></text></g><g><title>bytes::bytes::shared_clone::had8607b974c311e6 (.llvm.6858511044588184240) (297 samples, 0.15%)</title><rect x="4.7969%" y="213" width="0.1516%" height="15" fill="rgb(251,115,12)" fg:x="9400" fg:w="297"/><text x="5.0469%" y="223.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (26 samples, 0.01%)</title><rect x="4.9521%" y="165" width="0.0133%" height="15" fill="rgb(240,54,50)" fg:x="9704" fg:w="26"/><text x="5.2021%" y="175.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (28 samples, 0.01%)</title><rect x="4.9521%" y="181" width="0.0143%" height="15" fill="rgb(233,84,52)" fg:x="9704" fg:w="28"/><text x="5.2021%" y="191.50"></text></g><g><title>tokio::fs::file::File::sync_data::_{{closure}} (38 samples, 0.02%)</title><rect x="4.9490%" y="197" width="0.0194%" height="15" fill="rgb(207,117,47)" fg:x="9698" fg:w="38"/><text x="5.1990%" y="207.50"></text></g><g><title>storagev2::disk::meta::WriterPositionPtr::save_to::_$u7b$$u7b$closure$u7d$$u7d$::_$u7b$$u7b$closure$u7d$$u7d$::hd825ec49adce233d (.llvm.3445545093588245694) (42 samples, 0.02%)</title><rect x="4.9485%" y="213" width="0.0214%" height="15" fill="rgb(249,43,39)" fg:x="9697" fg:w="42"/><text x="5.1985%" y="223.50"></text></g><g><title>0x7ff80699f892 (2,110 samples, 1.08%)</title><rect x="17.1123%" y="197" width="1.0768%" height="15" fill="rgb(209,38,44)" fg:x="33533" fg:w="2110"/><text x="17.3623%" y="207.50"></text></g><g><title>0x7ff80699f896 (548 samples, 0.28%)</title><rect x="18.1890%" y="197" width="0.2797%" height="15" fill="rgb(236,212,23)" fg:x="35643" fg:w="548"/><text x="18.4390%" y="207.50"></text></g><g><title>0x7ff80699f89f (459 samples, 0.23%)</title><rect x="18.4687%" y="197" width="0.2342%" height="15" fill="rgb(242,79,21)" fg:x="36191" fg:w="459"/><text x="18.7187%" y="207.50"></text></g><g><title>0x7ff80699f8a4 (1,163 samples, 0.59%)</title><rect x="18.7029%" y="197" width="0.5935%" height="15" fill="rgb(211,96,35)" fg:x="36650" fg:w="1163"/><text x="18.9529%" y="207.50"></text></g><g><title>0x7ff80699f8a8 (692 samples, 0.35%)</title><rect x="19.2964%" y="197" width="0.3531%" height="15" fill="rgb(253,215,40)" fg:x="37813" fg:w="692"/><text x="19.5464%" y="207.50"></text></g><g><title>&lt;tokio::task::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (124 samples, 0.06%)</title><rect x="19.6551%" y="181" width="0.0633%" height="15" fill="rgb(211,81,21)" fg:x="38516" fg:w="124"/><text x="19.9051%" y="191.50"></text></g><g><title>tokio::runtime::context::defer (24 samples, 0.01%)</title><rect x="19.7184%" y="181" width="0.0122%" height="15" fill="rgb(208,190,38)" fg:x="38640" fg:w="24"/><text x="19.9684%" y="191.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (256 samples, 0.13%)</title><rect x="19.7307%" y="181" width="0.1306%" height="15" fill="rgb(235,213,38)" fg:x="38664" fg:w="256"/><text x="19.9807%" y="191.50"></text></g><g><title>&lt;Unknown Address&gt; (432 samples, 0.22%)</title><rect x="19.6495%" y="197" width="0.2205%" height="15" fill="rgb(237,122,38)" fg:x="38505" fg:w="432"/><text x="19.8995%" y="207.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (20,309 samples, 10.36%)</title><rect x="19.8838%" y="197" width="10.3639%" height="15" fill="rgb(244,218,35)" fg:x="38964" fg:w="20309"/><text x="20.1338%" y="207.50">_platform_memmo..</text></g><g><title>0x7ff8068463a6 (47 samples, 0.02%)</title><rect x="30.2670%" y="133" width="0.0240%" height="15" fill="rgb(240,68,47)" fg:x="59311" fg:w="47"/><text x="30.5170%" y="143.50"></text></g><g><title>__getdirentries64 (47 samples, 0.02%)</title><rect x="30.2670%" y="117" width="0.0240%" height="15" fill="rgb(210,16,53)" fg:x="59311" fg:w="47"/><text x="30.5170%" y="127.50"></text></g><g><title>0x7ff8068630df (67 samples, 0.03%)</title><rect x="30.2573%" y="149" width="0.0342%" height="15" fill="rgb(235,124,12)" fg:x="59292" fg:w="67"/><text x="30.5073%" y="159.50"></text></g><g><title>&lt;std::sys::pal::unix::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (72 samples, 0.04%)</title><rect x="30.2553%" y="165" width="0.0367%" height="15" fill="rgb(224,169,11)" fg:x="59288" fg:w="72"/><text x="30.5053%" y="175.50"></text></g><g><title>&lt;std::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (73 samples, 0.04%)</title><rect x="30.2553%" y="181" width="0.0373%" height="15" fill="rgb(250,166,2)" fg:x="59288" fg:w="73"/><text x="30.5053%" y="191.50"></text></g><g><title>std::path::Path::is_dir (39 samples, 0.02%)</title><rect x="30.3028%" y="181" width="0.0199%" height="15" fill="rgb(242,216,29)" fg:x="59381" fg:w="39"/><text x="30.5528%" y="191.50"></text></g><g><title>stat$INODE64 (38 samples, 0.02%)</title><rect x="30.3033%" y="165" width="0.0194%" height="15" fill="rgb(230,116,27)" fg:x="59382" fg:w="38"/><text x="30.5533%" y="175.50"></text></g><g><title>0x7ff8068449e1 (82 samples, 0.04%)</title><rect x="30.3242%" y="165" width="0.0418%" height="15" fill="rgb(228,99,48)" fg:x="59423" fg:w="82"/><text x="30.5742%" y="175.50"></text></g><g><title>open$NOCANCEL (82 samples, 0.04%)</title><rect x="30.3242%" y="149" width="0.0418%" height="15" fill="rgb(253,11,6)" fg:x="59423" fg:w="82"/><text x="30.5742%" y="159.50"></text></g><g><title>__open_nocancel (81 samples, 0.04%)</title><rect x="30.3247%" y="133" width="0.0413%" height="15" fill="rgb(247,143,39)" fg:x="59424" fg:w="81"/><text x="30.5747%" y="143.50"></text></g><g><title>std::sys::pal::unix::fs::readdir (102 samples, 0.05%)</title><rect x="30.3232%" y="181" width="0.0521%" height="15" fill="rgb(236,97,10)" fg:x="59421" fg:w="102"/><text x="30.5732%" y="191.50"></text></g><g><title>common::util::other::dir_recursive (267 samples, 0.14%)</title><rect x="30.2538%" y="197" width="0.1363%" height="15" fill="rgb(233,208,19)" fg:x="59285" fg:w="267"/><text x="30.5038%" y="207.50"></text></g><g><title>std::sys::pal::unix::fs::stat (29 samples, 0.01%)</title><rect x="30.3752%" y="181" width="0.0148%" height="15" fill="rgb(216,164,2)" fg:x="59523" fg:w="29"/><text x="30.6252%" y="191.50"></text></g><g><title>stat$INODE64 (28 samples, 0.01%)</title><rect x="30.3757%" y="165" width="0.0143%" height="15" fill="rgb(220,129,5)" fg:x="59524" fg:w="28"/><text x="30.6257%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;storagev2::disk::writer::buffer::PartitionWriterBuffer::write_batch::{{closure}}&gt; (2,883 samples, 1.47%)</title><rect x="30.3900%" y="197" width="1.4712%" height="15" fill="rgb(242,17,10)" fg:x="59552" fg:w="2883"/><text x="30.6400%" y="207.50"></text></g><g><title>0x7ff8067b6c33 (22 samples, 0.01%)</title><rect x="32.3486%" y="149" width="0.0112%" height="15" fill="rgb(242,107,0)" fg:x="63390" fg:w="22"/><text x="32.5986%" y="159.50"></text></g><g><title>0x7ff8067b643d (48 samples, 0.02%)</title><rect x="32.3384%" y="165" width="0.0245%" height="15" fill="rgb(251,28,31)" fg:x="63370" fg:w="48"/><text x="32.5884%" y="175.50"></text></g><g><title>0x7ff8067b6254 (99 samples, 0.05%)</title><rect x="32.3231%" y="181" width="0.0505%" height="15" fill="rgb(233,223,10)" fg:x="63340" fg:w="99"/><text x="32.5731%" y="191.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::push (2,305 samples, 1.18%)</title><rect x="31.8613%" y="197" width="1.1763%" height="15" fill="rgb(215,21,27)" fg:x="62435" fg:w="2305"/><text x="32.1113%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (1,300 samples, 0.66%)</title><rect x="32.3741%" y="181" width="0.6634%" height="15" fill="rgb(232,23,21)" fg:x="63440" fg:w="1300"/><text x="32.6241%" y="191.50"></text></g><g><title>std::sys::pal::unix::fs::stat (66 samples, 0.03%)</title><rect x="33.0452%" y="197" width="0.0337%" height="15" fill="rgb(244,5,23)" fg:x="64755" fg:w="66"/><text x="33.2952%" y="207.50"></text></g><g><title>stat$INODE64 (65 samples, 0.03%)</title><rect x="33.0457%" y="181" width="0.0332%" height="15" fill="rgb(226,81,46)" fg:x="64756" fg:w="65"/><text x="33.2957%" y="191.50"></text></g><g><title>common::util::other::check_exist (25 samples, 0.01%)</title><rect x="33.0824%" y="181" width="0.0128%" height="15" fill="rgb(247,70,30)" fg:x="64828" fg:w="25"/><text x="33.3324%" y="191.50"></text></g><g><title>std::sys::pal::unix::fs::stat (25 samples, 0.01%)</title><rect x="33.0824%" y="165" width="0.0128%" height="15" fill="rgb(212,68,19)" fg:x="64828" fg:w="25"/><text x="33.3324%" y="175.50"></text></g><g><title>stat$INODE64 (25 samples, 0.01%)</title><rect x="33.0824%" y="149" width="0.0128%" height="15" fill="rgb(240,187,13)" fg:x="64828" fg:w="25"/><text x="33.3324%" y="159.50"></text></g><g><title>std::fs::OpenOptions::_open (436 samples, 0.22%)</title><rect x="33.0952%" y="181" width="0.2225%" height="15" fill="rgb(223,113,26)" fg:x="64853" fg:w="436"/><text x="33.3452%" y="191.50"></text></g><g><title>open (436 samples, 0.22%)</title><rect x="33.0952%" y="165" width="0.2225%" height="15" fill="rgb(206,192,2)" fg:x="64853" fg:w="436"/><text x="33.3452%" y="175.50"></text></g><g><title>__open (436 samples, 0.22%)</title><rect x="33.0952%" y="149" width="0.2225%" height="15" fill="rgb(241,108,4)" fg:x="64853" fg:w="436"/><text x="33.3452%" y="159.50"></text></g><g><title>storagev2::disk::fd_cache::create_writer_fd (468 samples, 0.24%)</title><rect x="33.0799%" y="197" width="0.2388%" height="15" fill="rgb(247,173,49)" fg:x="64823" fg:w="468"/><text x="33.3299%" y="207.50"></text></g><g><title>std::fs::OpenOptions::_open (440 samples, 0.22%)</title><rect x="33.3274%" y="165" width="0.2245%" height="15" fill="rgb(224,114,35)" fg:x="65308" fg:w="440"/><text x="33.5774%" y="175.50"></text></g><g><title>open (440 samples, 0.22%)</title><rect x="33.3274%" y="149" width="0.2245%" height="15" fill="rgb(245,159,27)" fg:x="65308" fg:w="440"/><text x="33.5774%" y="159.50"></text></g><g><title>__open (440 samples, 0.22%)</title><rect x="33.3274%" y="133" width="0.2245%" height="15" fill="rgb(245,172,44)" fg:x="65308" fg:w="440"/><text x="33.5774%" y="143.50"></text></g><g><title>storagev2::disk::meta::WriterPositionPtr::new (458 samples, 0.23%)</title><rect x="33.3187%" y="197" width="0.2337%" height="15" fill="rgb(236,23,11)" fg:x="65291" fg:w="458"/><text x="33.5687%" y="207.50"></text></g><g><title>storagev2::disk::fd_cache::create_writer_fd (454 samples, 0.23%)</title><rect x="33.3207%" y="181" width="0.2317%" height="15" fill="rgb(205,117,38)" fg:x="65295" fg:w="454"/><text x="33.5707%" y="191.50"></text></g><g><title>storagev2::disk::meta::gen_record_filename (34 samples, 0.02%)</title><rect x="33.5524%" y="197" width="0.0174%" height="15" fill="rgb(237,72,25)" fg:x="65749" fg:w="34"/><text x="33.8024%" y="207.50"></text></g><g><title>alloc::fmt::format::format_inner (32 samples, 0.02%)</title><rect x="33.5534%" y="181" width="0.0163%" height="15" fill="rgb(244,70,9)" fg:x="65751" fg:w="32"/><text x="33.8034%" y="191.50"></text></g><g><title>core::fmt::write (30 samples, 0.02%)</title><rect x="33.5545%" y="165" width="0.0153%" height="15" fill="rgb(217,125,39)" fg:x="65753" fg:w="30"/><text x="33.8045%" y="175.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (42 samples, 0.02%)</title><rect x="33.5759%" y="165" width="0.0214%" height="15" fill="rgb(235,36,10)" fg:x="65795" fg:w="42"/><text x="33.8259%" y="175.50"></text></g><g><title>pthread_cond_signal (41 samples, 0.02%)</title><rect x="33.5764%" y="149" width="0.0209%" height="15" fill="rgb(251,123,47)" fg:x="65796" fg:w="41"/><text x="33.8264%" y="159.50"></text></g><g><title>__psynch_cvsignal (41 samples, 0.02%)</title><rect x="33.5764%" y="133" width="0.0209%" height="15" fill="rgb(221,13,13)" fg:x="65796" fg:w="41"/><text x="33.8264%" y="143.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (52 samples, 0.03%)</title><rect x="33.5718%" y="181" width="0.0265%" height="15" fill="rgb(238,131,9)" fg:x="65787" fg:w="52"/><text x="33.8218%" y="191.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (54 samples, 0.03%)</title><rect x="33.5718%" y="197" width="0.0276%" height="15" fill="rgb(211,50,8)" fg:x="65787" fg:w="54"/><text x="33.8218%" y="207.50"></text></g><g><title>0x7ff80699f892 (28 samples, 0.01%)</title><rect x="44.9742%" y="181" width="0.0143%" height="15" fill="rgb(245,182,24)" fg:x="88131" fg:w="28"/><text x="45.2242%" y="191.50"></text></g><g><title>0x7ff80699f89f (22 samples, 0.01%)</title><rect x="44.9905%" y="181" width="0.0112%" height="15" fill="rgb(242,14,37)" fg:x="88163" fg:w="22"/><text x="45.2405%" y="191.50"></text></g><g><title>&lt;tokio::sync::mpsc::bounded::Semaphore as tokio::sync::mpsc::chan::Semaphore&gt;::is_idle (2,655 samples, 1.35%)</title><rect x="45.0135%" y="181" width="1.3549%" height="15" fill="rgb(246,228,12)" fg:x="88208" fg:w="2655"/><text x="45.2635%" y="191.50"></text></g><g><title>&lt;tokio::task::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (8,187 samples, 4.18%)</title><rect x="46.3684%" y="181" width="4.1779%" height="15" fill="rgb(213,55,15)" fg:x="90863" fg:w="8187"/><text x="46.6184%" y="191.50">&lt;toki..</text></g><g><title>0x7ff8067b9278 (29 samples, 0.01%)</title><rect x="50.5550%" y="117" width="0.0148%" height="15" fill="rgb(209,9,3)" fg:x="99067" fg:w="29"/><text x="50.8050%" y="127.50"></text></g><g><title>0x7ff8067c1754 (28 samples, 0.01%)</title><rect x="50.5555%" y="101" width="0.0143%" height="15" fill="rgb(230,59,30)" fg:x="99068" fg:w="28"/><text x="50.8055%" y="111.50"></text></g><g><title>vm_allocate (28 samples, 0.01%)</title><rect x="50.5555%" y="85" width="0.0143%" height="15" fill="rgb(209,121,21)" fg:x="99068" fg:w="28"/><text x="50.8055%" y="95.50"></text></g><g><title>mach_vm_allocate (28 samples, 0.01%)</title><rect x="50.5555%" y="69" width="0.0143%" height="15" fill="rgb(220,109,13)" fg:x="99068" fg:w="28"/><text x="50.8055%" y="79.50"></text></g><g><title>_kernelrpc_mach_vm_allocate_trap (28 samples, 0.01%)</title><rect x="50.5555%" y="53" width="0.0143%" height="15" fill="rgb(232,18,1)" fg:x="99068" fg:w="28"/><text x="50.8055%" y="63.50"></text></g><g><title>0x7ff8067bfcaf (46 samples, 0.02%)</title><rect x="50.5749%" y="85" width="0.0235%" height="15" fill="rgb(215,41,42)" fg:x="99106" fg:w="46"/><text x="50.8249%" y="95.50"></text></g><g><title>0x7ff8067ce2b0 (46 samples, 0.02%)</title><rect x="50.5749%" y="69" width="0.0235%" height="15" fill="rgb(224,123,36)" fg:x="99106" fg:w="46"/><text x="50.8249%" y="79.50"></text></g><g><title>mach_vm_map (46 samples, 0.02%)</title><rect x="50.5749%" y="53" width="0.0235%" height="15" fill="rgb(240,125,3)" fg:x="99106" fg:w="46"/><text x="50.8249%" y="63.50"></text></g><g><title>_kernelrpc_mach_vm_map_trap (45 samples, 0.02%)</title><rect x="50.5754%" y="37" width="0.0230%" height="15" fill="rgb(205,98,50)" fg:x="99107" fg:w="45"/><text x="50.8254%" y="47.50"></text></g><g><title>0x7ff8067b936f (62 samples, 0.03%)</title><rect x="50.5698%" y="117" width="0.0316%" height="15" fill="rgb(205,185,37)" fg:x="99096" fg:w="62"/><text x="50.8198%" y="127.50"></text></g><g><title>0x7ff8067b62da (57 samples, 0.03%)</title><rect x="50.5723%" y="101" width="0.0291%" height="15" fill="rgb(238,207,15)" fg:x="99101" fg:w="57"/><text x="50.8223%" y="111.50"></text></g><g><title>0x7ff8067b93b0 (1,037 samples, 0.53%)</title><rect x="50.6014%" y="117" width="0.5292%" height="15" fill="rgb(213,199,42)" fg:x="99158" fg:w="1037"/><text x="50.8514%" y="127.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1,037 samples, 0.53%)</title><rect x="50.6014%" y="101" width="0.5292%" height="15" fill="rgb(235,201,11)" fg:x="99158" fg:w="1037"/><text x="50.8514%" y="111.50"></text></g><g><title>0x7ff8067bfeda (206 samples, 0.11%)</title><rect x="51.1428%" y="85" width="0.1051%" height="15" fill="rgb(207,46,11)" fg:x="100219" fg:w="206"/><text x="51.3928%" y="95.50"></text></g><g><title>0x7ff8067ce62e (206 samples, 0.11%)</title><rect x="51.1428%" y="69" width="0.1051%" height="15" fill="rgb(241,35,35)" fg:x="100219" fg:w="206"/><text x="51.3928%" y="79.50"></text></g><g><title>mach_vm_deallocate (206 samples, 0.11%)</title><rect x="51.1428%" y="53" width="0.1051%" height="15" fill="rgb(243,32,47)" fg:x="100219" fg:w="206"/><text x="51.3928%" y="63.50"></text></g><g><title>_kernelrpc_mach_vm_deallocate_trap (205 samples, 0.10%)</title><rect x="51.1434%" y="37" width="0.1046%" height="15" fill="rgb(247,202,23)" fg:x="100220" fg:w="205"/><text x="51.3934%" y="47.50"></text></g><g><title>0x7ff8067b93bd (234 samples, 0.12%)</title><rect x="51.1306%" y="117" width="0.1194%" height="15" fill="rgb(219,102,11)" fg:x="100195" fg:w="234"/><text x="51.3806%" y="127.50"></text></g><g><title>0x7ff8067caaa5 (230 samples, 0.12%)</title><rect x="51.1326%" y="101" width="0.1174%" height="15" fill="rgb(243,110,44)" fg:x="100199" fg:w="230"/><text x="51.3826%" y="111.50"></text></g><g><title>0x7ff8067dfb9f (1,368 samples, 0.70%)</title><rect x="50.5524%" y="133" width="0.6981%" height="15" fill="rgb(222,74,54)" fg:x="99062" fg:w="1368"/><text x="50.8024%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,382 samples, 0.71%)</title><rect x="50.5463%" y="181" width="0.7052%" height="15" fill="rgb(216,99,12)" fg:x="99050" fg:w="1382"/><text x="50.7963%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow::h0abff924dac867ca (.llvm.93005810599003075) (1,380 samples, 0.70%)</title><rect x="50.5473%" y="165" width="0.7042%" height="15" fill="rgb(226,22,26)" fg:x="99052" fg:w="1380"/><text x="50.7973%" y="175.50"></text></g><g><title>0x7ff8067e026b (1,373 samples, 0.70%)</title><rect x="50.5509%" y="149" width="0.7007%" height="15" fill="rgb(217,163,10)" fg:x="99059" fg:w="1373"/><text x="50.8009%" y="159.50"></text></g><g><title>tokio::runtime::context::defer (167 samples, 0.09%)</title><rect x="51.2515%" y="181" width="0.0852%" height="15" fill="rgb(213,25,53)" fg:x="100432" fg:w="167"/><text x="51.5015%" y="191.50"></text></g><g><title>tokio::runtime::scheduler::defer::Defer::defer (143 samples, 0.07%)</title><rect x="51.3368%" y="181" width="0.0730%" height="15" fill="rgb(252,105,26)" fg:x="100599" fg:w="143"/><text x="51.5868%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (147 samples, 0.08%)</title><rect x="51.4097%" y="181" width="0.0750%" height="15" fill="rgb(220,39,43)" fg:x="100742" fg:w="147"/><text x="51.6597%" y="191.50"></text></g><g><title>tokio::runtime::context::with_scheduler (39 samples, 0.02%)</title><rect x="51.6680%" y="149" width="0.0199%" height="15" fill="rgb(229,68,48)" fg:x="101248" fg:w="39"/><text x="51.9180%" y="159.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked::h75cb40919419cfec (.llvm.6710397505999662456) (622 samples, 0.32%)</title><rect x="51.4847%" y="181" width="0.3174%" height="15" fill="rgb(252,8,32)" fg:x="100889" fg:w="622"/><text x="51.7347%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (304 samples, 0.16%)</title><rect x="51.6470%" y="165" width="0.1551%" height="15" fill="rgb(223,20,43)" fg:x="101207" fg:w="304"/><text x="51.8970%" y="175.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (212 samples, 0.11%)</title><rect x="51.6940%" y="149" width="0.1082%" height="15" fill="rgb(229,81,49)" fg:x="101299" fg:w="212"/><text x="51.9440%" y="159.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (20,068 samples, 10.24%)</title><rect x="51.8022%" y="181" width="10.2409%" height="15" fill="rgb(236,28,36)" fg:x="101511" fg:w="20068"/><text x="52.0522%" y="191.50">tokio::sync::mp..</text></g><g><title>core::sync::atomic::atomic_compare_exchange::ha390f808134b3a7b (.llvm.7773406876365782772) (26 samples, 0.01%)</title><rect x="62.0298%" y="165" width="0.0133%" height="15" fill="rgb(249,185,26)" fg:x="121553" fg:w="26"/><text x="62.2798%" y="175.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (35 samples, 0.02%)</title><rect x="62.0431%" y="181" width="0.0179%" height="15" fill="rgb(249,174,33)" fg:x="121579" fg:w="35"/><text x="62.2931%" y="191.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv_many (55,802 samples, 28.48%)</title><rect x="33.6035%" y="197" width="28.4764%" height="15" fill="rgb(233,201,37)" fg:x="65849" fg:w="55802"/><text x="33.8535%" y="207.50">tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv_many</text></g><g><title>tokio::task::coop::register_waker (37 samples, 0.02%)</title><rect x="62.0609%" y="181" width="0.0189%" height="15" fill="rgb(221,78,26)" fg:x="121614" fg:w="37"/><text x="62.3109%" y="191.50"></text></g><g><title>storagev2::disk::writer::DiskStorageWriter::get_partition_writer::_$u7b$$u7b$closure$u7d$$u7d$::_$u7b$$u7b$closure$u7d$$u7d$::h18e633dc827e9b7e (.llvm.3445545093588245694) (111,923 samples, 57.12%)</title><rect x="4.9699%" y="213" width="57.1155%" height="15" fill="rgb(250,127,30)" fg:x="9739" fg:w="111923"/><text x="5.2199%" y="223.50">storagev2::disk::writer::DiskStorageWriter::get_partition_writer::_$u7b$$u7b$closure$u7d$$u7d$..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (37 samples, 0.02%)</title><rect x="62.3314%" y="149" width="0.0189%" height="15" fill="rgb(230,49,44)" fg:x="122144" fg:w="37"/><text x="62.5814%" y="159.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (126 samples, 0.06%)</title><rect x="62.2947%" y="165" width="0.0643%" height="15" fill="rgb(229,67,23)" fg:x="122072" fg:w="126"/><text x="62.5447%" y="175.50"></text></g><g><title>0x7ff8067bac2e (20 samples, 0.01%)</title><rect x="62.4314%" y="117" width="0.0102%" height="15" fill="rgb(249,83,47)" fg:x="122340" fg:w="20"/><text x="62.6814%" y="127.50"></text></g><g><title>0x7ff8067ba222 (44 samples, 0.02%)</title><rect x="62.4294%" y="133" width="0.0225%" height="15" fill="rgb(215,43,3)" fg:x="122336" fg:w="44"/><text x="62.6794%" y="143.50"></text></g><g><title>0x7ff8067ba2bc (26 samples, 0.01%)</title><rect x="62.4529%" y="133" width="0.0133%" height="15" fill="rgb(238,154,13)" fg:x="122382" fg:w="26"/><text x="62.7029%" y="143.50"></text></g><g><title>0x7ff8067ba3bf (24 samples, 0.01%)</title><rect x="62.4702%" y="133" width="0.0122%" height="15" fill="rgb(219,56,2)" fg:x="122416" fg:w="24"/><text x="62.7202%" y="143.50"></text></g><g><title>0x7ff8067e3f32 (22 samples, 0.01%)</title><rect x="62.4712%" y="117" width="0.0112%" height="15" fill="rgb(233,0,4)" fg:x="122418" fg:w="22"/><text x="62.7212%" y="127.50"></text></g><g><title>0x7ff8067befc6 (22 samples, 0.01%)</title><rect x="62.4712%" y="101" width="0.0112%" height="15" fill="rgb(235,30,7)" fg:x="122418" fg:w="22"/><text x="62.7212%" y="111.50"></text></g><g><title>0x7ff8067ce738 (22 samples, 0.01%)</title><rect x="62.4712%" y="85" width="0.0112%" height="15" fill="rgb(250,79,13)" fg:x="122418" fg:w="22"/><text x="62.7212%" y="95.50"></text></g><g><title>madvise (22 samples, 0.01%)</title><rect x="62.4712%" y="69" width="0.0112%" height="15" fill="rgb(211,146,34)" fg:x="122418" fg:w="22"/><text x="62.7212%" y="79.50"></text></g><g><title>0x7ff8067b9d11 (197 samples, 0.10%)</title><rect x="62.3957%" y="149" width="0.1005%" height="15" fill="rgb(228,22,38)" fg:x="122270" fg:w="197"/><text x="62.6457%" y="159.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (353 samples, 0.18%)</title><rect x="62.3610%" y="165" width="0.1801%" height="15" fill="rgb(235,168,5)" fg:x="122202" fg:w="353"/><text x="62.6110%" y="175.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (724 samples, 0.37%)</title><rect x="62.1737%" y="181" width="0.3695%" height="15" fill="rgb(221,155,16)" fg:x="121835" fg:w="724"/><text x="62.4237%" y="191.50"></text></g><g><title>0x7ff8067b742f (50 samples, 0.03%)</title><rect x="62.6136%" y="85" width="0.0255%" height="15" fill="rgb(215,215,53)" fg:x="122697" fg:w="50"/><text x="62.8636%" y="95.50"></text></g><g><title>0x7ff8067bdd8f (69 samples, 0.04%)</title><rect x="62.6095%" y="101" width="0.0352%" height="15" fill="rgb(223,4,10)" fg:x="122689" fg:w="69"/><text x="62.8595%" y="111.50"></text></g><g><title>0x7ff8067b9d11 (27 samples, 0.01%)</title><rect x="62.6560%" y="85" width="0.0138%" height="15" fill="rgb(234,103,6)" fg:x="122780" fg:w="27"/><text x="62.9060%" y="95.50"></text></g><g><title>0x7ff8067dfd99 (135 samples, 0.07%)</title><rect x="62.6044%" y="117" width="0.0689%" height="15" fill="rgb(227,97,0)" fg:x="122679" fg:w="135"/><text x="62.8544%" y="127.50"></text></g><g><title>0x7ff8067be058 (46 samples, 0.02%)</title><rect x="62.6498%" y="101" width="0.0235%" height="15" fill="rgb(234,150,53)" fg:x="122768" fg:w="46"/><text x="62.8998%" y="111.50"></text></g><g><title>__rdl_alloc (151 samples, 0.08%)</title><rect x="62.5968%" y="149" width="0.0771%" height="15" fill="rgb(228,201,54)" fg:x="122664" fg:w="151"/><text x="62.8468%" y="159.50"></text></g><g><title>0x7ff8067e0345 (148 samples, 0.08%)</title><rect x="62.5983%" y="133" width="0.0755%" height="15" fill="rgb(222,22,37)" fg:x="122667" fg:w="148"/><text x="62.8483%" y="143.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (26 samples, 0.01%)</title><rect x="62.6988%" y="133" width="0.0133%" height="15" fill="rgb(237,53,32)" fg:x="122864" fg:w="26"/><text x="62.9488%" y="143.50"></text></g><g><title>_pthread_mutex_firstfit_wake (24 samples, 0.01%)</title><rect x="62.6999%" y="117" width="0.0122%" height="15" fill="rgb(233,25,53)" fg:x="122866" fg:w="24"/><text x="62.9499%" y="127.50"></text></g><g><title>__psynch_mutexdrop (24 samples, 0.01%)</title><rect x="62.6999%" y="101" width="0.0122%" height="15" fill="rgb(210,40,34)" fg:x="122866" fg:w="24"/><text x="62.9499%" y="111.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (67 samples, 0.03%)</title><rect x="62.7121%" y="133" width="0.0342%" height="15" fill="rgb(241,220,44)" fg:x="122890" fg:w="67"/><text x="62.9621%" y="143.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (24 samples, 0.01%)</title><rect x="62.7340%" y="117" width="0.0122%" height="15" fill="rgb(235,28,35)" fg:x="122933" fg:w="24"/><text x="62.9840%" y="127.50"></text></g><g><title>__psynch_cvsignal (2,511 samples, 1.28%)</title><rect x="62.7708%" y="101" width="1.2814%" height="15" fill="rgb(210,56,17)" fg:x="123005" fg:w="2511"/><text x="63.0208%" y="111.50"></text></g><g><title>pthread_cond_signal (2,532 samples, 1.29%)</title><rect x="62.7621%" y="117" width="1.2921%" height="15" fill="rgb(224,130,29)" fg:x="122988" fg:w="2532"/><text x="63.0121%" y="127.50"></text></g><g><title>pthread_mutex_lock (33 samples, 0.02%)</title><rect x="64.0542%" y="117" width="0.0168%" height="15" fill="rgb(235,212,8)" fg:x="125520" fg:w="33"/><text x="64.3042%" y="127.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (37 samples, 0.02%)</title><rect x="64.0711%" y="117" width="0.0189%" height="15" fill="rgb(223,33,50)" fg:x="125553" fg:w="37"/><text x="64.3211%" y="127.50"></text></g><g><title>0x7ff80684e86d (33 samples, 0.02%)</title><rect x="64.0731%" y="101" width="0.0168%" height="15" fill="rgb(219,149,13)" fg:x="125557" fg:w="33"/><text x="64.3231%" y="111.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (2,627 samples, 1.34%)</title><rect x="62.7499%" y="133" width="1.3406%" height="15" fill="rgb(250,156,29)" fg:x="122964" fg:w="2627"/><text x="62.9999%" y="143.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::start_seek (3,037 samples, 1.55%)</title><rect x="62.5432%" y="181" width="1.5498%" height="15" fill="rgb(216,193,19)" fg:x="122559" fg:w="3037"/><text x="62.7932%" y="191.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (2,970 samples, 1.52%)</title><rect x="62.5774%" y="165" width="1.5156%" height="15" fill="rgb(216,135,14)" fg:x="122626" fg:w="2970"/><text x="62.8274%" y="175.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (2,777 samples, 1.42%)</title><rect x="62.6759%" y="149" width="1.4171%" height="15" fill="rgb(241,47,5)" fg:x="122819" fg:w="2777"/><text x="62.9259%" y="159.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (57 samples, 0.03%)</title><rect x="64.1155%" y="165" width="0.0291%" height="15" fill="rgb(233,42,35)" fg:x="125640" fg:w="57"/><text x="64.3655%" y="175.50"></text></g><g><title>0x7ff8067b742f (62 samples, 0.03%)</title><rect x="64.1818%" y="85" width="0.0316%" height="15" fill="rgb(231,13,6)" fg:x="125770" fg:w="62"/><text x="64.4318%" y="95.50"></text></g><g><title>0x7ff8067bdd8f (85 samples, 0.04%)</title><rect x="64.1757%" y="101" width="0.0434%" height="15" fill="rgb(207,181,40)" fg:x="125758" fg:w="85"/><text x="64.4257%" y="111.50"></text></g><g><title>0x7ff8067b9d11 (26 samples, 0.01%)</title><rect x="64.2354%" y="85" width="0.0133%" height="15" fill="rgb(254,173,49)" fg:x="125875" fg:w="26"/><text x="64.4854%" y="95.50"></text></g><g><title>0x7ff8067be058 (42 samples, 0.02%)</title><rect x="64.2298%" y="101" width="0.0214%" height="15" fill="rgb(221,1,38)" fg:x="125864" fg:w="42"/><text x="64.4798%" y="111.50"></text></g><g><title>0x7ff8067dfd99 (157 samples, 0.08%)</title><rect x="64.1716%" y="117" width="0.0801%" height="15" fill="rgb(206,124,46)" fg:x="125750" fg:w="157"/><text x="64.4216%" y="127.50"></text></g><g><title>__rdl_alloc (174 samples, 0.09%)</title><rect x="64.1639%" y="149" width="0.0888%" height="15" fill="rgb(249,21,11)" fg:x="125735" fg:w="174"/><text x="64.4139%" y="159.50"></text></g><g><title>0x7ff8067e0345 (169 samples, 0.09%)</title><rect x="64.1665%" y="133" width="0.0862%" height="15" fill="rgb(222,201,40)" fg:x="125740" fg:w="169"/><text x="64.4165%" y="143.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (43 samples, 0.02%)</title><rect x="64.2818%" y="133" width="0.0219%" height="15" fill="rgb(235,61,29)" fg:x="125966" fg:w="43"/><text x="64.5318%" y="143.50"></text></g><g><title>_pthread_mutex_firstfit_wake (42 samples, 0.02%)</title><rect x="64.2823%" y="117" width="0.0214%" height="15" fill="rgb(219,207,3)" fg:x="125967" fg:w="42"/><text x="64.5323%" y="127.50"></text></g><g><title>__psynch_mutexdrop (41 samples, 0.02%)</title><rect x="64.2828%" y="101" width="0.0209%" height="15" fill="rgb(222,56,46)" fg:x="125968" fg:w="41"/><text x="64.5328%" y="111.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (90 samples, 0.05%)</title><rect x="64.3043%" y="133" width="0.0459%" height="15" fill="rgb(239,76,54)" fg:x="126010" fg:w="90"/><text x="64.5543%" y="143.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (26 samples, 0.01%)</title><rect x="64.3369%" y="117" width="0.0133%" height="15" fill="rgb(231,124,27)" fg:x="126074" fg:w="26"/><text x="64.5869%" y="127.50"></text></g><g><title>__psynch_cvsignal (2,511 samples, 1.28%)</title><rect x="64.3757%" y="101" width="1.2814%" height="15" fill="rgb(249,195,6)" fg:x="126150" fg:w="2511"/><text x="64.6257%" y="111.50"></text></g><g><title>pthread_cond_signal (2,542 samples, 1.30%)</title><rect x="64.3681%" y="117" width="1.2972%" height="15" fill="rgb(237,174,47)" fg:x="126135" fg:w="2542"/><text x="64.6181%" y="127.50"></text></g><g><title>pthread_mutex_lock (34 samples, 0.02%)</title><rect x="65.6653%" y="117" width="0.0174%" height="15" fill="rgb(206,201,31)" fg:x="128677" fg:w="34"/><text x="65.9153%" y="127.50"></text></g><g><title>0x7ff80684e86d (33 samples, 0.02%)</title><rect x="65.6841%" y="101" width="0.0168%" height="15" fill="rgb(231,57,52)" fg:x="128714" fg:w="33"/><text x="65.9341%" y="111.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (2,645 samples, 1.35%)</title><rect x="64.3517%" y="133" width="1.3498%" height="15" fill="rgb(248,177,22)" fg:x="126103" fg:w="2645"/><text x="64.6017%" y="143.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (37 samples, 0.02%)</title><rect x="65.6826%" y="117" width="0.0189%" height="15" fill="rgb(215,211,37)" fg:x="128711" fg:w="37"/><text x="65.9326%" y="127.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (3,166 samples, 1.62%)</title><rect x="64.0930%" y="181" width="1.6156%" height="15" fill="rgb(241,128,51)" fg:x="125596" fg:w="3166"/><text x="64.3430%" y="191.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (3,061 samples, 1.56%)</title><rect x="64.1466%" y="165" width="1.5621%" height="15" fill="rgb(227,165,31)" fg:x="125701" fg:w="3061"/><text x="64.3966%" y="175.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (2,846 samples, 1.45%)</title><rect x="64.2563%" y="149" width="1.4523%" height="15" fill="rgb(228,167,24)" fg:x="125916" fg:w="2846"/><text x="64.5063%" y="159.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::pop (40 samples, 0.02%)</title><rect x="65.7086%" y="181" width="0.0204%" height="15" fill="rgb(228,143,12)" fg:x="128762" fg:w="40"/><text x="65.9586%" y="191.50"></text></g><g><title>storagev2::disk::writer::flusher::Flusher::new::_$u7b$$u7b$closure$u7d$$u7d$::h32cdedf4a38f5696 (.llvm.3445545093588245694) (7,134 samples, 3.64%)</title><rect x="62.0890%" y="213" width="3.6406%" height="15" fill="rgb(249,149,8)" fg:x="121669" fg:w="7134"/><text x="62.3390%" y="223.50">stor..</text></g><g><title>storagev2::disk::writer::buffer::PartitionWriterBuffer::flush::_{{closure}} (7,105 samples, 3.63%)</title><rect x="62.1038%" y="197" width="3.6258%" height="15" fill="rgb(243,35,44)" fg:x="121698" fg:w="7105"/><text x="62.3538%" y="207.50">stor..</text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::start_seek (34 samples, 0.02%)</title><rect x="65.7347%" y="197" width="0.0174%" height="15" fill="rgb(246,89,9)" fg:x="128813" fg:w="34"/><text x="65.9847%" y="207.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (32 samples, 0.02%)</title><rect x="65.7357%" y="181" width="0.0163%" height="15" fill="rgb(233,213,13)" fg:x="128815" fg:w="32"/><text x="65.9857%" y="191.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (29 samples, 0.01%)</title><rect x="65.7372%" y="165" width="0.0148%" height="15" fill="rgb(233,141,41)" fg:x="128818" fg:w="29"/><text x="65.9872%" y="175.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (27 samples, 0.01%)</title><rect x="65.7382%" y="149" width="0.0138%" height="15" fill="rgb(239,167,4)" fg:x="128820" fg:w="27"/><text x="65.9882%" y="159.50"></text></g><g><title>pthread_cond_signal (27 samples, 0.01%)</title><rect x="65.7382%" y="133" width="0.0138%" height="15" fill="rgb(209,217,16)" fg:x="128820" fg:w="27"/><text x="65.9882%" y="143.50"></text></g><g><title>__psynch_cvsignal (27 samples, 0.01%)</title><rect x="65.7382%" y="117" width="0.0138%" height="15" fill="rgb(219,88,35)" fg:x="128820" fg:w="27"/><text x="65.9882%" y="127.50"></text></g><g><title>__psynch_cvsignal (22 samples, 0.01%)</title><rect x="65.7561%" y="117" width="0.0112%" height="15" fill="rgb(220,193,23)" fg:x="128855" fg:w="22"/><text x="66.0061%" y="127.50"></text></g><g><title>pthread_cond_signal (23 samples, 0.01%)</title><rect x="65.7561%" y="133" width="0.0117%" height="15" fill="rgb(230,90,52)" fg:x="128855" fg:w="23"/><text x="66.0061%" y="143.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (27 samples, 0.01%)</title><rect x="65.7556%" y="149" width="0.0138%" height="15" fill="rgb(252,106,19)" fg:x="128854" fg:w="27"/><text x="66.0056%" y="159.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (35 samples, 0.02%)</title><rect x="65.7520%" y="197" width="0.0179%" height="15" fill="rgb(206,74,20)" fg:x="128847" fg:w="35"/><text x="66.0020%" y="207.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (32 samples, 0.02%)</title><rect x="65.7536%" y="181" width="0.0163%" height="15" fill="rgb(230,138,44)" fg:x="128850" fg:w="32"/><text x="66.0036%" y="191.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (30 samples, 0.02%)</title><rect x="65.7546%" y="165" width="0.0153%" height="15" fill="rgb(235,182,43)" fg:x="128852" fg:w="30"/><text x="66.0046%" y="175.50"></text></g><g><title>pthread_cond_signal (36 samples, 0.02%)</title><rect x="65.7811%" y="133" width="0.0184%" height="15" fill="rgb(242,16,51)" fg:x="128904" fg:w="36"/><text x="66.0311%" y="143.50"></text></g><g><title>__psynch_cvsignal (36 samples, 0.02%)</title><rect x="65.7811%" y="117" width="0.0184%" height="15" fill="rgb(248,9,4)" fg:x="128904" fg:w="36"/><text x="66.0311%" y="127.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (37 samples, 0.02%)</title><rect x="65.7811%" y="149" width="0.0189%" height="15" fill="rgb(210,31,22)" fg:x="128904" fg:w="37"/><text x="66.0311%" y="159.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (48 samples, 0.02%)</title><rect x="65.7760%" y="165" width="0.0245%" height="15" fill="rgb(239,54,39)" fg:x="128894" fg:w="48"/><text x="66.0260%" y="175.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (49 samples, 0.03%)</title><rect x="65.7760%" y="181" width="0.0250%" height="15" fill="rgb(230,99,41)" fg:x="128894" fg:w="49"/><text x="66.0260%" y="191.50"></text></g><g><title>tokio::fs::file::File::set_len::_{{closure}} (54 samples, 0.03%)</title><rect x="65.7740%" y="197" width="0.0276%" height="15" fill="rgb(253,106,12)" fg:x="128890" fg:w="54"/><text x="66.0240%" y="207.50"></text></g><g><title>storagev2::disk::writer::flusher::Flusher::new::_$u7b$$u7b$closure$u7d$$u7d$::hca9bed9c64b04d9f (.llvm.3445545093588245694) (151 samples, 0.08%)</title><rect x="65.7296%" y="213" width="0.0771%" height="15" fill="rgb(213,46,41)" fg:x="128803" fg:w="151"/><text x="65.9796%" y="223.50"></text></g><g><title>0x7ff8067b6219 (22 samples, 0.01%)</title><rect x="66.4394%" y="197" width="0.0112%" height="15" fill="rgb(215,133,35)" fg:x="130194" fg:w="22"/><text x="66.6894%" y="207.50"></text></g><g><title>0x7ff8067b7306 (373 samples, 0.19%)</title><rect x="66.4736%" y="181" width="0.1903%" height="15" fill="rgb(213,28,5)" fg:x="130261" fg:w="373"/><text x="66.7236%" y="191.50"></text></g><g><title>0x7ff8067b7314 (39 samples, 0.02%)</title><rect x="66.6645%" y="181" width="0.0199%" height="15" fill="rgb(215,77,49)" fg:x="130635" fg:w="39"/><text x="66.9145%" y="191.50"></text></g><g><title>0x7ff8067b734b (255 samples, 0.13%)</title><rect x="66.7165%" y="181" width="0.1301%" height="15" fill="rgb(248,100,22)" fg:x="130737" fg:w="255"/><text x="66.9665%" y="191.50"></text></g><g><title>0x7ff8067b739f (20 samples, 0.01%)</title><rect x="66.8538%" y="181" width="0.0102%" height="15" fill="rgb(208,67,9)" fg:x="131006" fg:w="20"/><text x="67.1038%" y="191.50"></text></g><g><title>0x7ff8067b73b2 (25 samples, 0.01%)</title><rect x="66.8655%" y="181" width="0.0128%" height="15" fill="rgb(219,133,21)" fg:x="131029" fg:w="25"/><text x="67.1155%" y="191.50"></text></g><g><title>0x7ff8067b7c46 (85 samples, 0.04%)</title><rect x="66.9814%" y="165" width="0.0434%" height="15" fill="rgb(246,46,29)" fg:x="131256" fg:w="85"/><text x="67.2314%" y="175.50"></text></g><g><title>0x7ff8067b7d3a (84 samples, 0.04%)</title><rect x="67.0977%" y="165" width="0.0429%" height="15" fill="rgb(246,185,52)" fg:x="131484" fg:w="84"/><text x="67.3477%" y="175.50"></text></g><g><title>0x7ff8067b809a (40 samples, 0.02%)</title><rect x="67.2437%" y="165" width="0.0204%" height="15" fill="rgb(252,136,11)" fg:x="131770" fg:w="40"/><text x="67.4937%" y="175.50"></text></g><g><title>0x7ff8067b80ce (118 samples, 0.06%)</title><rect x="67.2687%" y="165" width="0.0602%" height="15" fill="rgb(219,138,53)" fg:x="131819" fg:w="118"/><text x="67.5187%" y="175.50"></text></g><g><title>0x7ff8067b81a5 (21 samples, 0.01%)</title><rect x="67.3901%" y="165" width="0.0107%" height="15" fill="rgb(211,51,23)" fg:x="132057" fg:w="21"/><text x="67.6401%" y="175.50"></text></g><g><title>0x7ff8067b833a (20 samples, 0.01%)</title><rect x="67.5391%" y="165" width="0.0102%" height="15" fill="rgb(247,221,28)" fg:x="132349" fg:w="20"/><text x="67.7891%" y="175.50"></text></g><g><title>0x7ff8067b742f (1,337 samples, 0.68%)</title><rect x="66.8870%" y="181" width="0.6823%" height="15" fill="rgb(251,222,45)" fg:x="131071" fg:w="1337"/><text x="67.1370%" y="191.50"></text></g><g><title>0x7ff8067b76f2 (318 samples, 0.16%)</title><rect x="67.5774%" y="181" width="0.1623%" height="15" fill="rgb(217,162,53)" fg:x="132424" fg:w="318"/><text x="67.8274%" y="191.50"></text></g><g><title>0x7ff8067cdfbe (21 samples, 0.01%)</title><rect x="67.7703%" y="181" width="0.0107%" height="15" fill="rgb(229,93,14)" fg:x="132802" fg:w="21"/><text x="68.0203%" y="191.50"></text></g><g><title>0x7ff8067cdfd1 (64 samples, 0.03%)</title><rect x="67.7882%" y="181" width="0.0327%" height="15" fill="rgb(209,67,49)" fg:x="132837" fg:w="64"/><text x="68.0382%" y="191.50"></text></g><g><title>0x7ff8067b622a (2,898 samples, 1.48%)</title><rect x="66.4506%" y="197" width="1.4789%" height="15" fill="rgb(213,87,29)" fg:x="130216" fg:w="2898"/><text x="66.7006%" y="207.50"></text></g><g><title>0x7ff8067cdfda (206 samples, 0.11%)</title><rect x="67.8244%" y="181" width="0.1051%" height="15" fill="rgb(205,151,52)" fg:x="132908" fg:w="206"/><text x="68.0744%" y="191.50"></text></g><g><title>0x7ff8067b9b08 (20 samples, 0.01%)</title><rect x="67.9673%" y="197" width="0.0102%" height="15" fill="rgb(253,215,39)" fg:x="133188" fg:w="20"/><text x="68.2173%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (169 samples, 0.09%)</title><rect x="68.0494%" y="181" width="0.0862%" height="15" fill="rgb(221,220,41)" fg:x="133349" fg:w="169"/><text x="68.2994%" y="191.50"></text></g><g><title>0x7ff8067b9b8b (237 samples, 0.12%)</title><rect x="68.0484%" y="197" width="0.1209%" height="15" fill="rgb(218,133,21)" fg:x="133347" fg:w="237"/><text x="68.2984%" y="207.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (66 samples, 0.03%)</title><rect x="68.1357%" y="181" width="0.0337%" height="15" fill="rgb(221,193,43)" fg:x="133518" fg:w="66"/><text x="68.3857%" y="191.50"></text></g><g><title>0x7ff8067b9ba8 (383 samples, 0.20%)</title><rect x="68.1765%" y="197" width="0.1954%" height="15" fill="rgb(240,128,52)" fg:x="133598" fg:w="383"/><text x="68.4265%" y="207.50"></text></g><g><title>0x7ff8067bac2e (21 samples, 0.01%)</title><rect x="68.6894%" y="165" width="0.0107%" height="15" fill="rgb(253,114,12)" fg:x="134603" fg:w="21"/><text x="68.9394%" y="175.50"></text></g><g><title>0x7ff8067ba0f3 (115 samples, 0.06%)</title><rect x="68.6659%" y="181" width="0.0587%" height="15" fill="rgb(215,223,47)" fg:x="134557" fg:w="115"/><text x="68.9159%" y="191.50"></text></g><g><title>0x7ff8067ba1ba (32 samples, 0.02%)</title><rect x="68.7445%" y="181" width="0.0163%" height="15" fill="rgb(248,225,23)" fg:x="134711" fg:w="32"/><text x="68.9945%" y="191.50"></text></g><g><title>0x7ff8067bac2e (55 samples, 0.03%)</title><rect x="68.7659%" y="165" width="0.0281%" height="15" fill="rgb(250,108,0)" fg:x="134753" fg:w="55"/><text x="69.0159%" y="175.50"></text></g><g><title>0x7ff8067ba222 (96 samples, 0.05%)</title><rect x="68.7623%" y="181" width="0.0490%" height="15" fill="rgb(228,208,7)" fg:x="134746" fg:w="96"/><text x="69.0123%" y="191.50"></text></g><g><title>0x7ff8067ba8a7 (26 samples, 0.01%)</title><rect x="68.8960%" y="165" width="0.0133%" height="15" fill="rgb(244,45,10)" fg:x="135008" fg:w="26"/><text x="69.1460%" y="175.50"></text></g><g><title>0x7ff8067ba2bc (286 samples, 0.15%)</title><rect x="68.8251%" y="181" width="0.1459%" height="15" fill="rgb(207,125,25)" fg:x="134869" fg:w="286"/><text x="69.0751%" y="191.50"></text></g><g><title>0x7ff8067ce738 (47 samples, 0.02%)</title><rect x="69.0272%" y="133" width="0.0240%" height="15" fill="rgb(210,195,18)" fg:x="135265" fg:w="47"/><text x="69.2772%" y="143.50"></text></g><g><title>madvise (46 samples, 0.02%)</title><rect x="69.0277%" y="117" width="0.0235%" height="15" fill="rgb(249,80,12)" fg:x="135266" fg:w="46"/><text x="69.2777%" y="127.50"></text></g><g><title>0x7ff8067befc6 (48 samples, 0.02%)</title><rect x="69.0272%" y="149" width="0.0245%" height="15" fill="rgb(221,65,9)" fg:x="135265" fg:w="48"/><text x="69.2772%" y="159.50"></text></g><g><title>0x7ff8067e3f32 (49 samples, 0.03%)</title><rect x="69.0272%" y="165" width="0.0250%" height="15" fill="rgb(235,49,36)" fg:x="135265" fg:w="49"/><text x="69.2772%" y="175.50"></text></g><g><title>0x7ff8067ba3bf (56 samples, 0.03%)</title><rect x="69.0262%" y="181" width="0.0286%" height="15" fill="rgb(225,32,20)" fg:x="135263" fg:w="56"/><text x="69.2762%" y="191.50"></text></g><g><title>0x7ff8067ce738 (20 samples, 0.01%)</title><rect x="69.0599%" y="133" width="0.0102%" height="15" fill="rgb(215,141,46)" fg:x="135329" fg:w="20"/><text x="69.3099%" y="143.50"></text></g><g><title>0x7ff8067ba5c2 (23 samples, 0.01%)</title><rect x="69.0588%" y="181" width="0.0117%" height="15" fill="rgb(250,160,47)" fg:x="135327" fg:w="23"/><text x="69.3088%" y="191.50"></text></g><g><title>0x7ff8067c103d (21 samples, 0.01%)</title><rect x="69.0599%" y="165" width="0.0107%" height="15" fill="rgb(216,222,40)" fg:x="135329" fg:w="21"/><text x="69.3099%" y="175.50"></text></g><g><title>0x7ff8067befc6 (21 samples, 0.01%)</title><rect x="69.0599%" y="149" width="0.0107%" height="15" fill="rgb(234,217,39)" fg:x="135329" fg:w="21"/><text x="69.3099%" y="159.50"></text></g><g><title>0x7ff8067c5a0f (22 samples, 0.01%)</title><rect x="69.2022%" y="181" width="0.0112%" height="15" fill="rgb(207,178,40)" fg:x="135608" fg:w="22"/><text x="69.4522%" y="191.50"></text></g><g><title>0x7ff8067c5a33 (21 samples, 0.01%)</title><rect x="69.2232%" y="181" width="0.0107%" height="15" fill="rgb(221,136,13)" fg:x="135649" fg:w="21"/><text x="69.4732%" y="191.50"></text></g><g><title>0x7ff8067c5a47 (82 samples, 0.04%)</title><rect x="69.2385%" y="181" width="0.0418%" height="15" fill="rgb(249,199,10)" fg:x="135679" fg:w="82"/><text x="69.4885%" y="191.50"></text></g><g><title>0x7ff8067b9d11 (1,698 samples, 0.87%)</title><rect x="68.4194%" y="197" width="0.8665%" height="15" fill="rgb(249,222,13)" fg:x="134074" fg:w="1698"/><text x="68.6694%" y="207.50"></text></g><g><title>0x7ff8067b9d24 (287 samples, 0.15%)</title><rect x="69.2936%" y="197" width="0.1465%" height="15" fill="rgb(244,185,38)" fg:x="135787" fg:w="287"/><text x="69.5436%" y="207.50"></text></g><g><title>0x7ff8067b9d6d (75 samples, 0.04%)</title><rect x="69.4778%" y="197" width="0.0383%" height="15" fill="rgb(236,202,9)" fg:x="136148" fg:w="75"/><text x="69.7278%" y="207.50"></text></g><g><title>0x7ff8067b9d87 (21 samples, 0.01%)</title><rect x="69.5258%" y="197" width="0.0107%" height="15" fill="rgb(250,229,37)" fg:x="136242" fg:w="21"/><text x="69.7758%" y="207.50"></text></g><g><title>0x7ff8067ca8d3 (22 samples, 0.01%)</title><rect x="69.6166%" y="197" width="0.0112%" height="15" fill="rgb(206,174,23)" fg:x="136420" fg:w="22"/><text x="69.8666%" y="207.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (24 samples, 0.01%)</title><rect x="69.7227%" y="181" width="0.0122%" height="15" fill="rgb(211,33,43)" fg:x="136628" fg:w="24"/><text x="69.9727%" y="191.50"></text></g><g><title>&lt;Unknown Address&gt; (42 samples, 0.02%)</title><rect x="69.7187%" y="197" width="0.0214%" height="15" fill="rgb(245,58,50)" fg:x="136620" fg:w="42"/><text x="69.9687%" y="207.50"></text></g><g><title>DYLD-STUB$$_platform_memmove (46 samples, 0.02%)</title><rect x="69.7401%" y="197" width="0.0235%" height="15" fill="rgb(244,68,36)" fg:x="136662" fg:w="46"/><text x="69.9901%" y="207.50"></text></g><g><title>DYLD-STUB$$memcpy (27 samples, 0.01%)</title><rect x="69.7763%" y="197" width="0.0138%" height="15" fill="rgb(232,229,15)" fg:x="136733" fg:w="27"/><text x="70.0263%" y="207.50"></text></g><g><title>0x7ff8067b7306 (379 samples, 0.19%)</title><rect x="72.2789%" y="165" width="0.1934%" height="15" fill="rgb(254,30,23)" fg:x="141637" fg:w="379"/><text x="72.5289%" y="175.50"></text></g><g><title>0x7ff8067b7314 (35 samples, 0.02%)</title><rect x="72.4728%" y="165" width="0.0179%" height="15" fill="rgb(235,160,14)" fg:x="142017" fg:w="35"/><text x="72.7228%" y="175.50"></text></g><g><title>0x7ff8067b7323 (21 samples, 0.01%)</title><rect x="72.4983%" y="165" width="0.0107%" height="15" fill="rgb(212,155,44)" fg:x="142067" fg:w="21"/><text x="72.7483%" y="175.50"></text></g><g><title>0x7ff8067b7346 (21 samples, 0.01%)</title><rect x="72.5182%" y="165" width="0.0107%" height="15" fill="rgb(226,2,50)" fg:x="142106" fg:w="21"/><text x="72.7682%" y="175.50"></text></g><g><title>0x7ff8067b734b (266 samples, 0.14%)</title><rect x="72.5289%" y="165" width="0.1357%" height="15" fill="rgb(234,177,6)" fg:x="142127" fg:w="266"/><text x="72.7789%" y="175.50"></text></g><g><title>0x7ff8067b7395 (354 samples, 0.18%)</title><rect x="72.6820%" y="165" width="0.1807%" height="15" fill="rgb(217,24,9)" fg:x="142427" fg:w="354"/><text x="72.9320%" y="175.50"></text></g><g><title>0x7ff8067cdfd1 (74 samples, 0.04%)</title><rect x="72.9005%" y="165" width="0.0378%" height="15" fill="rgb(220,13,46)" fg:x="142855" fg:w="74"/><text x="73.1505%" y="175.50"></text></g><g><title>0x7ff8067b622a (1,541 samples, 0.79%)</title><rect x="72.2549%" y="181" width="0.7864%" height="15" fill="rgb(239,221,27)" fg:x="141590" fg:w="1541"/><text x="72.5049%" y="191.50"></text></g><g><title>0x7ff8067cdfda (189 samples, 0.10%)</title><rect x="72.9449%" y="165" width="0.0964%" height="15" fill="rgb(222,198,25)" fg:x="142942" fg:w="189"/><text x="73.1949%" y="175.50"></text></g><g><title>0x7ff8067ca84c (20 samples, 0.01%)</title><rect x="73.0765%" y="181" width="0.0102%" height="15" fill="rgb(211,99,13)" fg:x="143200" fg:w="20"/><text x="73.3265%" y="191.50"></text></g><g><title>0x7ff8067e00dd (20 samples, 0.01%)</title><rect x="73.0872%" y="181" width="0.0102%" height="15" fill="rgb(232,111,31)" fg:x="143221" fg:w="20"/><text x="73.3372%" y="191.50"></text></g><g><title>0x7ff80699f892 (26 samples, 0.01%)</title><rect x="73.1250%" y="181" width="0.0133%" height="15" fill="rgb(245,82,37)" fg:x="143295" fg:w="26"/><text x="73.3750%" y="191.50"></text></g><g><title>0x7ff80699f896 (35 samples, 0.02%)</title><rect x="73.1383%" y="181" width="0.0179%" height="15" fill="rgb(227,149,46)" fg:x="143321" fg:w="35"/><text x="73.3883%" y="191.50"></text></g><g><title>0x7ff80699f8a8 (22 samples, 0.01%)</title><rect x="73.1622%" y="181" width="0.0112%" height="15" fill="rgb(218,36,50)" fg:x="143368" fg:w="22"/><text x="73.4122%" y="191.50"></text></g><g><title>&lt;Unknown Address&gt; (27 samples, 0.01%)</title><rect x="73.1735%" y="181" width="0.0138%" height="15" fill="rgb(226,80,48)" fg:x="143390" fg:w="27"/><text x="73.4235%" y="191.50"></text></g><g><title>_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$::write::hfc3fe861d16ca471 (.llvm.2627525528069367184) (27 samples, 0.01%)</title><rect x="73.1735%" y="165" width="0.0138%" height="15" fill="rgb(238,224,15)" fg:x="143390" fg:w="27"/><text x="73.4235%" y="175.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (1,255 samples, 0.64%)</title><rect x="73.1872%" y="181" width="0.6404%" height="15" fill="rgb(241,136,10)" fg:x="143417" fg:w="1255"/><text x="73.4372%" y="191.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked::h75cb40919419cfec (.llvm.6710397505999662456) (37 samples, 0.02%)</title><rect x="73.8088%" y="165" width="0.0189%" height="15" fill="rgb(208,32,45)" fg:x="144635" fg:w="37"/><text x="74.0588%" y="175.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (46 samples, 0.02%)</title><rect x="73.8277%" y="181" width="0.0235%" height="15" fill="rgb(207,135,9)" fg:x="144672" fg:w="46"/><text x="74.0777%" y="191.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (627 samples, 0.32%)</title><rect x="73.8629%" y="181" width="0.3200%" height="15" fill="rgb(206,86,44)" fg:x="144741" fg:w="627"/><text x="74.1129%" y="191.50"></text></g><g><title>core::ptr::drop_in_place$LT$storagev2..disk..writer..DiskStorageWriter..write_to_partition..$u7b$$u7b$closure$u7d$$u7d$$GT$::hc58e40550deff71b (.llvm.8217435450359230035) (74 samples, 0.04%)</title><rect x="74.1829%" y="181" width="0.0378%" height="15" fill="rgb(245,177,15)" fg:x="145368" fg:w="74"/><text x="74.4329%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;storagev2::disk::writer::DiskStorageWriter::get_partition_writer::{{closure}}&gt; (57 samples, 0.03%)</title><rect x="74.2206%" y="181" width="0.0291%" height="15" fill="rgb(206,64,50)" fg:x="145442" fg:w="57"/><text x="74.4706%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;storagev2::disk::writer::DiskStorageWriter::get_topic_storage::{{closure}}&gt; (85 samples, 0.04%)</title><rect x="74.2497%" y="181" width="0.0434%" height="15" fill="rgb(234,36,40)" fg:x="145499" fg:w="85"/><text x="74.4997%" y="191.50"></text></g><g><title>0x7ff8067b9b22 (20 samples, 0.01%)</title><rect x="74.8953%" y="165" width="0.0102%" height="15" fill="rgb(213,64,8)" fg:x="146764" fg:w="20"/><text x="75.1453%" y="175.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (117 samples, 0.06%)</title><rect x="74.9488%" y="149" width="0.0597%" height="15" fill="rgb(210,75,36)" fg:x="146869" fg:w="117"/><text x="75.1988%" y="159.50"></text></g><g><title>0x7ff8067b9b8b (167 samples, 0.09%)</title><rect x="74.9417%" y="165" width="0.0852%" height="15" fill="rgb(229,88,21)" fg:x="146855" fg:w="167"/><text x="75.1917%" y="175.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (36 samples, 0.02%)</title><rect x="75.0085%" y="149" width="0.0184%" height="15" fill="rgb(252,204,47)" fg:x="146986" fg:w="36"/><text x="75.2585%" y="159.50"></text></g><g><title>0x7ff8067b9ba8 (257 samples, 0.13%)</title><rect x="75.0371%" y="165" width="0.1311%" height="15" fill="rgb(208,77,27)" fg:x="147042" fg:w="257"/><text x="75.2871%" y="175.50"></text></g><g><title>0x7ff8067b9be8 (28 samples, 0.01%)</title><rect x="75.1734%" y="165" width="0.0143%" height="15" fill="rgb(221,76,26)" fg:x="147309" fg:w="28"/><text x="75.4234%" y="175.50"></text></g><g><title>0x7ff8067b9d24 (271 samples, 0.14%)</title><rect x="75.2111%" y="165" width="0.1383%" height="15" fill="rgb(225,139,18)" fg:x="147383" fg:w="271"/><text x="75.4611%" y="175.50"></text></g><g><title>0x7ff8067b9d39 (21 samples, 0.01%)</title><rect x="75.3642%" y="165" width="0.0107%" height="15" fill="rgb(230,137,11)" fg:x="147683" fg:w="21"/><text x="75.6142%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;storagev2::disk::writer::TopicStorage&gt; (2,486 samples, 1.27%)</title><rect x="74.2931%" y="181" width="1.2686%" height="15" fill="rgb(212,28,1)" fg:x="145584" fg:w="2486"/><text x="74.5431%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mpsc::bounded::Sender&lt;bytes::bytes::Bytes&gt;::send::{{closure}}&gt; (50 samples, 0.03%)</title><rect x="75.5617%" y="181" width="0.0255%" height="15" fill="rgb(248,164,17)" fg:x="148070" fg:w="50"/><text x="75.8117%" y="191.50"></text></g><g><title>_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$::write::hfc3fe861d16ca471 (.llvm.2627525528069367184) (922 samples, 0.47%)</title><rect x="76.8380%" y="165" width="0.4705%" height="15" fill="rgb(222,171,42)" fg:x="150571" fg:w="922"/><text x="77.0880%" y="175.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::get (3,964 samples, 2.02%)</title><rect x="75.5872%" y="181" width="2.0229%" height="15" fill="rgb(243,84,45)" fg:x="148120" fg:w="3964"/><text x="75.8372%" y="191.50">d..</text></g><g><title>_platform_memcmp$VARIANT$Base (591 samples, 0.30%)</title><rect x="77.3085%" y="165" width="0.3016%" height="15" fill="rgb(252,49,23)" fg:x="151493" fg:w="591"/><text x="77.5585%" y="175.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (23 samples, 0.01%)</title><rect x="77.6106%" y="181" width="0.0117%" height="15" fill="rgb(215,19,7)" fg:x="152085" fg:w="23"/><text x="77.8606%" y="191.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (34 samples, 0.02%)</title><rect x="77.6224%" y="181" width="0.0174%" height="15" fill="rgb(238,81,41)" fg:x="152108" fg:w="34"/><text x="77.8724%" y="191.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (25 samples, 0.01%)</title><rect x="77.6270%" y="165" width="0.0128%" height="15" fill="rgb(210,199,37)" fg:x="152117" fg:w="25"/><text x="77.8770%" y="175.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (1,861 samples, 0.95%)</title><rect x="77.6397%" y="181" width="0.9497%" height="15" fill="rgb(244,192,49)" fg:x="152142" fg:w="1861"/><text x="77.8897%" y="191.50"></text></g><g><title>_$LT$storagev2..disk..writer..DiskStorageWriter$u20$as$u20$storagev2..StorageWriter$GT$::store::_$u7b$$u7b$closure$u7d$$u7d$::h099b0228c1e4ac4d (.llvm.8217435450359230035) (17,927 samples, 9.15%)</title><rect x="69.7901%" y="197" width="9.1483%" height="15" fill="rgb(226,211,11)" fg:x="136760" fg:w="17927"/><text x="70.0401%" y="207.50">_$LT$storagev..</text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (684 samples, 0.35%)</title><rect x="78.5894%" y="181" width="0.3491%" height="15" fill="rgb(236,162,54)" fg:x="154003" fg:w="684"/><text x="78.8394%" y="191.50"></text></g><g><title>__rdl_alloc (82 samples, 0.04%)</title><rect x="78.9385%" y="197" width="0.0418%" height="15" fill="rgb(220,229,9)" fg:x="154687" fg:w="82"/><text x="79.1885%" y="207.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (385 samples, 0.20%)</title><rect x="78.9895%" y="197" width="0.1965%" height="15" fill="rgb(250,87,22)" fg:x="154787" fg:w="385"/><text x="79.2395%" y="207.50"></text></g><g><title>bytes::bytes::promotable_even_clone (619 samples, 0.32%)</title><rect x="79.1860%" y="197" width="0.3159%" height="15" fill="rgb(239,43,17)" fg:x="155172" fg:w="619"/><text x="79.4360%" y="207.50"></text></g><g><title>core::ptr::drop_in_place$LT$$LT$storagev2..disk..writer..DiskStorageWriter$u20$as$u20$storagev2..StorageWriter$GT$..store..$u7b$$u7b$closure$u7d$$u7d$$GT$::h983b64e5ca8a9868 (.llvm.8217435450359230035) (32 samples, 0.02%)</title><rect x="79.5018%" y="197" width="0.0163%" height="15" fill="rgb(231,177,25)" fg:x="155791" fg:w="32"/><text x="79.7518%" y="207.50"></text></g><g><title>rand::rngs::reseeding::ReseedingCore$LT$R$C$Rsdr$GT$::reseed_and_generate::h436211810b10beef (.llvm.9250916633496595011) (35 samples, 0.02%)</title><rect x="79.5182%" y="197" width="0.0179%" height="15" fill="rgb(219,179,1)" fg:x="155823" fg:w="35"/><text x="79.7682%" y="207.50"></text></g><g><title>getentropy (35 samples, 0.02%)</title><rect x="79.5182%" y="181" width="0.0179%" height="15" fill="rgb(238,219,53)" fg:x="155823" fg:w="35"/><text x="79.7682%" y="191.50"></text></g><g><title>rand::rngs::thread::rng (102 samples, 0.05%)</title><rect x="79.5360%" y="197" width="0.0521%" height="15" fill="rgb(232,167,36)" fg:x="155858" fg:w="102"/><text x="79.7860%" y="207.50"></text></g><g><title>storagev2::disk::writer::test::storage_store_bench_single_store::_$u7b$$u7b$closure$u7d$$u7d$::_$u7b$$u7b$closure$u7d$$u7d$::h240020c02aaec5b7 (.llvm.3445545093588245694) (27,091 samples, 13.82%)</title><rect x="65.8066%" y="213" width="13.8248%" height="15" fill="rgb(244,19,51)" fg:x="128954" fg:w="27091"/><text x="66.0566%" y="223.50">storagev2::disk::writ..</text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (71 samples, 0.04%)</title><rect x="79.5952%" y="197" width="0.0362%" height="15" fill="rgb(224,6,22)" fg:x="155974" fg:w="71"/><text x="79.8452%" y="207.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (150,039 samples, 76.57%)</title><rect x="3.0838%" y="229" width="76.5665%" height="15" fill="rgb(224,145,5)" fg:x="6043" fg:w="150039"/><text x="3.3338%" y="239.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (26 samples, 0.01%)</title><rect x="79.6371%" y="213" width="0.0133%" height="15" fill="rgb(234,130,49)" fg:x="156056" fg:w="26"/><text x="79.8871%" y="223.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (261 samples, 0.13%)</title><rect x="79.6611%" y="229" width="0.1332%" height="15" fill="rgb(254,6,2)" fg:x="156103" fg:w="261"/><text x="79.9111%" y="239.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (150,785 samples, 76.95%)</title><rect x="3.0073%" y="245" width="76.9472%" height="15" fill="rgb(208,96,46)" fg:x="5893" fg:w="150785"/><text x="3.2573%" y="255.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::state::State::transition_to_running (314 samples, 0.16%)</title><rect x="79.7942%" y="229" width="0.1602%" height="15" fill="rgb(239,3,39)" fg:x="156364" fg:w="314"/><text x="80.0442%" y="239.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (4,691 samples, 2.39%)</title><rect x="79.9545%" y="245" width="2.3939%" height="15" fill="rgb(233,210,1)" fg:x="156678" fg:w="4691"/><text x="80.2045%" y="255.50">to..</text></g><g><title>tokio::runtime::scheduler::current_thread::CurrentThread::block_on (159,055 samples, 81.17%)</title><rect x="1.2151%" y="261" width="81.1675%" height="15" fill="rgb(244,137,37)" fg:x="2381" fg:w="159055"/><text x="1.4651%" y="271.50">tokio::runtime::scheduler::current_thread::CurrentThread::block_on</text></g><g><title>tokio::runtime::task::raw::poll (67 samples, 0.03%)</title><rect x="82.3483%" y="245" width="0.0342%" height="15" fill="rgb(240,136,2)" fg:x="161369" fg:w="67"/><text x="82.5983%" y="255.50"></text></g><g><title>test::run_test::_{{closure}} (161,418 samples, 82.37%)</title><rect x="0.0174%" y="341" width="82.3734%" height="15" fill="rgb(239,18,37)" fg:x="34" fg:w="161418"/><text x="0.2674%" y="351.50">test::run_test::_{{closure}}</text></g><g><title>test::__rust_begin_short_backtrace (161,418 samples, 82.37%)</title><rect x="0.0174%" y="325" width="82.3734%" height="15" fill="rgb(218,185,22)" fg:x="34" fg:w="161418"/><text x="0.2674%" y="335.50">test::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (161,418 samples, 82.37%)</title><rect x="0.0174%" y="309" width="82.3734%" height="15" fill="rgb(225,218,4)" fg:x="34" fg:w="161418"/><text x="0.2674%" y="319.50">core::ops::function::FnOnce::call_once</text></g><g><title>storagev2::disk::writer::test::storage_store_bench_single_store_count (161,418 samples, 82.37%)</title><rect x="0.0174%" y="293" width="82.3734%" height="15" fill="rgb(230,182,32)" fg:x="34" fg:w="161418"/><text x="0.2674%" y="303.50">storagev2::disk::writer::test::storage_store_bench_single_store_count</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (159,130 samples, 81.21%)</title><rect x="1.1849%" y="277" width="81.2058%" height="15" fill="rgb(242,56,43)" fg:x="2322" fg:w="159130"/><text x="1.4349%" y="287.50">tokio::runtime::runtime::Runtime::block_on</text></g><g><title>0x7ff80684e83f (22 samples, 0.01%)</title><rect x="82.4968%" y="325" width="0.0112%" height="15" fill="rgb(233,99,24)" fg:x="161660" fg:w="22"/><text x="82.7468%" y="335.50"></text></g><g><title>DYLD-STUB$$pthread_mutex_unlock (25 samples, 0.01%)</title><rect x="82.5356%" y="325" width="0.0128%" height="15" fill="rgb(234,209,42)" fg:x="161736" fg:w="25"/><text x="82.7856%" y="335.50"></text></g><g><title>0x7ff806846923 (27 samples, 0.01%)</title><rect x="82.6678%" y="309" width="0.0138%" height="15" fill="rgb(227,7,12)" fg:x="161995" fg:w="27"/><text x="82.9178%" y="319.50"></text></g><g><title>__commpage_gettimeofday_internal (26 samples, 0.01%)</title><rect x="82.6683%" y="293" width="0.0133%" height="15" fill="rgb(245,203,43)" fg:x="161996" fg:w="26"/><text x="82.9183%" y="303.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (20 samples, 0.01%)</title><rect x="82.6954%" y="309" width="0.0102%" height="15" fill="rgb(238,205,33)" fg:x="162049" fg:w="20"/><text x="82.9454%" y="319.50"></text></g><g><title>__commpage_gettimeofday (27 samples, 0.01%)</title><rect x="82.7112%" y="309" width="0.0138%" height="15" fill="rgb(231,56,7)" fg:x="162080" fg:w="27"/><text x="82.9612%" y="319.50"></text></g><g><title>__gettimeofday (27 samples, 0.01%)</title><rect x="82.7250%" y="309" width="0.0138%" height="15" fill="rgb(244,186,29)" fg:x="162107" fg:w="27"/><text x="82.9750%" y="319.50"></text></g><g><title>__gettimeofday (640 samples, 0.33%)</title><rect x="83.1077%" y="293" width="0.3266%" height="15" fill="rgb(234,111,31)" fg:x="162857" fg:w="640"/><text x="83.3577%" y="303.50"></text></g><g><title>__psynch_cvwait (8,116 samples, 4.14%)</title><rect x="83.4343%" y="293" width="4.1417%" height="15" fill="rgb(241,149,10)" fg:x="163497" fg:w="8116"/><text x="83.6843%" y="303.50">__psy..</text></g><g><title>_pthread_mutex_firstfit_lock_slow (113 samples, 0.06%)</title><rect x="87.5821%" y="293" width="0.0577%" height="15" fill="rgb(249,206,44)" fg:x="171625" fg:w="113"/><text x="87.8321%" y="303.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (111 samples, 0.06%)</title><rect x="87.5831%" y="277" width="0.0566%" height="15" fill="rgb(251,153,30)" fg:x="171627" fg:w="111"/><text x="87.8331%" y="287.50"></text></g><g><title>__psynch_mutexwait (110 samples, 0.06%)</title><rect x="87.5836%" y="261" width="0.0561%" height="15" fill="rgb(239,152,38)" fg:x="171628" fg:w="110"/><text x="87.8336%" y="271.50"></text></g><g><title>pthread_mutex_lock (92 samples, 0.05%)</title><rect x="87.6398%" y="293" width="0.0469%" height="15" fill="rgb(249,139,47)" fg:x="171738" fg:w="92"/><text x="87.8898%" y="303.50"></text></g><g><title>_pthread_cond_wait (9,931 samples, 5.07%)</title><rect x="82.7418%" y="309" width="5.0679%" height="15" fill="rgb(244,64,35)" fg:x="162140" fg:w="9931"/><text x="82.9918%" y="319.50">_pthre..</text></g><g><title>pthread_testcancel (241 samples, 0.12%)</title><rect x="87.6867%" y="293" width="0.1230%" height="15" fill="rgb(216,46,15)" fg:x="171830" fg:w="241"/><text x="87.9367%" y="303.50"></text></g><g><title>pthread_mutex_unlock (31 samples, 0.02%)</title><rect x="87.8316%" y="309" width="0.0158%" height="15" fill="rgb(250,74,19)" fg:x="172114" fg:w="31"/><text x="88.0816%" y="319.50"></text></g><g><title>0x7ff80684e86d (26 samples, 0.01%)</title><rect x="87.8495%" y="293" width="0.0133%" height="15" fill="rgb(249,42,33)" fg:x="172149" fg:w="26"/><text x="88.0995%" y="303.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (34 samples, 0.02%)</title><rect x="87.8475%" y="309" width="0.0174%" height="15" fill="rgb(242,149,17)" fg:x="172145" fg:w="34"/><text x="88.0975%" y="319.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (10,418 samples, 5.32%)</title><rect x="82.5494%" y="325" width="5.3164%" height="15" fill="rgb(244,29,21)" fg:x="161763" fg:w="10418"/><text x="82.7994%" y="335.50">parking..</text></g><g><title>__psynch_cvwait (32 samples, 0.02%)</title><rect x="87.8924%" y="293" width="0.0163%" height="15" fill="rgb(220,130,37)" fg:x="172233" fg:w="32"/><text x="88.1424%" y="303.50"></text></g><g><title>_pthread_cond_wait (35 samples, 0.02%)</title><rect x="87.8919%" y="309" width="0.0179%" height="15" fill="rgb(211,67,2)" fg:x="172232" fg:w="35"/><text x="88.1419%" y="319.50"></text></g><g><title>cthread_yield (229 samples, 0.12%)</title><rect x="87.9097%" y="309" width="0.1169%" height="15" fill="rgb(235,68,52)" fg:x="172267" fg:w="229"/><text x="88.1597%" y="319.50"></text></g><g><title>swtch_pri (211 samples, 0.11%)</title><rect x="87.9189%" y="293" width="0.1077%" height="15" fill="rgb(246,142,3)" fg:x="172285" fg:w="211"/><text x="88.1689%" y="303.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (316 samples, 0.16%)</title><rect x="87.8658%" y="325" width="0.1613%" height="15" fill="rgb(241,25,7)" fg:x="172181" fg:w="316"/><text x="88.1158%" y="335.50"></text></g><g><title>0x7ff80683f7dd (20 samples, 0.01%)</title><rect x="88.0409%" y="309" width="0.0102%" height="15" fill="rgb(242,119,39)" fg:x="172524" fg:w="20"/><text x="88.2909%" y="319.50"></text></g><g><title>0x7ff80683f8c6 (158 samples, 0.08%)</title><rect x="88.0567%" y="293" width="0.0806%" height="15" fill="rgb(241,98,45)" fg:x="172555" fg:w="158"/><text x="88.3067%" y="303.50"></text></g><g><title>mach_timebase_info (158 samples, 0.08%)</title><rect x="88.0567%" y="277" width="0.0806%" height="15" fill="rgb(254,28,30)" fg:x="172555" fg:w="158"/><text x="88.3067%" y="287.50"></text></g><g><title>0x7ff80683f91d (38 samples, 0.02%)</title><rect x="88.1399%" y="293" width="0.0194%" height="15" fill="rgb(241,142,54)" fg:x="172718" fg:w="38"/><text x="88.3899%" y="303.50"></text></g><g><title>mach_absolute_time (38 samples, 0.02%)</title><rect x="88.1399%" y="277" width="0.0194%" height="15" fill="rgb(222,85,15)" fg:x="172718" fg:w="38"/><text x="88.3899%" y="287.50"></text></g><g><title>0x7ff80684e86d (225 samples, 0.11%)</title><rect x="88.0546%" y="309" width="0.1148%" height="15" fill="rgb(210,85,47)" fg:x="172551" fg:w="225"/><text x="88.3046%" y="319.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (268 samples, 0.14%)</title><rect x="88.0337%" y="325" width="0.1368%" height="15" fill="rgb(224,206,25)" fg:x="172510" fg:w="268"/><text x="88.2837%" y="335.50"></text></g><g><title>0x7ff80699f892 (30 samples, 0.02%)</title><rect x="88.7262%" y="309" width="0.0153%" height="15" fill="rgb(243,201,19)" fg:x="173867" fg:w="30"/><text x="88.9762%" y="319.50"></text></g><g><title>0x7ff80699f89f (77 samples, 0.04%)</title><rect x="88.7482%" y="309" width="0.0393%" height="15" fill="rgb(236,59,4)" fg:x="173910" fg:w="77"/><text x="88.9982%" y="319.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Seek&gt;::seek (748 samples, 0.38%)</title><rect x="88.9237%" y="277" width="0.3817%" height="15" fill="rgb(254,179,45)" fg:x="174254" fg:w="748"/><text x="89.1737%" y="287.50"></text></g><g><title>__lseek (723 samples, 0.37%)</title><rect x="88.9365%" y="261" width="0.3690%" height="15" fill="rgb(226,14,10)" fg:x="174279" fg:w="723"/><text x="89.1865%" y="271.50"></text></g><g><title>std::fs::DirBuilder::create_dir_all (832 samples, 0.42%)</title><rect x="89.3054%" y="277" width="0.4246%" height="15" fill="rgb(244,27,41)" fg:x="175002" fg:w="832"/><text x="89.5554%" y="287.50"></text></g><g><title>mkdir (829 samples, 0.42%)</title><rect x="89.3069%" y="261" width="0.4230%" height="15" fill="rgb(235,35,32)" fg:x="175005" fg:w="829"/><text x="89.5569%" y="271.50"></text></g><g><title>std::fs::File::set_len (305 samples, 0.16%)</title><rect x="89.7300%" y="277" width="0.1556%" height="15" fill="rgb(218,68,31)" fg:x="175834" fg:w="305"/><text x="89.9800%" y="287.50"></text></g><g><title>ftruncate (304 samples, 0.16%)</title><rect x="89.7305%" y="261" width="0.1551%" height="15" fill="rgb(207,120,37)" fg:x="175835" fg:w="304"/><text x="89.9805%" y="271.50"></text></g><g><title>std::fs::File::sync_all (789 samples, 0.40%)</title><rect x="89.8856%" y="277" width="0.4026%" height="15" fill="rgb(227,98,0)" fg:x="176139" fg:w="789"/><text x="90.1356%" y="287.50"></text></g><g><title>fcntl (789 samples, 0.40%)</title><rect x="89.8856%" y="261" width="0.4026%" height="15" fill="rgb(207,7,3)" fg:x="176139" fg:w="789"/><text x="90.1356%" y="271.50"></text></g><g><title>__fcntl (787 samples, 0.40%)</title><rect x="89.8867%" y="245" width="0.4016%" height="15" fill="rgb(206,98,19)" fg:x="176141" fg:w="787"/><text x="90.1367%" y="255.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (17,194 samples, 8.77%)</title><rect x="90.3041%" y="261" width="8.7743%" height="15" fill="rgb(217,5,26)" fg:x="176959" fg:w="17194"/><text x="90.5541%" y="271.50">&lt;&amp;std::fs::F..</text></g><g><title>write (17,149 samples, 8.75%)</title><rect x="90.3271%" y="245" width="8.7513%" height="15" fill="rgb(235,190,38)" fg:x="177004" fg:w="17149"/><text x="90.5771%" y="255.50">write</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (20,009 samples, 10.21%)</title><rect x="88.8681%" y="293" width="10.2108%" height="15" fill="rgb(247,86,24)" fg:x="174145" fg:w="20009"/><text x="89.1181%" y="303.50">&lt;tokio::runtime..</text></g><g><title>tokio::io::blocking::Buf::write_to (17,226 samples, 8.79%)</title><rect x="90.2883%" y="277" width="8.7906%" height="15" fill="rgb(205,101,16)" fg:x="176928" fg:w="17226"/><text x="90.5383%" y="287.50">tokio::io::b..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (20,175 samples, 10.30%)</title><rect x="88.7931%" y="309" width="10.2955%" height="15" fill="rgb(246,168,33)" fg:x="173998" fg:w="20175"/><text x="89.0431%" y="319.50">tokio::runtime:..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (24 samples, 0.01%)</title><rect x="99.0886%" y="309" width="0.0122%" height="15" fill="rgb(231,114,1)" fg:x="194173" fg:w="24"/><text x="99.3386%" y="319.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (645 samples, 0.33%)</title><rect x="99.1233%" y="277" width="0.3292%" height="15" fill="rgb(207,184,53)" fg:x="194241" fg:w="645"/><text x="99.3733%" y="287.50"></text></g><g><title>mio::waker::Waker::wake (634 samples, 0.32%)</title><rect x="99.1289%" y="261" width="0.3235%" height="15" fill="rgb(224,95,51)" fg:x="194252" fg:w="634"/><text x="99.3789%" y="271.50"></text></g><g><title>kevent (616 samples, 0.31%)</title><rect x="99.1381%" y="245" width="0.3144%" height="15" fill="rgb(212,188,45)" fg:x="194270" fg:w="616"/><text x="99.3881%" y="255.50"></text></g><g><title>tokio::runtime::context::with_scheduler (704 samples, 0.36%)</title><rect x="99.1167%" y="293" width="0.3593%" height="15" fill="rgb(223,154,38)" fg:x="194228" fg:w="704"/><text x="99.3667%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::inject::Inject&lt;T&gt;::push (46 samples, 0.02%)</title><rect x="99.4524%" y="277" width="0.0235%" height="15" fill="rgb(251,22,52)" fg:x="194886" fg:w="46"/><text x="99.7024%" y="287.50"></text></g><g><title>tokio::runtime::task::harness::Harness$LT$T$C$S$GT$::complete::h0ce3e0d66899a5eb (.llvm.15480949991314898764) (797 samples, 0.41%)</title><rect x="99.1008%" y="309" width="0.4067%" height="15" fill="rgb(229,209,22)" fg:x="194197" fg:w="797"/><text x="99.3508%" y="319.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (54 samples, 0.03%)</title><rect x="99.4800%" y="293" width="0.0276%" height="15" fill="rgb(234,138,34)" fg:x="194940" fg:w="54"/><text x="99.7300%" y="303.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (718 samples, 0.37%)</title><rect x="99.5423%" y="277" width="0.3664%" height="15" fill="rgb(212,95,11)" fg:x="195062" fg:w="718"/><text x="99.7923%" y="287.50"></text></g><g><title>mio::waker::Waker::wake (703 samples, 0.36%)</title><rect x="99.5499%" y="261" width="0.3587%" height="15" fill="rgb(240,179,47)" fg:x="195077" fg:w="703"/><text x="99.7999%" y="271.50"></text></g><g><title>kevent (692 samples, 0.35%)</title><rect x="99.5555%" y="245" width="0.3531%" height="15" fill="rgb(240,163,11)" fg:x="195088" fg:w="692"/><text x="99.8055%" y="255.50"></text></g><g><title>tokio::runtime::context::with_scheduler (783 samples, 0.40%)</title><rect x="99.5346%" y="293" width="0.3996%" height="15" fill="rgb(236,37,12)" fg:x="195047" fg:w="783"/><text x="99.7846%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::inject::Inject&lt;T&gt;::push (50 samples, 0.03%)</title><rect x="99.9087%" y="277" width="0.0255%" height="15" fill="rgb(232,164,16)" fg:x="195780" fg:w="50"/><text x="100.1587%" y="287.50"></text></g><g><title>tokio::runtime::task::harness::Harness$LT$T$C$S$GT$::complete::h5797f6819332b79f (.llvm.15480949991314898764) (897 samples, 0.46%)</title><rect x="99.5142%" y="309" width="0.4577%" height="15" fill="rgb(244,205,15)" fg:x="195007" fg:w="897"/><text x="99.7642%" y="319.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (67 samples, 0.03%)</title><rect x="99.9377%" y="293" width="0.0342%" height="15" fill="rgb(223,117,47)" fg:x="195837" fg:w="67"/><text x="100.1877%" y="303.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (23,134 samples, 11.81%)</title><rect x="88.1771%" y="325" width="11.8055%" height="15" fill="rgb(244,107,35)" fg:x="172791" fg:w="23134"/><text x="88.4271%" y="335.50">tokio::runtime::ta..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (195,927 samples, 99.98%)</title><rect x="0.0097%" y="357" width="99.9837%" height="15" fill="rgb(205,140,8)" fg:x="19" fg:w="195927"/><text x="0.2597%" y="367.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (34,494 samples, 17.60%)</title><rect x="82.3907%" y="341" width="17.6027%" height="15" fill="rgb(228,84,46)" fg:x="161452" fg:w="34494"/><text x="82.6407%" y="351.50">tokio::runtime::blocking::p..</text></g><g><title>tokio::runtime::task::raw::poll (21 samples, 0.01%)</title><rect x="99.9826%" y="325" width="0.0107%" height="15" fill="rgb(254,188,9)" fg:x="195925" fg:w="21"/><text x="100.2326%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (195,929 samples, 99.98%)</title><rect x="0.0097%" y="373" width="99.9847%" height="15" fill="rgb(206,112,54)" fg:x="19" fg:w="195929"/><text x="0.2597%" y="383.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>_pthread_start (195,947 samples, 99.99%)</title><rect x="0.0041%" y="405" width="99.9939%" height="15" fill="rgb(216,84,49)" fg:x="8" fg:w="195947"/><text x="0.2541%" y="415.50">_pthread_start</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (195,944 samples, 99.99%)</title><rect x="0.0056%" y="389" width="99.9923%" height="15" fill="rgb(214,194,35)" fg:x="11" fg:w="195944"/><text x="0.2556%" y="399.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>all (195,959 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(249,28,3)" fg:x="0" fg:w="195959"/><text x="0.2500%" y="447.50"></text></g><g><title>thread_start (195,951 samples, 100.00%)</title><rect x="0.0041%" y="421" width="99.9959%" height="15" fill="rgb(222,56,52)" fg:x="8" fg:w="195951"/><text x="0.2541%" y="431.50">thread_start</text></g></svg></svg>