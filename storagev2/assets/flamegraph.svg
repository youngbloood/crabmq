<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="822686"><g><title>&lt;Unknown Address&gt; (95 samples, 0.01%)</title><rect x="0.0018%" y="341" width="0.0115%" height="15" fill="rgb(227,0,7)" fg:x="15" fg:w="95"/><text x="0.2518%" y="351.50"></text></g><g><title>0x7ff8067f7717 (176 samples, 0.02%)</title><rect x="0.0743%" y="325" width="0.0214%" height="15" fill="rgb(217,0,24)" fg:x="611" fg:w="176"/><text x="0.3243%" y="335.50"></text></g><g><title>0x7ff8067b9ba8 (101 samples, 0.01%)</title><rect x="0.3608%" y="309" width="0.0123%" height="15" fill="rgb(221,193,54)" fg:x="2968" fg:w="101"/><text x="0.6108%" y="319.50"></text></g><g><title>0x7ff8067b9bbd (85 samples, 0.01%)</title><rect x="0.3733%" y="309" width="0.0103%" height="15" fill="rgb(248,212,6)" fg:x="3071" fg:w="85"/><text x="0.6233%" y="319.50"></text></g><g><title>_os_unfair_lock_lock_slow (84 samples, 0.01%)</title><rect x="0.3734%" y="293" width="0.0102%" height="15" fill="rgb(208,68,35)" fg:x="3072" fg:w="84"/><text x="0.6234%" y="303.50"></text></g><g><title>0x7ff8067ba0f3 (98 samples, 0.01%)</title><rect x="0.4074%" y="293" width="0.0119%" height="15" fill="rgb(232,128,0)" fg:x="3352" fg:w="98"/><text x="0.6574%" y="303.50"></text></g><g><title>0x7ff8067ba222 (120 samples, 0.01%)</title><rect x="0.4262%" y="293" width="0.0146%" height="15" fill="rgb(207,160,47)" fg:x="3506" fg:w="120"/><text x="0.6762%" y="303.50"></text></g><g><title>0x7ff8067ba2bc (295 samples, 0.04%)</title><rect x="0.4417%" y="293" width="0.0359%" height="15" fill="rgb(228,23,34)" fg:x="3634" fg:w="295"/><text x="0.6917%" y="303.50"></text></g><g><title>0x7ff8067c5a47 (296 samples, 0.04%)</title><rect x="0.4868%" y="293" width="0.0360%" height="15" fill="rgb(218,30,26)" fg:x="4005" fg:w="296"/><text x="0.7368%" y="303.50"></text></g><g><title>0x7ff8067b9d11 (1,082 samples, 0.13%)</title><rect x="0.3916%" y="309" width="0.1315%" height="15" fill="rgb(220,122,19)" fg:x="3222" fg:w="1082"/><text x="0.6416%" y="319.50"></text></g><g><title>0x7ff8067b9d24 (161 samples, 0.02%)</title><rect x="0.5235%" y="309" width="0.0196%" height="15" fill="rgb(250,228,42)" fg:x="4307" fg:w="161"/><text x="0.7735%" y="319.50"></text></g><g><title>0x7ff8067b9d6d (233 samples, 0.03%)</title><rect x="0.5449%" y="309" width="0.0283%" height="15" fill="rgb(240,193,28)" fg:x="4483" fg:w="233"/><text x="0.7949%" y="319.50"></text></g><g><title>_os_unfair_lock_unlock_slow (123 samples, 0.01%)</title><rect x="0.6559%" y="309" width="0.0150%" height="15" fill="rgb(216,20,37)" fg:x="5396" fg:w="123"/><text x="0.9059%" y="319.50"></text></g><g><title>__ulock_wake (120 samples, 0.01%)</title><rect x="0.6563%" y="293" width="0.0146%" height="15" fill="rgb(206,188,39)" fg:x="5399" fg:w="120"/><text x="0.9063%" y="303.50"></text></g><g><title>0x7ff8067b9b2a (106 samples, 0.01%)</title><rect x="0.7065%" y="293" width="0.0129%" height="15" fill="rgb(217,207,13)" fg:x="5812" fg:w="106"/><text x="0.9565%" y="303.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (120 samples, 0.01%)</title><rect x="0.7283%" y="277" width="0.0146%" height="15" fill="rgb(231,73,38)" fg:x="5992" fg:w="120"/><text x="0.9783%" y="287.50"></text></g><g><title>0x7ff8067b9b8b (5,718 samples, 0.70%)</title><rect x="0.7283%" y="293" width="0.6950%" height="15" fill="rgb(225,20,46)" fg:x="5992" fg:w="5718"/><text x="0.9783%" y="303.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (5,598 samples, 0.68%)</title><rect x="0.7429%" y="277" width="0.6805%" height="15" fill="rgb(210,31,41)" fg:x="6112" fg:w="5598"/><text x="0.9929%" y="287.50"></text></g><g><title>0x7ff8067b9ba8 (211 samples, 0.03%)</title><rect x="1.4246%" y="293" width="0.0256%" height="15" fill="rgb(221,200,47)" fg:x="11720" fg:w="211"/><text x="1.6746%" y="303.50"></text></g><g><title>0x7ff8067b9bbd (301 samples, 0.04%)</title><rect x="1.4510%" y="293" width="0.0366%" height="15" fill="rgb(226,26,5)" fg:x="11937" fg:w="301"/><text x="1.7010%" y="303.50"></text></g><g><title>_os_unfair_lock_lock_slow (298 samples, 0.04%)</title><rect x="1.4513%" y="277" width="0.0362%" height="15" fill="rgb(249,33,26)" fg:x="11940" fg:w="298"/><text x="1.7013%" y="287.50"></text></g><g><title>__ulock_wait2 (254 samples, 0.03%)</title><rect x="1.4567%" y="261" width="0.0309%" height="15" fill="rgb(235,183,28)" fg:x="11984" fg:w="254"/><text x="1.7067%" y="271.50"></text></g><g><title>0x7ff8067bac2e (132 samples, 0.02%)</title><rect x="1.5449%" y="261" width="0.0160%" height="15" fill="rgb(221,5,38)" fg:x="12710" fg:w="132"/><text x="1.7949%" y="271.50"></text></g><g><title>0x7ff8067ba0f3 (259 samples, 0.03%)</title><rect x="1.5417%" y="277" width="0.0315%" height="15" fill="rgb(247,18,42)" fg:x="12683" fg:w="259"/><text x="1.7917%" y="287.50"></text></g><g><title>0x7ff8067bac2e (170 samples, 0.02%)</title><rect x="1.5962%" y="261" width="0.0207%" height="15" fill="rgb(241,131,45)" fg:x="13132" fg:w="170"/><text x="1.8462%" y="271.50"></text></g><g><title>0x7ff8067ba222 (353 samples, 0.04%)</title><rect x="1.5898%" y="277" width="0.0429%" height="15" fill="rgb(249,31,29)" fg:x="13079" fg:w="353"/><text x="1.8398%" y="287.50"></text></g><g><title>0x7ff8067ba8a7 (183 samples, 0.02%)</title><rect x="1.6586%" y="261" width="0.0222%" height="15" fill="rgb(225,111,53)" fg:x="13645" fg:w="183"/><text x="1.9086%" y="271.50"></text></g><g><title>0x7ff8067ba2bc (646 samples, 0.08%)</title><rect x="1.6373%" y="277" width="0.0785%" height="15" fill="rgb(238,160,17)" fg:x="13470" fg:w="646"/><text x="1.8873%" y="287.50"></text></g><g><title>0x7ff8067c5a47 (254 samples, 0.03%)</title><rect x="1.7342%" y="277" width="0.0309%" height="15" fill="rgb(214,148,48)" fg:x="14267" fg:w="254"/><text x="1.9842%" y="287.50"></text></g><g><title>0x7ff8067b9d11 (2,179 samples, 0.26%)</title><rect x="1.5013%" y="293" width="0.2649%" height="15" fill="rgb(232,36,49)" fg:x="12351" fg:w="2179"/><text x="1.7513%" y="303.50"></text></g><g><title>0x7ff8067b9d24 (295 samples, 0.04%)</title><rect x="1.7673%" y="293" width="0.0359%" height="15" fill="rgb(209,103,24)" fg:x="14539" fg:w="295"/><text x="2.0173%" y="303.50"></text></g><g><title>0x7ff8067b9d6d (454 samples, 0.06%)</title><rect x="1.8108%" y="293" width="0.0552%" height="15" fill="rgb(229,88,8)" fg:x="14897" fg:w="454"/><text x="2.0608%" y="303.50"></text></g><g><title>0x7ff8067ca8da (87 samples, 0.01%)</title><rect x="1.8915%" y="293" width="0.0106%" height="15" fill="rgb(213,181,19)" fg:x="15561" fg:w="87"/><text x="2.1415%" y="303.50"></text></g><g><title>pthread_mutex_destroy (434 samples, 0.05%)</title><rect x="1.9186%" y="277" width="0.0528%" height="15" fill="rgb(254,191,54)" fg:x="15784" fg:w="434"/><text x="2.1686%" y="287.50"></text></g><g><title>&lt;std::sys::sync::mutex::pthread::Mutex as core::ops::drop::Drop&gt;::drop (765 samples, 0.09%)</title><rect x="1.9129%" y="293" width="0.0930%" height="15" fill="rgb(241,83,37)" fg:x="15737" fg:w="765"/><text x="2.1629%" y="303.50"></text></g><g><title>pthread_mutex_unlock (284 samples, 0.03%)</title><rect x="1.9713%" y="277" width="0.0345%" height="15" fill="rgb(233,36,39)" fg:x="16218" fg:w="284"/><text x="2.2213%" y="287.50"></text></g><g><title>_os_unfair_lock_unlock_slow (391 samples, 0.05%)</title><rect x="2.0143%" y="293" width="0.0475%" height="15" fill="rgb(226,3,54)" fg:x="16571" fg:w="391"/><text x="2.2643%" y="303.50"></text></g><g><title>__ulock_wake (381 samples, 0.05%)</title><rect x="2.0155%" y="277" width="0.0463%" height="15" fill="rgb(245,192,40)" fg:x="16581" fg:w="381"/><text x="2.2655%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (11,684 samples, 1.42%)</title><rect x="0.6709%" y="309" width="1.4202%" height="15" fill="rgb(238,167,29)" fg:x="5519" fg:w="11684"/><text x="0.9209%" y="319.50"></text></g><g><title>pthread_mutex_trylock (225 samples, 0.03%)</title><rect x="2.0637%" y="293" width="0.0273%" height="15" fill="rgb(232,182,51)" fg:x="16978" fg:w="225"/><text x="2.3137%" y="303.50"></text></g><g><title>futures_timer::native::global::raw_clone (208 samples, 0.03%)</title><rect x="2.0911%" y="309" width="0.0253%" height="15" fill="rgb(231,60,39)" fg:x="17203" fg:w="208"/><text x="2.3411%" y="319.50"></text></g><g><title>futures_timer::native::heap::Heap&lt;T&gt;::push (464 samples, 0.06%)</title><rect x="2.1185%" y="309" width="0.0564%" height="15" fill="rgb(208,69,12)" fg:x="17429" fg:w="464"/><text x="2.3685%" y="319.50"></text></g><g><title>pthread_mutex_unlock (703 samples, 0.09%)</title><rect x="2.1758%" y="309" width="0.0855%" height="15" fill="rgb(235,93,37)" fg:x="17900" fg:w="703"/><text x="2.4258%" y="319.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (1,259 samples, 0.15%)</title><rect x="2.2613%" y="309" width="0.1530%" height="15" fill="rgb(213,116,39)" fg:x="18603" fg:w="1259"/><text x="2.5113%" y="319.50"></text></g><g><title>pthread_mutex_lock (1,239 samples, 0.15%)</title><rect x="2.2637%" y="293" width="0.1506%" height="15" fill="rgb(222,207,29)" fg:x="18623" fg:w="1239"/><text x="2.5137%" y="303.50"></text></g><g><title>0x7ff8067b7306 (147 samples, 0.02%)</title><rect x="2.4706%" y="277" width="0.0179%" height="15" fill="rgb(206,96,30)" fg:x="20325" fg:w="147"/><text x="2.7206%" y="287.50"></text></g><g><title>0x7ff8067b734b (134 samples, 0.02%)</title><rect x="2.4946%" y="277" width="0.0163%" height="15" fill="rgb(218,138,4)" fg:x="20523" fg:w="134"/><text x="2.7446%" y="287.50"></text></g><g><title>0x7ff8067b7b9b (89 samples, 0.01%)</title><rect x="2.5492%" y="261" width="0.0108%" height="15" fill="rgb(250,191,14)" fg:x="20972" fg:w="89"/><text x="2.7992%" y="271.50"></text></g><g><title>0x7ff8067e58ca (299 samples, 0.04%)</title><rect x="2.5659%" y="245" width="0.0363%" height="15" fill="rgb(239,60,40)" fg:x="21109" fg:w="299"/><text x="2.8159%" y="255.50"></text></g><g><title>0x7ff8067b7c46 (354 samples, 0.04%)</title><rect x="2.5638%" y="261" width="0.0430%" height="15" fill="rgb(206,27,48)" fg:x="21092" fg:w="354"/><text x="2.8138%" y="271.50"></text></g><g><title>0x7ff8067e58ca (139 samples, 0.02%)</title><rect x="2.6080%" y="245" width="0.0169%" height="15" fill="rgb(225,35,8)" fg:x="21456" fg:w="139"/><text x="2.8580%" y="255.50"></text></g><g><title>0x7ff8067b7d3a (141 samples, 0.02%)</title><rect x="2.6079%" y="261" width="0.0171%" height="15" fill="rgb(250,213,24)" fg:x="21455" fg:w="141"/><text x="2.8579%" y="271.50"></text></g><g><title>0x7ff8067b7faf (156 samples, 0.02%)</title><rect x="2.6305%" y="261" width="0.0190%" height="15" fill="rgb(247,123,22)" fg:x="21641" fg:w="156"/><text x="2.8805%" y="271.50"></text></g><g><title>0x7ff8067e58ca (444 samples, 0.05%)</title><rect x="2.6589%" y="245" width="0.0540%" height="15" fill="rgb(231,138,38)" fg:x="21874" fg:w="444"/><text x="2.9089%" y="255.50"></text></g><g><title>0x7ff8067b809a (558 samples, 0.07%)</title><rect x="2.6561%" y="261" width="0.0678%" height="15" fill="rgb(231,145,46)" fg:x="21851" fg:w="558"/><text x="2.9061%" y="271.50"></text></g><g><title>0x7ff8067b80ce (187 samples, 0.02%)</title><rect x="2.7241%" y="261" width="0.0227%" height="15" fill="rgb(251,118,11)" fg:x="22411" fg:w="187"/><text x="2.9741%" y="271.50"></text></g><g><title>0x7ff8067b8247 (111 samples, 0.01%)</title><rect x="2.7618%" y="261" width="0.0135%" height="15" fill="rgb(217,147,25)" fg:x="22721" fg:w="111"/><text x="3.0118%" y="271.50"></text></g><g><title>0x7ff8067b742f (2,233 samples, 0.27%)</title><rect x="2.5177%" y="277" width="0.2714%" height="15" fill="rgb(247,81,37)" fg:x="20713" fg:w="2233"/><text x="2.7677%" y="287.50"></text></g><g><title>0x7ff8067b76f2 (130 samples, 0.02%)</title><rect x="2.7899%" y="277" width="0.0158%" height="15" fill="rgb(209,12,38)" fg:x="22952" fg:w="130"/><text x="3.0399%" y="287.50"></text></g><g><title>0x7ff8067b622a (2,963 samples, 0.36%)</title><rect x="2.4667%" y="293" width="0.3602%" height="15" fill="rgb(227,1,9)" fg:x="20293" fg:w="2963"/><text x="2.7167%" y="303.50"></text></g><g><title>0x7ff8067cdfda (90 samples, 0.01%)</title><rect x="2.8159%" y="277" width="0.0109%" height="15" fill="rgb(248,47,43)" fg:x="23166" fg:w="90"/><text x="3.0659%" y="287.50"></text></g><g><title>pthread_mutex_init (235 samples, 0.03%)</title><rect x="2.8353%" y="293" width="0.0286%" height="15" fill="rgb(221,10,30)" fg:x="23326" fg:w="235"/><text x="3.0853%" y="303.50"></text></g><g><title>&lt;futures_timer::native::timer::Timer as core::future::future::Future&gt;::poll (22,727 samples, 2.76%)</title><rect x="0.1243%" y="325" width="2.7625%" height="15" fill="rgb(210,229,1)" fg:x="1023" fg:w="22727"/><text x="0.3743%" y="335.50">&lt;f..</text></g><g><title>std::sys::sync::once_box::OnceBox$LT$T$GT$::initialize::h1db14ccd83739d5b (.llvm.8465266497648202264) (3,877 samples, 0.47%)</title><rect x="2.4156%" y="309" width="0.4713%" height="15" fill="rgb(222,148,37)" fg:x="19873" fg:w="3877"/><text x="2.6656%" y="319.50"></text></g><g><title>futures_timer::native::heap::Heap&lt;T&gt;::remove (3,960 samples, 0.48%)</title><rect x="3.0978%" y="309" width="0.4814%" height="15" fill="rgb(234,67,33)" fg:x="25485" fg:w="3960"/><text x="3.3478%" y="319.50"></text></g><g><title>pthread_mutex_unlock (139 samples, 0.02%)</title><rect x="3.5791%" y="309" width="0.0169%" height="15" fill="rgb(247,98,35)" fg:x="29445" fg:w="139"/><text x="3.8291%" y="319.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (1,148 samples, 0.14%)</title><rect x="3.5960%" y="309" width="0.1395%" height="15" fill="rgb(247,138,52)" fg:x="29584" fg:w="1148"/><text x="3.8460%" y="319.50"></text></g><g><title>pthread_mutex_lock (1,140 samples, 0.14%)</title><rect x="3.5970%" y="293" width="0.1386%" height="15" fill="rgb(213,79,30)" fg:x="29592" fg:w="1140"/><text x="3.8470%" y="303.50"></text></g><g><title>0x7ff80683f8c6 (3,608 samples, 0.44%)</title><rect x="3.7557%" y="277" width="0.4386%" height="15" fill="rgb(246,177,23)" fg:x="30898" fg:w="3608"/><text x="4.0057%" y="287.50"></text></g><g><title>mach_timebase_info (3,604 samples, 0.44%)</title><rect x="3.7562%" y="261" width="0.4381%" height="15" fill="rgb(230,62,27)" fg:x="30902" fg:w="3604"/><text x="4.0062%" y="271.50"></text></g><g><title>0x7ff80683f91d (271 samples, 0.03%)</title><rect x="4.1973%" y="277" width="0.0329%" height="15" fill="rgb(216,154,8)" fg:x="34531" fg:w="271"/><text x="4.4473%" y="287.50"></text></g><g><title>mach_absolute_time (271 samples, 0.03%)</title><rect x="4.1973%" y="261" width="0.0329%" height="15" fill="rgb(244,35,45)" fg:x="34531" fg:w="271"/><text x="4.4473%" y="271.50"></text></g><g><title>0x7ff80683f93d (122 samples, 0.01%)</title><rect x="4.2315%" y="277" width="0.0148%" height="15" fill="rgb(251,115,12)" fg:x="34812" fg:w="122"/><text x="4.4815%" y="287.50"></text></g><g><title>0x7ff80684e86d (4,119 samples, 0.50%)</title><rect x="3.7522%" y="293" width="0.5007%" height="15" fill="rgb(240,54,50)" fg:x="30869" fg:w="4119"/><text x="4.0022%" y="303.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (4,280 samples, 0.52%)</title><rect x="3.7363%" y="309" width="0.5202%" height="15" fill="rgb(233,84,52)" fg:x="30738" fg:w="4280"/><text x="3.9863%" y="319.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (10,260 samples, 1.25%)</title><rect x="4.3269%" y="277" width="1.2471%" height="15" fill="rgb(207,117,47)" fg:x="35597" fg:w="10260"/><text x="4.5769%" y="287.50"></text></g><g><title>mio::waker::Waker::wake (10,105 samples, 1.23%)</title><rect x="4.3458%" y="261" width="1.2283%" height="15" fill="rgb(249,43,39)" fg:x="35752" fg:w="10105"/><text x="4.5958%" y="271.50"></text></g><g><title>kevent (9,876 samples, 1.20%)</title><rect x="4.3736%" y="245" width="1.2005%" height="15" fill="rgb(209,38,44)" fg:x="35981" fg:w="9876"/><text x="4.6236%" y="255.50"></text></g><g><title>tokio::runtime::context::with_scheduler (10,820 samples, 1.32%)</title><rect x="4.3009%" y="293" width="1.3152%" height="15" fill="rgb(236,212,23)" fg:x="35383" fg:w="10820"/><text x="4.5509%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::inject::Inject&lt;T&gt;::push (346 samples, 0.04%)</title><rect x="5.5741%" y="277" width="0.0421%" height="15" fill="rgb(242,79,21)" fg:x="45857" fg:w="346"/><text x="5.8241%" y="287.50"></text></g><g><title>futures_timer::native::timer::Timer::advance (23,108 samples, 2.81%)</title><rect x="2.8990%" y="325" width="2.8088%" height="15" fill="rgb(211,96,35)" fg:x="23850" fg:w="23108"/><text x="3.1490%" y="335.50">fu..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (11,918 samples, 1.45%)</title><rect x="4.2592%" y="309" width="1.4487%" height="15" fill="rgb(253,215,40)" fg:x="35040" fg:w="11918"/><text x="4.5092%" y="319.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (708 samples, 0.09%)</title><rect x="5.6218%" y="293" width="0.0861%" height="15" fill="rgb(211,81,21)" fg:x="46250" fg:w="708"/><text x="5.8718%" y="303.50"></text></g><g><title>0x7ff80683f8c6 (162 samples, 0.02%)</title><rect x="5.7182%" y="293" width="0.0197%" height="15" fill="rgb(208,190,38)" fg:x="47043" fg:w="162"/><text x="5.9682%" y="303.50"></text></g><g><title>mach_timebase_info (161 samples, 0.02%)</title><rect x="5.7183%" y="277" width="0.0196%" height="15" fill="rgb(235,213,38)" fg:x="47044" fg:w="161"/><text x="5.9683%" y="287.50"></text></g><g><title>0x7ff80683f91d (227 samples, 0.03%)</title><rect x="5.7417%" y="293" width="0.0276%" height="15" fill="rgb(237,122,38)" fg:x="47236" fg:w="227"/><text x="5.9917%" y="303.50"></text></g><g><title>mach_absolute_time (227 samples, 0.03%)</title><rect x="5.7417%" y="277" width="0.0276%" height="15" fill="rgb(244,218,35)" fg:x="47236" fg:w="227"/><text x="5.9917%" y="287.50"></text></g><g><title>0x7ff80683f93d (113 samples, 0.01%)</title><rect x="5.7701%" y="293" width="0.0137%" height="15" fill="rgb(240,68,47)" fg:x="47470" fg:w="113"/><text x="6.0201%" y="303.50"></text></g><g><title>0x7ff80684e86d (563 samples, 0.07%)</title><rect x="5.7168%" y="309" width="0.0684%" height="15" fill="rgb(210,16,53)" fg:x="47031" fg:w="563"/><text x="5.9668%" y="319.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (668 samples, 0.08%)</title><rect x="5.7081%" y="325" width="0.0812%" height="15" fill="rgb(235,124,12)" fg:x="46960" fg:w="668"/><text x="5.9581%" y="335.50"></text></g><g><title>0x7ff806824cc4 (122 samples, 0.01%)</title><rect x="5.9245%" y="277" width="0.0148%" height="15" fill="rgb(224,169,11)" fg:x="48740" fg:w="122"/><text x="6.1745%" y="287.50"></text></g><g><title>mach_absolute_time (122 samples, 0.01%)</title><rect x="5.9245%" y="261" width="0.0148%" height="15" fill="rgb(250,166,2)" fg:x="48740" fg:w="122"/><text x="6.1745%" y="271.50"></text></g><g><title>0x7ff8067f72e6 (148 samples, 0.02%)</title><rect x="5.9230%" y="293" width="0.0180%" height="15" fill="rgb(242,216,29)" fg:x="48728" fg:w="148"/><text x="6.1730%" y="303.50"></text></g><g><title>0x7ff8067f730d (7,242 samples, 0.88%)</title><rect x="5.9426%" y="293" width="0.8803%" height="15" fill="rgb(230,116,27)" fg:x="48889" fg:w="7242"/><text x="6.1926%" y="303.50"></text></g><g><title>semaphore_timedwait_trap (6,992 samples, 0.85%)</title><rect x="5.9730%" y="277" width="0.8499%" height="15" fill="rgb(228,99,48)" fg:x="49139" fg:w="6992"/><text x="6.2230%" y="287.50"></text></g><g><title>0x7ff8067f7313 (86 samples, 0.01%)</title><rect x="6.8229%" y="293" width="0.0105%" height="15" fill="rgb(253,11,6)" fg:x="56131" fg:w="86"/><text x="7.0729%" y="303.50"></text></g><g><title>0x7ff8067f7759 (7,627 samples, 0.93%)</title><rect x="5.9181%" y="309" width="0.9271%" height="15" fill="rgb(247,143,39)" fg:x="48687" fg:w="7627"/><text x="6.1681%" y="319.50"></text></g><g><title>0x7ff8067f7762 (87 samples, 0.01%)</title><rect x="6.8454%" y="309" width="0.0106%" height="15" fill="rgb(236,97,10)" fg:x="56316" fg:w="87"/><text x="7.0954%" y="319.50"></text></g><g><title>0x7ff8067f728c (264 samples, 0.03%)</title><rect x="6.8585%" y="293" width="0.0321%" height="15" fill="rgb(233,208,19)" fg:x="56424" fg:w="264"/><text x="7.1085%" y="303.50"></text></g><g><title>semaphore_wait_trap (263 samples, 0.03%)</title><rect x="6.8586%" y="277" width="0.0320%" height="15" fill="rgb(216,164,2)" fg:x="56425" fg:w="263"/><text x="7.1086%" y="287.50"></text></g><g><title>0x7ff8067f7781 (285 samples, 0.03%)</title><rect x="6.8579%" y="309" width="0.0346%" height="15" fill="rgb(220,129,5)" fg:x="56419" fg:w="285"/><text x="7.1079%" y="319.50"></text></g><g><title>0x7ff8068249ac (160 samples, 0.02%)</title><rect x="6.8953%" y="309" width="0.0194%" height="15" fill="rgb(242,17,10)" fg:x="56727" fg:w="160"/><text x="7.1453%" y="319.50"></text></g><g><title>mach_absolute_time (160 samples, 0.02%)</title><rect x="6.8953%" y="293" width="0.0194%" height="15" fill="rgb(242,107,0)" fg:x="56727" fg:w="160"/><text x="7.1453%" y="303.50"></text></g><g><title>std::thread::park_timeout (9,221 samples, 1.12%)</title><rect x="5.7974%" y="325" width="1.1208%" height="15" fill="rgb(251,28,31)" fg:x="47694" fg:w="9221"/><text x="6.0474%" y="335.50"></text></g><g><title>futures_timer::native::global::run (56,819 samples, 6.91%)</title><rect x="0.0134%" y="341" width="6.9065%" height="15" fill="rgb(233,223,10)" fg:x="110" fg:w="56819"/><text x="0.2634%" y="351.50">futures_t..</text></g><g><title>core::iter::traits::iterator::Iterator::eq_by (104 samples, 0.01%)</title><rect x="6.9701%" y="229" width="0.0126%" height="15" fill="rgb(215,21,27)" fg:x="57342" fg:w="104"/><text x="7.2201%" y="239.50"></text></g><g><title>std::path::Path::components (255 samples, 0.03%)</title><rect x="6.9829%" y="229" width="0.0310%" height="15" fill="rgb(232,23,21)" fg:x="57447" fg:w="255"/><text x="7.2329%" y="239.50"></text></g><g><title>&lt;Unknown Address&gt; (365 samples, 0.04%)</title><rect x="6.9696%" y="245" width="0.0444%" height="15" fill="rgb(244,5,23)" fg:x="57338" fg:w="365"/><text x="7.2196%" y="255.50"></text></g><g><title>DYLD-STUB$$_platform_memcmp (139 samples, 0.02%)</title><rect x="7.0140%" y="245" width="0.0169%" height="15" fill="rgb(226,81,46)" fg:x="57703" fg:w="139"/><text x="7.2640%" y="255.50"></text></g><g><title>DYLD-STUB$$memcmp (111 samples, 0.01%)</title><rect x="7.0309%" y="245" width="0.0135%" height="15" fill="rgb(247,70,30)" fg:x="57842" fg:w="111"/><text x="7.2809%" y="255.50"></text></g><g><title>&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (152 samples, 0.02%)</title><rect x="7.5330%" y="197" width="0.0185%" height="15" fill="rgb(212,68,19)" fg:x="61973" fg:w="152"/><text x="7.7830%" y="207.50"></text></g><g><title>futures_util::stream::futures_unordered::FuturesUnordered$LT$Fut$GT$::release_task::h7e2afad31c5bb516 (.llvm.18010357656557696342) (108 samples, 0.01%)</title><rect x="7.5384%" y="181" width="0.0131%" height="15" fill="rgb(240,187,13)" fg:x="62017" fg:w="108"/><text x="7.7884%" y="191.50"></text></g><g><title>&lt;futures_util::stream::futures_ordered::FuturesOrdered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (185 samples, 0.02%)</title><rect x="7.5315%" y="213" width="0.0225%" height="15" fill="rgb(223,113,26)" fg:x="61961" fg:w="185"/><text x="7.7815%" y="223.50"></text></g><g><title>&lt;futures_util::future::join_all::JoinAll&lt;F&gt; as core::future::future::Future&gt;::poll (192 samples, 0.02%)</title><rect x="7.5309%" y="229" width="0.0233%" height="15" fill="rgb(206,192,2)" fg:x="61956" fg:w="192"/><text x="7.7809%" y="239.50"></text></g><g><title>DYLD-STUB$$_platform_memcmp (136 samples, 0.02%)</title><rect x="7.5543%" y="229" width="0.0165%" height="15" fill="rgb(241,108,4)" fg:x="62148" fg:w="136"/><text x="7.8043%" y="239.50"></text></g><g><title>DYLD-STUB$$memcmp (126 samples, 0.02%)</title><rect x="7.5708%" y="229" width="0.0153%" height="15" fill="rgb(247,173,49)" fg:x="62284" fg:w="126"/><text x="7.8208%" y="239.50"></text></g><g><title>_platform_memcmp$VARIANT$Base (2,540 samples, 0.31%)</title><rect x="7.5866%" y="229" width="0.3087%" height="15" fill="rgb(224,114,35)" fg:x="62414" fg:w="2540"/><text x="7.8366%" y="239.50"></text></g><g><title>std::path::Components::len_before_body (3,536 samples, 0.43%)</title><rect x="10.7735%" y="197" width="0.4298%" height="15" fill="rgb(245,159,27)" fg:x="88632" fg:w="3536"/><text x="11.0235%" y="207.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (27,500 samples, 3.34%)</title><rect x="8.7549%" y="213" width="3.3427%" height="15" fill="rgb(245,172,44)" fg:x="72025" fg:w="27500"/><text x="9.0049%" y="223.50">&lt;st..</text></g><g><title>std::path::Components::parse_next_component_back (7,357 samples, 0.89%)</title><rect x="11.2033%" y="197" width="0.8943%" height="15" fill="rgb(236,23,11)" fg:x="92168" fg:w="7357"/><text x="11.4533%" y="207.50"></text></g><g><title>_platform_memcmp$VARIANT$Base (1,067 samples, 0.13%)</title><rect x="12.0976%" y="213" width="0.1297%" height="15" fill="rgb(205,117,38)" fg:x="99525" fg:w="1067"/><text x="12.3476%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::eq_by (39,324 samples, 4.78%)</title><rect x="7.8961%" y="229" width="4.7800%" height="15" fill="rgb(237,72,25)" fg:x="64960" fg:w="39324"/><text x="8.1461%" y="239.50">core::..</text></g><g><title>std::path::Components::len_before_body (3,692 samples, 0.45%)</title><rect x="12.2273%" y="213" width="0.4488%" height="15" fill="rgb(244,70,9)" fg:x="100592" fg:w="3692"/><text x="12.4773%" y="223.50"></text></g><g><title>0x7ff8067b9d11 (83 samples, 0.01%)</title><rect x="12.6877%" y="213" width="0.0101%" height="15" fill="rgb(217,125,39)" fg:x="104380" fg:w="83"/><text x="12.9377%" y="223.50"></text></g><g><title>core::ptr::drop_in_place$LT$storagev2..disk..writer..flusher..PartitionMetrics$GT$::hf5e50d265529add3 (.llvm.18388521016298315765) (223 samples, 0.03%)</title><rect x="12.6760%" y="229" width="0.0271%" height="15" fill="rgb(235,36,10)" fg:x="104284" fg:w="223"/><text x="12.9260%" y="239.50"></text></g><g><title>0x7ff80684e8f6 (165 samples, 0.02%)</title><rect x="12.7089%" y="133" width="0.0201%" height="15" fill="rgb(251,123,47)" fg:x="104554" fg:w="165"/><text x="12.9589%" y="143.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (198 samples, 0.02%)</title><rect x="12.7067%" y="197" width="0.0241%" height="15" fill="rgb(221,13,13)" fg:x="104536" fg:w="198"/><text x="12.9567%" y="207.50"></text></g><g><title>once_cell::imp::initialize_or_wait (198 samples, 0.02%)</title><rect x="12.7067%" y="181" width="0.0241%" height="15" fill="rgb(238,131,9)" fg:x="104536" fg:w="198"/><text x="12.9567%" y="191.50"></text></g><g><title>once_cell::imp::OnceCell$LT$T$GT$::initialize::_$u7b$$u7b$closure$u7d$$u7d$::hd12ae1697f79bd24 (.llvm.16041530799740990472) (198 samples, 0.02%)</title><rect x="12.7067%" y="165" width="0.0241%" height="15" fill="rgb(211,50,8)" fg:x="104536" fg:w="198"/><text x="12.9567%" y="175.50"></text></g><g><title>quanta::Calibration::calibrate (197 samples, 0.02%)</title><rect x="12.7068%" y="149" width="0.0239%" height="15" fill="rgb(245,182,24)" fg:x="104537" fg:w="197"/><text x="12.9568%" y="159.50"></text></g><g><title>governor::state::direct::_&lt;impl governor::state::RateLimiter&lt;governor::state::direct::NotKeyed,governor::state::in_memory::InMemoryState,governor::clock::quanta::QuantaClock,governor::middleware::NoOpMiddleware&lt;governor::clock::quanta::QuantaInstant&gt;&gt;&gt;::direct (235 samples, 0.03%)</title><rect x="12.7062%" y="229" width="0.0286%" height="15" fill="rgb(242,14,37)" fg:x="104532" fg:w="235"/><text x="12.9562%" y="239.50"></text></g><g><title>&lt;quanta::Clock as core::default::Default&gt;::default (231 samples, 0.03%)</title><rect x="12.7067%" y="213" width="0.0281%" height="15" fill="rgb(246,228,12)" fg:x="104536" fg:w="231"/><text x="12.9567%" y="223.50"></text></g><g><title>std::path::Path::components (8,736 samples, 1.06%)</title><rect x="12.7350%" y="229" width="1.0619%" height="15" fill="rgb(213,55,15)" fg:x="104769" fg:w="8736"/><text x="12.9850%" y="239.50"></text></g><g><title>0x7ff8067b742f (91 samples, 0.01%)</title><rect x="13.8165%" y="197" width="0.0111%" height="15" fill="rgb(209,9,3)" fg:x="113666" fg:w="91"/><text x="14.0665%" y="207.50"></text></g><g><title>0x7ff8067b622a (149 samples, 0.02%)</title><rect x="13.8122%" y="213" width="0.0181%" height="15" fill="rgb(230,59,30)" fg:x="113631" fg:w="149"/><text x="14.0622%" y="223.50"></text></g><g><title>storagev2::disk::writer::flusher::Flusher::get_partition_metrics (327 samples, 0.04%)</title><rect x="13.7969%" y="229" width="0.0397%" height="15" fill="rgb(209,121,21)" fg:x="113505" fg:w="327"/><text x="14.0469%" y="239.50"></text></g><g><title>storagev2::disk::writer::test::run_flush_benchmark::_$u7b$$u7b$closure$u7d$$u7d$::he02f1855f2419fa4 (.llvm.7591548134585326002) (56,657 samples, 6.89%)</title><rect x="6.9695%" y="261" width="6.8868%" height="15" fill="rgb(220,109,13)" fg:x="57337" fg:w="56657"/><text x="7.2195%" y="271.50">storagev2..</text></g><g><title>storagev2::disk::writer::test::test_flush_speed_with_dynamic_rate_multi_partition::_{{closure}} (56,041 samples, 6.81%)</title><rect x="7.0444%" y="245" width="6.8120%" height="15" fill="rgb(232,18,1)" fg:x="57953" fg:w="56041"/><text x="7.2944%" y="255.50">storagev2..</text></g><g><title>tokio::task::spawn::spawn (86 samples, 0.01%)</title><rect x="13.8459%" y="229" width="0.0105%" height="15" fill="rgb(215,41,42)" fg:x="113908" fg:w="86"/><text x="14.0959%" y="239.50"></text></g><g><title>0x7ff80683f8c6 (994 samples, 0.12%)</title><rect x="13.8958%" y="197" width="0.1208%" height="15" fill="rgb(224,123,36)" fg:x="114319" fg:w="994"/><text x="14.1458%" y="207.50"></text></g><g><title>mach_timebase_info (994 samples, 0.12%)</title><rect x="13.8958%" y="181" width="0.1208%" height="15" fill="rgb(240,125,3)" fg:x="114319" fg:w="994"/><text x="14.1458%" y="191.50"></text></g><g><title>0x7ff80684e86d (1,052 samples, 0.13%)</title><rect x="13.8952%" y="213" width="0.1279%" height="15" fill="rgb(205,98,50)" fg:x="114314" fg:w="1052"/><text x="14.1452%" y="223.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1,080 samples, 0.13%)</title><rect x="13.8922%" y="229" width="0.1313%" height="15" fill="rgb(205,185,37)" fg:x="114289" fg:w="1080"/><text x="14.1422%" y="239.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn::hdc27603f1e2477ca (.llvm.11592589432301260788) (1,491 samples, 0.18%)</title><rect x="14.0352%" y="229" width="0.1812%" height="15" fill="rgb(238,207,15)" fg:x="115466" fg:w="1491"/><text x="14.2852%" y="239.50"></text></g><g><title>mio::poll::Poll::poll (1,425 samples, 0.17%)</title><rect x="14.0433%" y="213" width="0.1732%" height="15" fill="rgb(213,199,42)" fg:x="115532" fg:w="1425"/><text x="14.2933%" y="223.50"></text></g><g><title>kevent (1,303 samples, 0.16%)</title><rect x="14.0581%" y="197" width="0.1584%" height="15" fill="rgb(235,201,11)" fg:x="115654" fg:w="1303"/><text x="14.3081%" y="207.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal::h05d49ce90ffebeb3 (.llvm.11592589432301260788) (2,805 samples, 0.34%)</title><rect x="13.8804%" y="245" width="0.3410%" height="15" fill="rgb(207,46,11)" fg:x="114192" fg:w="2805"/><text x="14.1304%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (2,946 samples, 0.36%)</title><rect x="13.8731%" y="261" width="0.3581%" height="15" fill="rgb(241,35,35)" fg:x="114132" fg:w="2946"/><text x="14.1231%" y="271.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (87 samples, 0.01%)</title><rect x="14.2363%" y="229" width="0.0106%" height="15" fill="rgb(243,32,47)" fg:x="117120" fg:w="87"/><text x="14.4863%" y="239.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn::hdc27603f1e2477ca (.llvm.11592589432301260788) (388 samples, 0.05%)</title><rect x="14.2509%" y="229" width="0.0472%" height="15" fill="rgb(247,202,23)" fg:x="117240" fg:w="388"/><text x="14.5009%" y="239.50"></text></g><g><title>mio::poll::Poll::poll (373 samples, 0.05%)</title><rect x="14.2527%" y="213" width="0.0453%" height="15" fill="rgb(219,102,11)" fg:x="117255" fg:w="373"/><text x="14.5027%" y="223.50"></text></g><g><title>kevent (359 samples, 0.04%)</title><rect x="14.2544%" y="197" width="0.0436%" height="15" fill="rgb(243,110,44)" fg:x="117269" fg:w="359"/><text x="14.5044%" y="207.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal::h05d49ce90ffebeb3 (.llvm.11592589432301260788) (554 samples, 0.07%)</title><rect x="14.2333%" y="245" width="0.0673%" height="15" fill="rgb(222,74,54)" fg:x="117095" fg:w="554"/><text x="14.4833%" y="255.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (90 samples, 0.01%)</title><rect x="14.3051%" y="229" width="0.0109%" height="15" fill="rgb(216,99,12)" fg:x="117686" fg:w="90"/><text x="14.5551%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park_yield (826 samples, 0.10%)</title><rect x="14.2312%" y="261" width="0.1004%" height="15" fill="rgb(226,22,26)" fg:x="117078" fg:w="826"/><text x="14.4812%" y="271.50"></text></g><g><title>tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (255 samples, 0.03%)</title><rect x="14.3006%" y="245" width="0.0310%" height="15" fill="rgb(217,163,10)" fg:x="117649" fg:w="255"/><text x="14.5506%" y="255.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (126 samples, 0.02%)</title><rect x="14.3163%" y="229" width="0.0153%" height="15" fill="rgb(213,25,53)" fg:x="117778" fg:w="126"/><text x="14.5663%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (1,219 samples, 0.15%)</title><rect x="14.3316%" y="261" width="0.1482%" height="15" fill="rgb(252,105,26)" fg:x="117904" fg:w="1219"/><text x="14.5816%" y="271.50"></text></g><g><title>&lt;Unknown Address&gt; (164 samples, 0.02%)</title><rect x="14.5537%" y="229" width="0.0199%" height="15" fill="rgb(220,39,43)" fg:x="119731" fg:w="164"/><text x="14.8037%" y="239.50"></text></g><g><title>__psynch_cvsignal (129 samples, 0.02%)</title><rect x="14.6492%" y="117" width="0.0157%" height="15" fill="rgb(229,68,48)" fg:x="120517" fg:w="129"/><text x="14.8992%" y="127.50"></text></g><g><title>pthread_cond_signal (132 samples, 0.02%)</title><rect x="14.6491%" y="133" width="0.0160%" height="15" fill="rgb(252,8,32)" fg:x="120516" fg:w="132"/><text x="14.8991%" y="143.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (143 samples, 0.02%)</title><rect x="14.6488%" y="149" width="0.0174%" height="15" fill="rgb(223,20,43)" fg:x="120514" fg:w="143"/><text x="14.8988%" y="159.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::start_seek (184 samples, 0.02%)</title><rect x="14.6440%" y="197" width="0.0224%" height="15" fill="rgb(229,81,49)" fg:x="120474" fg:w="184"/><text x="14.8940%" y="207.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (180 samples, 0.02%)</title><rect x="14.6445%" y="181" width="0.0219%" height="15" fill="rgb(236,28,36)" fg:x="120478" fg:w="180"/><text x="14.8945%" y="191.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (158 samples, 0.02%)</title><rect x="14.6471%" y="165" width="0.0192%" height="15" fill="rgb(249,185,26)" fg:x="120500" fg:w="158"/><text x="14.8971%" y="175.50"></text></g><g><title>0x7ff8068463a6 (151 samples, 0.02%)</title><rect x="14.6750%" y="133" width="0.0184%" height="15" fill="rgb(249,174,33)" fg:x="120729" fg:w="151"/><text x="14.9250%" y="143.50"></text></g><g><title>__getdirentries64 (150 samples, 0.02%)</title><rect x="14.6751%" y="117" width="0.0182%" height="15" fill="rgb(233,201,37)" fg:x="120730" fg:w="150"/><text x="14.9251%" y="127.50"></text></g><g><title>0x7ff8068630df (163 samples, 0.02%)</title><rect x="14.6738%" y="149" width="0.0198%" height="15" fill="rgb(221,78,26)" fg:x="120719" fg:w="163"/><text x="14.9238%" y="159.50"></text></g><g><title>&lt;std::sys::pal::unix::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (181 samples, 0.02%)</title><rect x="14.6728%" y="165" width="0.0220%" height="15" fill="rgb(250,127,30)" fg:x="120711" fg:w="181"/><text x="14.9228%" y="175.50"></text></g><g><title>&lt;std::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (190 samples, 0.02%)</title><rect x="14.6725%" y="181" width="0.0231%" height="15" fill="rgb(230,49,44)" fg:x="120709" fg:w="190"/><text x="14.9225%" y="191.50"></text></g><g><title>std::path::Path::is_dir (151 samples, 0.02%)</title><rect x="14.7039%" y="181" width="0.0184%" height="15" fill="rgb(229,67,23)" fg:x="120967" fg:w="151"/><text x="14.9539%" y="191.50"></text></g><g><title>stat$INODE64 (150 samples, 0.02%)</title><rect x="14.7040%" y="165" width="0.0182%" height="15" fill="rgb(249,83,47)" fg:x="120968" fg:w="150"/><text x="14.9540%" y="175.50"></text></g><g><title>0x7ff8068449e1 (294 samples, 0.04%)</title><rect x="14.7238%" y="165" width="0.0357%" height="15" fill="rgb(215,43,3)" fg:x="121131" fg:w="294"/><text x="14.9738%" y="175.50"></text></g><g><title>open$NOCANCEL (292 samples, 0.04%)</title><rect x="14.7241%" y="149" width="0.0355%" height="15" fill="rgb(238,154,13)" fg:x="121133" fg:w="292"/><text x="14.9741%" y="159.50"></text></g><g><title>__open_nocancel (290 samples, 0.04%)</title><rect x="14.7243%" y="133" width="0.0353%" height="15" fill="rgb(219,56,2)" fg:x="121135" fg:w="290"/><text x="14.9743%" y="143.50"></text></g><g><title>std::sys::pal::unix::fs::readdir (350 samples, 0.04%)</title><rect x="14.7225%" y="181" width="0.0425%" height="15" fill="rgb(233,0,4)" fg:x="121120" fg:w="350"/><text x="14.9725%" y="191.50"></text></g><g><title>common::util::other::dir_recursive (874 samples, 0.11%)</title><rect x="14.6708%" y="197" width="0.1062%" height="15" fill="rgb(235,30,7)" fg:x="120695" fg:w="874"/><text x="14.9208%" y="207.50"></text></g><g><title>std::sys::pal::unix::fs::stat (99 samples, 0.01%)</title><rect x="14.7651%" y="181" width="0.0120%" height="15" fill="rgb(250,79,13)" fg:x="121470" fg:w="99"/><text x="15.0151%" y="191.50"></text></g><g><title>stat$INODE64 (92 samples, 0.01%)</title><rect x="14.7659%" y="165" width="0.0112%" height="15" fill="rgb(211,146,34)" fg:x="121477" fg:w="92"/><text x="15.0159%" y="175.50"></text></g><g><title>std::sys::pal::unix::fs::stat (216 samples, 0.03%)</title><rect x="14.7839%" y="197" width="0.0263%" height="15" fill="rgb(228,22,38)" fg:x="121625" fg:w="216"/><text x="15.0339%" y="207.50"></text></g><g><title>stat$INODE64 (213 samples, 0.03%)</title><rect x="14.7843%" y="181" width="0.0259%" height="15" fill="rgb(235,168,5)" fg:x="121628" fg:w="213"/><text x="15.0343%" y="191.50"></text></g><g><title>common::util::other::check_exist (111 samples, 0.01%)</title><rect x="14.8117%" y="181" width="0.0135%" height="15" fill="rgb(221,155,16)" fg:x="121854" fg:w="111"/><text x="15.0617%" y="191.50"></text></g><g><title>std::sys::pal::unix::fs::stat (108 samples, 0.01%)</title><rect x="14.8121%" y="165" width="0.0131%" height="15" fill="rgb(215,215,53)" fg:x="121857" fg:w="108"/><text x="15.0621%" y="175.50"></text></g><g><title>stat$INODE64 (107 samples, 0.01%)</title><rect x="14.8122%" y="149" width="0.0130%" height="15" fill="rgb(223,4,10)" fg:x="121858" fg:w="107"/><text x="15.0622%" y="159.50"></text></g><g><title>std::fs::OpenOptions::_open (1,294 samples, 0.16%)</title><rect x="14.8253%" y="181" width="0.1573%" height="15" fill="rgb(234,103,6)" fg:x="121966" fg:w="1294"/><text x="15.0753%" y="191.50"></text></g><g><title>open (1,291 samples, 0.16%)</title><rect x="14.8257%" y="165" width="0.1569%" height="15" fill="rgb(227,97,0)" fg:x="121969" fg:w="1291"/><text x="15.0757%" y="175.50"></text></g><g><title>__open (1,290 samples, 0.16%)</title><rect x="14.8258%" y="149" width="0.1568%" height="15" fill="rgb(234,150,53)" fg:x="121970" fg:w="1290"/><text x="15.0758%" y="159.50"></text></g><g><title>storagev2::disk::fd_cache::create_writer_fd (1,421 samples, 0.17%)</title><rect x="14.8112%" y="197" width="0.1727%" height="15" fill="rgb(228,201,54)" fg:x="121850" fg:w="1421"/><text x="15.0612%" y="207.50"></text></g><g><title>std::fs::OpenOptions::_open (1,389 samples, 0.17%)</title><rect x="14.9936%" y="165" width="0.1688%" height="15" fill="rgb(222,22,37)" fg:x="123350" fg:w="1389"/><text x="15.2436%" y="175.50"></text></g><g><title>open (1,386 samples, 0.17%)</title><rect x="14.9939%" y="149" width="0.1685%" height="15" fill="rgb(237,53,32)" fg:x="123353" fg:w="1386"/><text x="15.2439%" y="159.50"></text></g><g><title>__open (1,382 samples, 0.17%)</title><rect x="14.9944%" y="133" width="0.1680%" height="15" fill="rgb(233,25,53)" fg:x="123357" fg:w="1382"/><text x="15.2444%" y="143.50"></text></g><g><title>storagev2::disk::meta::WriterPositionPtr::new (1,473 samples, 0.18%)</title><rect x="14.9840%" y="197" width="0.1790%" height="15" fill="rgb(210,40,34)" fg:x="123271" fg:w="1473"/><text x="15.2340%" y="207.50"></text></g><g><title>storagev2::disk::fd_cache::create_writer_fd (1,452 samples, 0.18%)</title><rect x="14.9865%" y="181" width="0.1765%" height="15" fill="rgb(241,220,44)" fg:x="123292" fg:w="1452"/><text x="15.2365%" y="191.50"></text></g><g><title>pthread_cond_signal (130 samples, 0.02%)</title><rect x="15.1774%" y="133" width="0.0158%" height="15" fill="rgb(235,28,35)" fg:x="124862" fg:w="130"/><text x="15.4274%" y="143.50"></text></g><g><title>__psynch_cvsignal (129 samples, 0.02%)</title><rect x="15.1775%" y="117" width="0.0157%" height="15" fill="rgb(210,56,17)" fg:x="124863" fg:w="129"/><text x="15.4275%" y="127.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (134 samples, 0.02%)</title><rect x="15.1772%" y="149" width="0.0163%" height="15" fill="rgb(224,130,29)" fg:x="124861" fg:w="134"/><text x="15.4272%" y="159.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (152 samples, 0.02%)</title><rect x="15.1752%" y="165" width="0.0185%" height="15" fill="rgb(235,212,8)" fg:x="124844" fg:w="152"/><text x="15.4252%" y="175.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (165 samples, 0.02%)</title><rect x="15.1748%" y="181" width="0.0201%" height="15" fill="rgb(223,33,50)" fg:x="124841" fg:w="165"/><text x="15.4248%" y="191.50"></text></g><g><title>tokio::fs::create_dir_all::create_dir_all::_{{closure}} (193 samples, 0.02%)</title><rect x="15.1724%" y="197" width="0.0235%" height="15" fill="rgb(219,149,13)" fg:x="124821" fg:w="193"/><text x="15.4224%" y="207.50"></text></g><g><title>storagev2::disk::writer::TopicStorage::get_partition::_{{closure}} (4,772 samples, 0.58%)</title><rect x="14.6169%" y="213" width="0.5801%" height="15" fill="rgb(250,156,29)" fg:x="120251" fg:w="4772"/><text x="14.8669%" y="223.50"></text></g><g><title>storagev2::disk::writer::DiskStorageWriter::new::_$u7b$$u7b$closure$u7d$$u7d$::h6a4deabc83e6aa4f (.llvm.14280434548401472387) (4,976 samples, 0.60%)</title><rect x="14.5941%" y="229" width="0.6048%" height="15" fill="rgb(216,193,19)" fg:x="120064" fg:w="4976"/><text x="14.8441%" y="239.50"></text></g><g><title>&lt;core::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (86 samples, 0.01%)</title><rect x="15.2114%" y="213" width="0.0105%" height="15" fill="rgb(216,135,14)" fg:x="125142" fg:w="86"/><text x="15.4614%" y="223.50"></text></g><g><title>0x7ff8067b742f (117 samples, 0.01%)</title><rect x="15.6090%" y="181" width="0.0142%" height="15" fill="rgb(241,47,5)" fg:x="128413" fg:w="117"/><text x="15.8590%" y="191.50"></text></g><g><title>0x7ff8067b622a (187 samples, 0.02%)</title><rect x="15.6052%" y="197" width="0.0227%" height="15" fill="rgb(233,42,35)" fg:x="128382" fg:w="187"/><text x="15.8552%" y="207.50"></text></g><g><title>0x7ff8067caaa5 (141 samples, 0.02%)</title><rect x="15.6462%" y="197" width="0.0171%" height="15" fill="rgb(231,13,6)" fg:x="128719" fg:w="141"/><text x="15.8962%" y="207.50"></text></g><g><title>_platform_memcmp$VARIANT$Base (591 samples, 0.07%)</title><rect x="17.2756%" y="133" width="0.0718%" height="15" fill="rgb(207,181,40)" fg:x="142124" fg:w="591"/><text x="17.5256%" y="143.50"></text></g><g><title>_$LT$std..path..PathBuf$u20$as$u20$core..cmp..PartialEq$GT$::eq::ha8ca9e43c08bccd1 (.llvm.17815140968249597325) (8,704 samples, 1.06%)</title><rect x="17.2260%" y="149" width="1.0580%" height="15" fill="rgb(254,173,49)" fg:x="141716" fg:w="8704"/><text x="17.4760%" y="159.50"></text></g><g><title>std::path::Path::components (7,630 samples, 0.93%)</title><rect x="17.3566%" y="133" width="0.9274%" height="15" fill="rgb(221,1,38)" fg:x="142790" fg:w="7630"/><text x="17.6066%" y="143.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (33,051 samples, 4.02%)</title><rect x="16.1976%" y="165" width="4.0175%" height="15" fill="rgb(206,124,46)" fg:x="133255" fg:w="33051"/><text x="16.4476%" y="175.50">&lt;das..</text></g><g><title>dashmap::DashMap$LT$K$C$V$C$S$GT$::hash_u64::hbd53c616c4e8f94e (.llvm.17815140968249597325) (15,886 samples, 1.93%)</title><rect x="18.2840%" y="149" width="1.9310%" height="15" fill="rgb(249,21,11)" fg:x="150420" fg:w="15886"/><text x="18.5340%" y="159.50">d..</text></g><g><title>&lt;std::path::PathBuf as core::hash::Hash&gt;::hash (14,726 samples, 1.79%)</title><rect x="18.4250%" y="133" width="1.7900%" height="15" fill="rgb(222,201,40)" fg:x="151580" fg:w="14726"/><text x="18.6750%" y="143.50">&lt;..</text></g><g><title>_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$::write::hb824622b973a5f90 (.llvm.17815140968249597325) (4,143 samples, 0.50%)</title><rect x="19.7114%" y="117" width="0.5036%" height="15" fill="rgb(235,61,29)" fg:x="162163" fg:w="4143"/><text x="19.9614%" y="127.50"></text></g><g><title>&lt;dashmap::iter::Iter&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,420 samples, 0.17%)</title><rect x="20.2150%" y="165" width="0.1726%" height="15" fill="rgb(219,207,3)" fg:x="166306" fg:w="1420"/><text x="20.4650%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (38,649 samples, 4.70%)</title><rect x="15.6901%" y="181" width="4.6979%" height="15" fill="rgb(222,56,46)" fg:x="129080" fg:w="38649"/><text x="15.9401%" y="191.50">&lt;core..</text></g><g><title>0x7ff8067b936f (110 samples, 0.01%)</title><rect x="20.3988%" y="117" width="0.0134%" height="15" fill="rgb(239,76,54)" fg:x="167818" fg:w="110"/><text x="20.6488%" y="127.50"></text></g><g><title>0x7ff8067b93b0 (151 samples, 0.02%)</title><rect x="20.4122%" y="117" width="0.0184%" height="15" fill="rgb(231,124,27)" fg:x="167928" fg:w="151"/><text x="20.6622%" y="127.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (151 samples, 0.02%)</title><rect x="20.4122%" y="101" width="0.0184%" height="15" fill="rgb(249,195,6)" fg:x="167928" fg:w="151"/><text x="20.6622%" y="111.50"></text></g><g><title>0x7ff8067dfb9f (375 samples, 0.05%)</title><rect x="20.3920%" y="133" width="0.0456%" height="15" fill="rgb(237,174,47)" fg:x="167762" fg:w="375"/><text x="20.6420%" y="143.50"></text></g><g><title>0x7ff8067e026b (381 samples, 0.05%)</title><rect x="20.3914%" y="149" width="0.0463%" height="15" fill="rgb(206,201,31)" fg:x="167757" fg:w="381"/><text x="20.6414%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (410 samples, 0.05%)</title><rect x="20.3880%" y="181" width="0.0498%" height="15" fill="rgb(231,57,52)" fg:x="167729" fg:w="410"/><text x="20.6380%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow::h14a3ae5848e00c88 (.llvm.8397100783481822762) (405 samples, 0.05%)</title><rect x="20.3886%" y="165" width="0.0492%" height="15" fill="rgb(248,177,22)" fg:x="167734" fg:w="405"/><text x="20.6386%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (39,271 samples, 4.77%)</title><rect x="15.6644%" y="197" width="4.7735%" height="15" fill="rgb(215,211,37)" fg:x="128869" fg:w="39271"/><text x="15.9144%" y="207.50">&lt;alloc..</text></g><g><title>storagev2::disk::writer::flusher::Flusher::flush_by_state (43,108 samples, 5.24%)</title><rect x="15.2222%" y="213" width="5.2399%" height="15" fill="rgb(241,128,51)" fg:x="125231" fg:w="43108"/><text x="15.4722%" y="223.50">storag..</text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::try_send (140 samples, 0.02%)</title><rect x="20.4451%" y="197" width="0.0170%" height="15" fill="rgb(227,165,31)" fg:x="168199" fg:w="140"/><text x="20.6951%" y="207.50"></text></g><g><title>storagev2::disk::writer::DiskStorageWriter::new::_$u7b$$u7b$closure$u7d$$u7d$::hc959da50f8d899c5 (.llvm.14280434548401472387) (43,375 samples, 5.27%)</title><rect x="15.1990%" y="229" width="5.2724%" height="15" fill="rgb(228,167,24)" fg:x="125040" fg:w="43375"/><text x="15.4490%" y="239.50">storag..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (132 samples, 0.02%)</title><rect x="20.5207%" y="197" width="0.0160%" height="15" fill="rgb(228,143,12)" fg:x="168821" fg:w="132"/><text x="20.7707%" y="207.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::poll_complete (223 samples, 0.03%)</title><rect x="20.5099%" y="213" width="0.0271%" height="15" fill="rgb(249,149,8)" fg:x="168732" fg:w="223"/><text x="20.7599%" y="223.50"></text></g><g><title>0x7ff8067dfd99 (111 samples, 0.01%)</title><rect x="20.5427%" y="149" width="0.0135%" height="15" fill="rgb(243,35,44)" fg:x="169002" fg:w="111"/><text x="20.7927%" y="159.50"></text></g><g><title>0x7ff8067e0345 (117 samples, 0.01%)</title><rect x="20.5421%" y="165" width="0.0142%" height="15" fill="rgb(246,89,9)" fg:x="168997" fg:w="117"/><text x="20.7921%" y="175.50"></text></g><g><title>__rdl_alloc (120 samples, 0.01%)</title><rect x="20.5419%" y="181" width="0.0146%" height="15" fill="rgb(233,213,13)" fg:x="168995" fg:w="120"/><text x="20.7919%" y="191.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (161 samples, 0.02%)</title><rect x="20.5586%" y="165" width="0.0196%" height="15" fill="rgb(233,141,41)" fg:x="169133" fg:w="161"/><text x="20.8086%" y="175.50"></text></g><g><title>_pthread_mutex_firstfit_wake (158 samples, 0.02%)</title><rect x="20.5590%" y="149" width="0.0192%" height="15" fill="rgb(239,167,4)" fg:x="169136" fg:w="158"/><text x="20.8090%" y="159.50"></text></g><g><title>__psynch_mutexdrop (157 samples, 0.02%)</title><rect x="20.5591%" y="133" width="0.0191%" height="15" fill="rgb(209,217,16)" fg:x="169137" fg:w="157"/><text x="20.8091%" y="143.50"></text></g><g><title>__psynch_cvsignal (988 samples, 0.12%)</title><rect x="20.5955%" y="133" width="0.1201%" height="15" fill="rgb(219,88,35)" fg:x="169436" fg:w="988"/><text x="20.8455%" y="143.50"></text></g><g><title>pthread_cond_signal (1,018 samples, 0.12%)</title><rect x="20.5936%" y="149" width="0.1237%" height="15" fill="rgb(220,193,23)" fg:x="169421" fg:w="1018"/><text x="20.8436%" y="159.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (1,065 samples, 0.13%)</title><rect x="20.5922%" y="165" width="0.1295%" height="15" fill="rgb(230,90,52)" fg:x="169409" fg:w="1065"/><text x="20.8422%" y="175.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_seek::AsyncSeek&gt;::start_seek (1,528 samples, 0.19%)</title><rect x="20.5370%" y="213" width="0.1857%" height="15" fill="rgb(252,106,19)" fg:x="168955" fg:w="1528"/><text x="20.7870%" y="223.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (1,511 samples, 0.18%)</title><rect x="20.5391%" y="197" width="0.1837%" height="15" fill="rgb(206,74,20)" fg:x="168972" fg:w="1511"/><text x="20.7891%" y="207.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1,365 samples, 0.17%)</title><rect x="20.5568%" y="181" width="0.1659%" height="15" fill="rgb(230,138,44)" fg:x="169118" fg:w="1365"/><text x="20.8068%" y="191.50"></text></g><g><title>0x7ff8067dfd99 (120 samples, 0.01%)</title><rect x="20.7397%" y="149" width="0.0146%" height="15" fill="rgb(235,182,43)" fg:x="170623" fg:w="120"/><text x="20.9897%" y="159.50"></text></g><g><title>0x7ff8067e0345 (127 samples, 0.02%)</title><rect x="20.7390%" y="165" width="0.0154%" height="15" fill="rgb(242,16,51)" fg:x="170617" fg:w="127"/><text x="20.9890%" y="175.50"></text></g><g><title>__rdl_alloc (131 samples, 0.02%)</title><rect x="20.7388%" y="181" width="0.0159%" height="15" fill="rgb(248,9,4)" fg:x="170615" fg:w="131"/><text x="20.9888%" y="191.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (140 samples, 0.02%)</title><rect x="20.7577%" y="165" width="0.0170%" height="15" fill="rgb(210,31,22)" fg:x="170771" fg:w="140"/><text x="21.0077%" y="175.50"></text></g><g><title>_pthread_mutex_firstfit_wake (140 samples, 0.02%)</title><rect x="20.7577%" y="149" width="0.0170%" height="15" fill="rgb(239,54,39)" fg:x="170771" fg:w="140"/><text x="21.0077%" y="159.50"></text></g><g><title>__psynch_mutexdrop (140 samples, 0.02%)</title><rect x="20.7577%" y="133" width="0.0170%" height="15" fill="rgb(230,99,41)" fg:x="170771" fg:w="140"/><text x="21.0077%" y="143.50"></text></g><g><title>__psynch_cvsignal (1,109 samples, 0.13%)</title><rect x="20.7882%" y="133" width="0.1348%" height="15" fill="rgb(253,106,12)" fg:x="171022" fg:w="1109"/><text x="21.0382%" y="143.50"></text></g><g><title>pthread_cond_signal (1,133 samples, 0.14%)</title><rect x="20.7872%" y="149" width="0.1377%" height="15" fill="rgb(213,46,41)" fg:x="171013" fg:w="1133"/><text x="21.0372%" y="159.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (1,183 samples, 0.14%)</title><rect x="20.7858%" y="165" width="0.1438%" height="15" fill="rgb(215,133,35)" fg:x="171002" fg:w="1183"/><text x="21.0358%" y="175.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write (1,705 samples, 0.21%)</title><rect x="20.7227%" y="213" width="0.2072%" height="15" fill="rgb(213,28,5)" fg:x="170483" fg:w="1705"/><text x="20.9727%" y="223.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (1,598 samples, 0.19%)</title><rect x="20.7357%" y="197" width="0.1942%" height="15" fill="rgb(215,77,49)" fg:x="170590" fg:w="1598"/><text x="20.9857%" y="207.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1,437 samples, 0.17%)</title><rect x="20.7553%" y="181" width="0.1747%" height="15" fill="rgb(248,100,22)" fg:x="170751" fg:w="1437"/><text x="21.0053%" y="191.50"></text></g><g><title>serde_json::ser::format_escaped_str (150 samples, 0.02%)</title><rect x="20.9421%" y="181" width="0.0182%" height="15" fill="rgb(208,67,9)" fg:x="172288" fg:w="150"/><text x="21.1921%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (109 samples, 0.01%)</title><rect x="20.9471%" y="165" width="0.0132%" height="15" fill="rgb(219,133,21)" fg:x="172329" fg:w="109"/><text x="21.1971%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow::h14a3ae5848e00c88 (.llvm.8397100783481822762) (100 samples, 0.01%)</title><rect x="20.9482%" y="149" width="0.0122%" height="15" fill="rgb(246,46,29)" fg:x="172338" fg:w="100"/><text x="21.1982%" y="159.50"></text></g><g><title>storagev2::disk::meta::_::_&lt;impl serde::ser::Serialize for storagev2::disk::meta::WriterPositionPtrSnapshot&gt;::serialize (215 samples, 0.03%)</title><rect x="20.9356%" y="213" width="0.0261%" height="15" fill="rgb(246,185,52)" fg:x="172234" fg:w="215"/><text x="21.1856%" y="223.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (199 samples, 0.02%)</title><rect x="20.9375%" y="197" width="0.0242%" height="15" fill="rgb(252,136,11)" fg:x="172250" fg:w="199"/><text x="21.1875%" y="207.50"></text></g><g><title>&lt;&amp;mut F as core::future::future::Future&gt;::poll (98 samples, 0.01%)</title><rect x="20.9717%" y="197" width="0.0119%" height="15" fill="rgb(219,138,53)" fg:x="172531" fg:w="98"/><text x="21.2217%" y="207.50"></text></g><g><title>0x7ff8067b9d11 (114 samples, 0.01%)</title><rect x="20.9943%" y="149" width="0.0139%" height="15" fill="rgb(211,51,23)" fg:x="172717" fg:w="114"/><text x="21.2443%" y="159.50"></text></g><g><title>tokio::fs::file::Inner::poll_complete_inflight (213 samples, 0.03%)</title><rect x="20.9853%" y="197" width="0.0259%" height="15" fill="rgb(247,221,28)" fg:x="172643" fg:w="213"/><text x="21.2353%" y="207.50"></text></g><g><title>tokio::fs::file::Inner::poll_flush (207 samples, 0.03%)</title><rect x="20.9860%" y="181" width="0.0252%" height="15" fill="rgb(251,222,45)" fg:x="172649" fg:w="207"/><text x="21.2360%" y="191.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (158 samples, 0.02%)</title><rect x="20.9920%" y="165" width="0.0192%" height="15" fill="rgb(217,162,53)" fg:x="172698" fg:w="158"/><text x="21.2420%" y="175.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (142 samples, 0.02%)</title><rect x="21.0179%" y="165" width="0.0173%" height="15" fill="rgb(229,93,14)" fg:x="172911" fg:w="142"/><text x="21.2679%" y="175.50"></text></g><g><title>_pthread_mutex_firstfit_wake (136 samples, 0.02%)</title><rect x="21.0186%" y="149" width="0.0165%" height="15" fill="rgb(209,67,49)" fg:x="172917" fg:w="136"/><text x="21.2686%" y="159.50"></text></g><g><title>__psynch_mutexdrop (131 samples, 0.02%)</title><rect x="21.0192%" y="133" width="0.0159%" height="15" fill="rgb(213,87,29)" fg:x="172922" fg:w="131"/><text x="21.2692%" y="143.50"></text></g><g><title>__psynch_cvsignal (1,032 samples, 0.13%)</title><rect x="21.0508%" y="133" width="0.1254%" height="15" fill="rgb(205,151,52)" fg:x="173182" fg:w="1032"/><text x="21.3008%" y="143.50"></text></g><g><title>pthread_cond_signal (1,056 samples, 0.13%)</title><rect x="21.0490%" y="149" width="0.1284%" height="15" fill="rgb(253,215,39)" fg:x="173167" fg:w="1056"/><text x="21.2990%" y="159.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (1,120 samples, 0.14%)</title><rect x="21.0462%" y="165" width="0.1361%" height="15" fill="rgb(221,220,41)" fg:x="173144" fg:w="1120"/><text x="21.2962%" y="175.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (1,391 samples, 0.17%)</title><rect x="21.0140%" y="181" width="0.1691%" height="15" fill="rgb(218,133,21)" fg:x="172879" fg:w="1391"/><text x="21.2640%" y="191.50"></text></g><g><title>0x7ff8067dfd99 (106 samples, 0.01%)</title><rect x="21.1877%" y="133" width="0.0129%" height="15" fill="rgb(221,193,43)" fg:x="174308" fg:w="106"/><text x="21.4377%" y="143.50"></text></g><g><title>0x7ff8067e0345 (113 samples, 0.01%)</title><rect x="21.1869%" y="149" width="0.0137%" height="15" fill="rgb(240,128,52)" fg:x="174302" fg:w="113"/><text x="21.4369%" y="159.50"></text></g><g><title>__rdl_alloc (121 samples, 0.01%)</title><rect x="21.1863%" y="165" width="0.0147%" height="15" fill="rgb(253,114,12)" fg:x="174297" fg:w="121"/><text x="21.4363%" y="175.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (145 samples, 0.02%)</title><rect x="21.1844%" y="181" width="0.0176%" height="15" fill="rgb(215,223,47)" fg:x="174281" fg:w="145"/><text x="21.4344%" y="191.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (1,573 samples, 0.19%)</title><rect x="21.0112%" y="197" width="0.1912%" height="15" fill="rgb(248,225,23)" fg:x="172856" fg:w="1573"/><text x="21.2612%" y="207.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (150 samples, 0.02%)</title><rect x="21.2024%" y="197" width="0.0182%" height="15" fill="rgb(250,108,0)" fg:x="174429" fg:w="150"/><text x="21.4524%" y="207.50"></text></g><g><title>tokio::fs::file::File::set_len::_{{closure}} (2,148 samples, 0.26%)</title><rect x="20.9617%" y="213" width="0.2611%" height="15" fill="rgb(228,208,7)" fg:x="172449" fg:w="2148"/><text x="21.2117%" y="223.50"></text></g><g><title>storagev2::disk::writer::flusher::Flusher::new::_$u7b$$u7b$closure$u7d$$u7d$::h1864b876068895a2 (.llvm.14280434548401472387) (6,259 samples, 0.76%)</title><rect x="20.4714%" y="229" width="0.7608%" height="15" fill="rgb(244,45,10)" fg:x="168415" fg:w="6259"/><text x="20.7214%" y="239.50"></text></g><g><title>&lt;tokio_util::sync::cancellation_token::WaitForCancellationFuture as core::future::future::Future&gt;::poll (110 samples, 0.01%)</title><rect x="21.4818%" y="197" width="0.0134%" height="15" fill="rgb(207,125,25)" fg:x="176728" fg:w="110"/><text x="21.7318%" y="207.50"></text></g><g><title>tokio::sync::mpsc::list::Rx$LT$T$GT$::pop::h12c51d67c608f638 (.llvm.8397100783481822762) (149 samples, 0.02%)</title><rect x="21.5049%" y="181" width="0.0181%" height="15" fill="rgb(210,195,18)" fg:x="176918" fg:w="149"/><text x="21.7549%" y="191.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (239 samples, 0.03%)</title><rect x="21.4967%" y="197" width="0.0291%" height="15" fill="rgb(249,80,12)" fg:x="176850" fg:w="239"/><text x="21.7467%" y="207.50"></text></g><g><title>&lt;core::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (418 samples, 0.05%)</title><rect x="21.4753%" y="213" width="0.0508%" height="15" fill="rgb(221,65,9)" fg:x="176674" fg:w="418"/><text x="21.7253%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;storagev2::disk::writer::buffer::PartitionWriterBuffer::flush::{{closure}}&gt; (89 samples, 0.01%)</title><rect x="21.5364%" y="213" width="0.0108%" height="15" fill="rgb(235,49,36)" fg:x="177177" fg:w="89"/><text x="21.7864%" y="223.50"></text></g><g><title>0x7ff8067b7306 (93 samples, 0.01%)</title><rect x="22.6253%" y="181" width="0.0113%" height="15" fill="rgb(225,32,20)" fg:x="186135" fg:w="93"/><text x="22.8753%" y="191.50"></text></g><g><title>0x7ff8067b742f (527 samples, 0.06%)</title><rect x="22.6527%" y="181" width="0.0641%" height="15" fill="rgb(215,141,46)" fg:x="186361" fg:w="527"/><text x="22.9027%" y="191.50"></text></g><g><title>0x7ff8067b622a (944 samples, 0.11%)</title><rect x="22.6228%" y="197" width="0.1147%" height="15" fill="rgb(250,160,47)" fg:x="186115" fg:w="944"/><text x="22.8728%" y="207.50"></text></g><g><title>0x7ff8067b9b2a (158 samples, 0.02%)</title><rect x="22.7609%" y="197" width="0.0192%" height="15" fill="rgb(216,222,40)" fg:x="187251" fg:w="158"/><text x="23.0109%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (247 samples, 0.03%)</title><rect x="22.7903%" y="181" width="0.0300%" height="15" fill="rgb(234,217,39)" fg:x="187493" fg:w="247"/><text x="23.0403%" y="191.50"></text></g><g><title>0x7ff8067b9b8b (401 samples, 0.05%)</title><rect x="22.7901%" y="197" width="0.0487%" height="15" fill="rgb(207,178,40)" fg:x="187491" fg:w="401"/><text x="23.0401%" y="207.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (152 samples, 0.02%)</title><rect x="22.8204%" y="181" width="0.0185%" height="15" fill="rgb(221,136,13)" fg:x="187740" fg:w="152"/><text x="23.0704%" y="191.50"></text></g><g><title>0x7ff8067b9ba8 (275 samples, 0.03%)</title><rect x="22.8432%" y="197" width="0.0334%" height="15" fill="rgb(249,199,10)" fg:x="187928" fg:w="275"/><text x="23.0932%" y="207.50"></text></g><g><title>0x7ff8067b9e6b (127 samples, 0.02%)</title><rect x="22.9058%" y="181" width="0.0154%" height="15" fill="rgb(249,222,13)" fg:x="188443" fg:w="127"/><text x="23.1558%" y="191.50"></text></g><g><title>0x7ff8067b9f12 (134 samples, 0.02%)</title><rect x="22.9316%" y="181" width="0.0163%" height="15" fill="rgb(244,185,38)" fg:x="188655" fg:w="134"/><text x="23.1816%" y="191.50"></text></g><g><title>0x7ff8067bac2e (362 samples, 0.04%)</title><rect x="22.9830%" y="165" width="0.0440%" height="15" fill="rgb(236,202,9)" fg:x="189078" fg:w="362"/><text x="23.2330%" y="175.50"></text></g><g><title>0x7ff8067bac89 (135 samples, 0.02%)</title><rect x="23.0308%" y="165" width="0.0164%" height="15" fill="rgb(250,229,37)" fg:x="189471" fg:w="135"/><text x="23.2808%" y="175.50"></text></g><g><title>0x7ff8067ba0f3 (636 samples, 0.08%)</title><rect x="22.9758%" y="181" width="0.0773%" height="15" fill="rgb(206,174,23)" fg:x="189019" fg:w="636"/><text x="23.2258%" y="191.50"></text></g><g><title>0x7ff8067ba1ba (99 samples, 0.01%)</title><rect x="23.0619%" y="181" width="0.0120%" height="15" fill="rgb(211,33,43)" fg:x="189727" fg:w="99"/><text x="23.3119%" y="191.50"></text></g><g><title>0x7ff8067bac2e (300 samples, 0.04%)</title><rect x="23.0850%" y="165" width="0.0365%" height="15" fill="rgb(245,58,50)" fg:x="189917" fg:w="300"/><text x="23.3350%" y="175.50"></text></g><g><title>0x7ff8067ba222 (528 samples, 0.06%)</title><rect x="23.0765%" y="181" width="0.0642%" height="15" fill="rgb(244,68,36)" fg:x="189847" fg:w="528"/><text x="23.3265%" y="191.50"></text></g><g><title>0x7ff8067ba886 (85 samples, 0.01%)</title><rect x="23.1647%" y="165" width="0.0103%" height="15" fill="rgb(232,229,15)" fg:x="190573" fg:w="85"/><text x="23.4147%" y="175.50"></text></g><g><title>0x7ff8067ba8a7 (698 samples, 0.08%)</title><rect x="23.1782%" y="165" width="0.0848%" height="15" fill="rgb(254,30,23)" fg:x="190684" fg:w="698"/><text x="23.4282%" y="175.50"></text></g><g><title>0x7ff8067ba91e (227 samples, 0.03%)</title><rect x="23.2780%" y="165" width="0.0276%" height="15" fill="rgb(235,160,14)" fg:x="191505" fg:w="227"/><text x="23.5280%" y="175.50"></text></g><g><title>0x7ff8067ba96f (160 samples, 0.02%)</title><rect x="23.3078%" y="165" width="0.0194%" height="15" fill="rgb(212,155,44)" fg:x="191750" fg:w="160"/><text x="23.5578%" y="175.50"></text></g><g><title>0x7ff8067ba2bc (1,692 samples, 0.21%)</title><rect x="23.1455%" y="181" width="0.2057%" height="15" fill="rgb(226,2,50)" fg:x="190415" fg:w="1692"/><text x="23.3955%" y="191.50"></text></g><g><title>0x7ff8067c5a47 (274 samples, 0.03%)</title><rect x="23.3871%" y="181" width="0.0333%" height="15" fill="rgb(234,177,6)" fg:x="192402" fg:w="274"/><text x="23.6371%" y="191.50"></text></g><g><title>0x7ff8067b9d11 (4,279 samples, 0.52%)</title><rect x="22.9018%" y="197" width="0.5201%" height="15" fill="rgb(217,24,9)" fg:x="188410" fg:w="4279"/><text x="23.1518%" y="207.50"></text></g><g><title>0x7ff8067b9d24 (344 samples, 0.04%)</title><rect x="23.4229%" y="197" width="0.0418%" height="15" fill="rgb(220,13,46)" fg:x="192697" fg:w="344"/><text x="23.6729%" y="207.50"></text></g><g><title>0x7ff8067b9d6d (657 samples, 0.08%)</title><rect x="23.4724%" y="197" width="0.0799%" height="15" fill="rgb(239,221,27)" fg:x="193104" fg:w="657"/><text x="23.7224%" y="207.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (84 samples, 0.01%)</title><rect x="23.8492%" y="165" width="0.0102%" height="15" fill="rgb(222,198,25)" fg:x="196204" fg:w="84"/><text x="24.0992%" y="175.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (579 samples, 0.07%)</title><rect x="23.7952%" y="181" width="0.0704%" height="15" fill="rgb(211,99,13)" fg:x="195760" fg:w="579"/><text x="24.0452%" y="191.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (37,064 samples, 4.51%)</title><rect x="23.8689%" y="181" width="4.5052%" height="15" fill="rgb(232,111,31)" fg:x="196366" fg:w="37064"/><text x="24.1189%" y="191.50">_plat..</text></g><g><title>0x7ff8067b9278 (149 samples, 0.02%)</title><rect x="28.3822%" y="117" width="0.0181%" height="15" fill="rgb(245,82,37)" fg:x="233496" fg:w="149"/><text x="28.6322%" y="127.50"></text></g><g><title>0x7ff8067c1754 (132 samples, 0.02%)</title><rect x="28.3842%" y="101" width="0.0160%" height="15" fill="rgb(227,149,46)" fg:x="233513" fg:w="132"/><text x="28.6342%" y="111.50"></text></g><g><title>vm_allocate (132 samples, 0.02%)</title><rect x="28.3842%" y="85" width="0.0160%" height="15" fill="rgb(218,36,50)" fg:x="233513" fg:w="132"/><text x="28.6342%" y="95.50"></text></g><g><title>mach_vm_allocate (132 samples, 0.02%)</title><rect x="28.3842%" y="69" width="0.0160%" height="15" fill="rgb(226,80,48)" fg:x="233513" fg:w="132"/><text x="28.6342%" y="79.50"></text></g><g><title>_kernelrpc_mach_vm_allocate_trap (132 samples, 0.02%)</title><rect x="28.3842%" y="53" width="0.0160%" height="15" fill="rgb(238,224,15)" fg:x="233513" fg:w="132"/><text x="28.6342%" y="63.50"></text></g><g><title>0x7ff8067ce2b0 (434 samples, 0.05%)</title><rect x="28.4050%" y="69" width="0.0528%" height="15" fill="rgb(241,136,10)" fg:x="233684" fg:w="434"/><text x="28.6550%" y="79.50"></text></g><g><title>mach_vm_map (434 samples, 0.05%)</title><rect x="28.4050%" y="53" width="0.0528%" height="15" fill="rgb(208,32,45)" fg:x="233684" fg:w="434"/><text x="28.6550%" y="63.50"></text></g><g><title>_kernelrpc_mach_vm_map_trap (428 samples, 0.05%)</title><rect x="28.4057%" y="37" width="0.0520%" height="15" fill="rgb(207,135,9)" fg:x="233690" fg:w="428"/><text x="28.6557%" y="47.50"></text></g><g><title>0x7ff8067bfcaf (441 samples, 0.05%)</title><rect x="28.4044%" y="85" width="0.0536%" height="15" fill="rgb(206,86,44)" fg:x="233679" fg:w="441"/><text x="28.6544%" y="95.50"></text></g><g><title>0x7ff8067b62da (480 samples, 0.06%)</title><rect x="28.4038%" y="101" width="0.0583%" height="15" fill="rgb(245,177,15)" fg:x="233674" fg:w="480"/><text x="28.6538%" y="111.50"></text></g><g><title>0x7ff8067b936f (509 samples, 0.06%)</title><rect x="28.4004%" y="117" width="0.0619%" height="15" fill="rgb(206,64,50)" fg:x="233646" fg:w="509"/><text x="28.6504%" y="127.50"></text></g><g><title>0x7ff8067b93b0 (4,031 samples, 0.49%)</title><rect x="28.4623%" y="117" width="0.4900%" height="15" fill="rgb(234,36,40)" fg:x="234155" fg:w="4031"/><text x="28.7123%" y="127.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (4,031 samples, 0.49%)</title><rect x="28.4623%" y="101" width="0.4900%" height="15" fill="rgb(213,64,8)" fg:x="234155" fg:w="4031"/><text x="28.7123%" y="111.50"></text></g><g><title>0x7ff8067ce62e (1,066 samples, 0.13%)</title><rect x="28.9685%" y="69" width="0.1296%" height="15" fill="rgb(210,75,36)" fg:x="238320" fg:w="1066"/><text x="29.2185%" y="79.50"></text></g><g><title>mach_vm_deallocate (1,065 samples, 0.13%)</title><rect x="28.9686%" y="53" width="0.1295%" height="15" fill="rgb(229,88,21)" fg:x="238321" fg:w="1065"/><text x="29.2186%" y="63.50"></text></g><g><title>_kernelrpc_mach_vm_deallocate_trap (1,057 samples, 0.13%)</title><rect x="28.9696%" y="37" width="0.1285%" height="15" fill="rgb(252,204,47)" fg:x="238329" fg:w="1057"/><text x="29.2196%" y="47.50"></text></g><g><title>0x7ff8067bfeda (1,072 samples, 0.13%)</title><rect x="28.9683%" y="85" width="0.1303%" height="15" fill="rgb(208,77,27)" fg:x="238318" fg:w="1072"/><text x="29.2183%" y="95.50"></text></g><g><title>0x7ff8067caaa5 (1,178 samples, 0.14%)</title><rect x="28.9576%" y="101" width="0.1432%" height="15" fill="rgb(221,76,26)" fg:x="238230" fg:w="1178"/><text x="29.2076%" y="111.50"></text></g><g><title>0x7ff8067b93bd (1,224 samples, 0.15%)</title><rect x="28.9522%" y="117" width="0.1488%" height="15" fill="rgb(225,139,18)" fg:x="238186" fg:w="1224"/><text x="29.2022%" y="127.50"></text></g><g><title>0x7ff8067dfb9f (5,930 samples, 0.72%)</title><rect x="28.3809%" y="133" width="0.7208%" height="15" fill="rgb(230,137,11)" fg:x="233486" fg:w="5930"/><text x="28.6309%" y="143.50"></text></g><g><title>0x7ff8067e026b (5,946 samples, 0.72%)</title><rect x="28.3806%" y="149" width="0.7228%" height="15" fill="rgb(212,28,1)" fg:x="233483" fg:w="5946"/><text x="28.6306%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (6,001 samples, 0.73%)</title><rect x="28.3741%" y="181" width="0.7294%" height="15" fill="rgb(248,164,17)" fg:x="233430" fg:w="6001"/><text x="28.6241%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow::hf558d70e8ae63120 (.llvm.3614328785669206289) (5,992 samples, 0.73%)</title><rect x="28.3752%" y="165" width="0.7283%" height="15" fill="rgb(222,171,42)" fg:x="233439" fg:w="5992"/><text x="28.6252%" y="175.50"></text></g><g><title>0x7ff8067e58ec (86 samples, 0.01%)</title><rect x="29.2671%" y="69" width="0.0105%" height="15" fill="rgb(243,84,45)" fg:x="240776" fg:w="86"/><text x="29.5171%" y="79.50"></text></g><g><title>0x7ff8067b809a (112 samples, 0.01%)</title><rect x="29.2643%" y="85" width="0.0136%" height="15" fill="rgb(252,49,23)" fg:x="240753" fg:w="112"/><text x="29.5143%" y="95.50"></text></g><g><title>0x7ff8067b80ce (135 samples, 0.02%)</title><rect x="29.2786%" y="85" width="0.0164%" height="15" fill="rgb(215,19,7)" fg:x="240871" fg:w="135"/><text x="29.5286%" y="95.50"></text></g><g><title>0x7ff8067b742f (759 samples, 0.09%)</title><rect x="29.2156%" y="101" width="0.0923%" height="15" fill="rgb(238,81,41)" fg:x="240353" fg:w="759"/><text x="29.4656%" y="111.50"></text></g><g><title>0x7ff8067bdd8f (1,060 samples, 0.13%)</title><rect x="29.1967%" y="117" width="0.1288%" height="15" fill="rgb(210,199,37)" fg:x="240197" fg:w="1060"/><text x="29.4467%" y="127.50"></text></g><g><title>0x7ff8067b9d11 (91 samples, 0.01%)</title><rect x="29.3306%" y="101" width="0.0111%" height="15" fill="rgb(244,192,49)" fg:x="241299" fg:w="91"/><text x="29.5806%" y="111.50"></text></g><g><title>0x7ff8067bdf2a (119 samples, 0.01%)</title><rect x="29.3287%" y="117" width="0.0145%" height="15" fill="rgb(226,211,11)" fg:x="241283" fg:w="119"/><text x="29.5787%" y="127.50"></text></g><g><title>0x7ff8067ba2bc (196 samples, 0.02%)</title><rect x="29.3940%" y="85" width="0.0238%" height="15" fill="rgb(236,162,54)" fg:x="241820" fg:w="196"/><text x="29.6440%" y="95.50"></text></g><g><title>0x7ff8067b9d11 (597 samples, 0.07%)</title><rect x="29.3761%" y="101" width="0.0726%" height="15" fill="rgb(220,229,9)" fg:x="241673" fg:w="597"/><text x="29.6261%" y="111.50"></text></g><g><title>0x7ff8067c5a47 (135 samples, 0.02%)</title><rect x="29.4322%" y="85" width="0.0164%" height="15" fill="rgb(250,87,22)" fg:x="242135" fg:w="135"/><text x="29.6822%" y="95.50"></text></g><g><title>0x7ff8067be058 (851 samples, 0.10%)</title><rect x="29.3553%" y="117" width="0.1034%" height="15" fill="rgb(239,43,17)" fg:x="241502" fg:w="851"/><text x="29.6053%" y="127.50"></text></g><g><title>0x7ff8067dfd99 (2,219 samples, 0.27%)</title><rect x="29.1894%" y="133" width="0.2697%" height="15" fill="rgb(231,177,25)" fg:x="240137" fg:w="2219"/><text x="29.4394%" y="143.50"></text></g><g><title>0x7ff8067e0345 (2,420 samples, 0.29%)</title><rect x="29.1668%" y="149" width="0.2942%" height="15" fill="rgb(219,179,1)" fg:x="239951" fg:w="2420"/><text x="29.4168%" y="159.50"></text></g><g><title>__rdl_alloc (2,469 samples, 0.30%)</title><rect x="29.1613%" y="165" width="0.3001%" height="15" fill="rgb(238,219,53)" fg:x="239906" fg:w="2469"/><text x="29.4113%" y="175.50"></text></g><g><title>_pthread_mutex_firstfit_unlock_slow (1,554 samples, 0.19%)</title><rect x="29.5246%" y="149" width="0.1889%" height="15" fill="rgb(232,167,36)" fg:x="242895" fg:w="1554"/><text x="29.7746%" y="159.50"></text></g><g><title>_pthread_mutex_firstfit_wake (1,504 samples, 0.18%)</title><rect x="29.5307%" y="133" width="0.1828%" height="15" fill="rgb(244,19,51)" fg:x="242945" fg:w="1504"/><text x="29.7807%" y="143.50"></text></g><g><title>__psynch_mutexdrop (1,491 samples, 0.18%)</title><rect x="29.5323%" y="117" width="0.1812%" height="15" fill="rgb(224,6,22)" fg:x="242958" fg:w="1491"/><text x="29.7823%" y="127.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (451 samples, 0.05%)</title><rect x="29.7136%" y="149" width="0.0548%" height="15" fill="rgb(224,145,5)" fg:x="244450" fg:w="451"/><text x="29.9636%" y="159.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (123 samples, 0.01%)</title><rect x="29.7535%" y="133" width="0.0150%" height="15" fill="rgb(234,130,49)" fg:x="244778" fg:w="123"/><text x="30.0035%" y="143.50"></text></g><g><title>cthread_yield (250 samples, 0.03%)</title><rect x="29.7901%" y="133" width="0.0304%" height="15" fill="rgb(254,6,2)" fg:x="245079" fg:w="250"/><text x="30.0401%" y="143.50"></text></g><g><title>swtch_pri (234 samples, 0.03%)</title><rect x="29.7920%" y="117" width="0.0284%" height="15" fill="rgb(208,96,46)" fg:x="245095" fg:w="234"/><text x="30.0420%" y="127.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (432 samples, 0.05%)</title><rect x="29.7685%" y="149" width="0.0525%" height="15" fill="rgb(239,3,39)" fg:x="244901" fg:w="432"/><text x="30.0185%" y="159.50"></text></g><g><title>__psynch_cvsignal (13,299 samples, 1.62%)</title><rect x="29.8615%" y="117" width="1.6165%" height="15" fill="rgb(233,210,1)" fg:x="245666" fg:w="13299"/><text x="30.1115%" y="127.50"></text></g><g><title>pthread_cond_signal (13,575 samples, 1.65%)</title><rect x="29.8437%" y="133" width="1.6501%" height="15" fill="rgb(244,137,37)" fg:x="245520" fg:w="13575"/><text x="30.0937%" y="143.50"></text></g><g><title>_pthread_cond_updateval (130 samples, 0.02%)</title><rect x="31.4780%" y="117" width="0.0158%" height="15" fill="rgb(240,136,2)" fg:x="258965" fg:w="130"/><text x="31.7280%" y="127.50"></text></g><g><title>pthread_mutex_lock (222 samples, 0.03%)</title><rect x="31.4938%" y="133" width="0.0270%" height="15" fill="rgb(239,18,37)" fg:x="259095" fg:w="222"/><text x="31.7438%" y="143.50"></text></g><g><title>0x7ff80684e86d (151 samples, 0.02%)</title><rect x="31.5245%" y="117" width="0.0184%" height="15" fill="rgb(218,185,22)" fg:x="259348" fg:w="151"/><text x="31.7745%" y="127.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (191 samples, 0.02%)</title><rect x="31.5208%" y="133" width="0.0232%" height="15" fill="rgb(225,218,4)" fg:x="259317" fg:w="191"/><text x="31.7708%" y="143.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (14,179 samples, 1.72%)</title><rect x="29.8210%" y="149" width="1.7235%" height="15" fill="rgb(230,182,32)" fg:x="245333" fg:w="14179"/><text x="30.0710%" y="159.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_mandatory_blocking (20,170 samples, 2.45%)</title><rect x="29.1036%" y="181" width="2.4517%" height="15" fill="rgb(242,56,43)" fg:x="239431" fg:w="20170"/><text x="29.3536%" y="191.50">to..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (17,174 samples, 2.09%)</title><rect x="29.4677%" y="165" width="2.0876%" height="15" fill="rgb(233,99,24)" fg:x="242427" fg:w="17174"/><text x="29.7177%" y="175.50">t..</text></g><g><title>0x7ff8067b9b8b (113 samples, 0.01%)</title><rect x="31.5833%" y="165" width="0.0137%" height="15" fill="rgb(234,209,42)" fg:x="259831" fg:w="113"/><text x="31.8333%" y="175.50"></text></g><g><title>0x7ff8067b9ba8 (92 samples, 0.01%)</title><rect x="31.5977%" y="165" width="0.0112%" height="15" fill="rgb(227,7,12)" fg:x="259950" fg:w="92"/><text x="31.8477%" y="175.50"></text></g><g><title>0x7ff8067bac2e (86 samples, 0.01%)</title><rect x="31.6263%" y="133" width="0.0105%" height="15" fill="rgb(245,203,43)" fg:x="260185" fg:w="86"/><text x="31.8763%" y="143.50"></text></g><g><title>0x7ff8067ba0f3 (123 samples, 0.01%)</title><rect x="31.6251%" y="149" width="0.0150%" height="15" fill="rgb(238,205,33)" fg:x="260175" fg:w="123"/><text x="31.8751%" y="159.50"></text></g><g><title>0x7ff8067bac2e (134 samples, 0.02%)</title><rect x="31.6550%" y="133" width="0.0163%" height="15" fill="rgb(231,56,7)" fg:x="260421" fg:w="134"/><text x="31.9050%" y="143.50"></text></g><g><title>0x7ff8067ba222 (244 samples, 0.03%)</title><rect x="31.6505%" y="149" width="0.0297%" height="15" fill="rgb(244,186,29)" fg:x="260384" fg:w="244"/><text x="31.9005%" y="159.50"></text></g><g><title>0x7ff8067ba8a7 (108 samples, 0.01%)</title><rect x="31.6896%" y="133" width="0.0131%" height="15" fill="rgb(234,111,31)" fg:x="260706" fg:w="108"/><text x="31.9396%" y="143.50"></text></g><g><title>0x7ff8067ba2bc (291 samples, 0.04%)</title><rect x="31.6807%" y="149" width="0.0354%" height="15" fill="rgb(241,149,10)" fg:x="260633" fg:w="291"/><text x="31.9307%" y="159.50"></text></g><g><title>0x7ff8067c5a47 (186 samples, 0.02%)</title><rect x="31.7273%" y="149" width="0.0226%" height="15" fill="rgb(249,206,44)" fg:x="261016" fg:w="186"/><text x="31.9773%" y="159.50"></text></g><g><title>0x7ff8067b9d11 (1,153 samples, 0.14%)</title><rect x="31.6101%" y="165" width="0.1402%" height="15" fill="rgb(251,153,30)" fg:x="260052" fg:w="1153"/><text x="31.8601%" y="175.50"></text></g><g><title>0x7ff8067b9d6d (137 samples, 0.02%)</title><rect x="31.7585%" y="165" width="0.0167%" height="15" fill="rgb(239,152,38)" fg:x="261273" fg:w="137"/><text x="32.0085%" y="175.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (2,059 samples, 0.25%)</title><rect x="31.5553%" y="181" width="0.2503%" height="15" fill="rgb(249,139,47)" fg:x="259601" fg:w="2059"/><text x="31.8053%" y="191.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (84 samples, 0.01%)</title><rect x="31.7954%" y="165" width="0.0102%" height="15" fill="rgb(244,64,35)" fg:x="261576" fg:w="84"/><text x="32.0454%" y="175.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (67,442 samples, 8.20%)</title><rect x="23.6082%" y="197" width="8.1978%" height="15" fill="rgb(216,46,15)" fg:x="194221" fg:w="67442"/><text x="23.8582%" y="207.50">&lt;tokio::fs:..</text></g><g><title>bytes::bytes::owned_drop (528 samples, 0.06%)</title><rect x="31.8251%" y="197" width="0.0642%" height="15" fill="rgb(250,74,19)" fg:x="261821" fg:w="528"/><text x="32.0751%" y="207.50"></text></g><g><title>bytes::bytes::shared_drop::h2f4486fd7f0a6f4b (.llvm.6858511044588184240) (516 samples, 0.06%)</title><rect x="31.8893%" y="197" width="0.0627%" height="15" fill="rgb(249,42,33)" fg:x="262349" fg:w="516"/><text x="32.1393%" y="207.50"></text></g><g><title>0x7ff8067b8c70 (83 samples, 0.01%)</title><rect x="32.4554%" y="181" width="0.0101%" height="15" fill="rgb(242,149,17)" fg:x="267006" fg:w="83"/><text x="32.7054%" y="191.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::pop (4,405 samples, 0.54%)</title><rect x="31.9573%" y="197" width="0.5354%" height="15" fill="rgb(244,29,21)" fg:x="262908" fg:w="4405"/><text x="32.2073%" y="207.50"></text></g><g><title>0x7ff80683f8c6 (117 samples, 0.01%)</title><rect x="32.5281%" y="165" width="0.0142%" height="15" fill="rgb(220,130,37)" fg:x="267604" fg:w="117"/><text x="32.7781%" y="175.50"></text></g><g><title>mach_timebase_info (115 samples, 0.01%)</title><rect x="32.5283%" y="149" width="0.0140%" height="15" fill="rgb(211,67,2)" fg:x="267606" fg:w="115"/><text x="32.7783%" y="159.50"></text></g><g><title>0x7ff80683f91d (400 samples, 0.05%)</title><rect x="32.5450%" y="165" width="0.0486%" height="15" fill="rgb(235,68,52)" fg:x="267743" fg:w="400"/><text x="32.7950%" y="175.50"></text></g><g><title>mach_absolute_time (400 samples, 0.05%)</title><rect x="32.5450%" y="149" width="0.0486%" height="15" fill="rgb(246,142,3)" fg:x="267743" fg:w="400"/><text x="32.7950%" y="159.50"></text></g><g><title>0x7ff80683f93d (214 samples, 0.03%)</title><rect x="32.5964%" y="165" width="0.0260%" height="15" fill="rgb(241,25,7)" fg:x="268166" fg:w="214"/><text x="32.8464%" y="175.50"></text></g><g><title>0x7ff80684e86d (826 samples, 0.10%)</title><rect x="32.5237%" y="181" width="0.1004%" height="15" fill="rgb(242,119,39)" fg:x="267568" fg:w="826"/><text x="32.7737%" y="191.50"></text></g><g><title>0x7ff806846923 (742 samples, 0.09%)</title><rect x="32.6380%" y="165" width="0.0902%" height="15" fill="rgb(241,98,45)" fg:x="268508" fg:w="742"/><text x="32.8880%" y="175.50"></text></g><g><title>__commpage_gettimeofday_internal (732 samples, 0.09%)</title><rect x="32.6392%" y="149" width="0.0890%" height="15" fill="rgb(254,28,30)" fg:x="268518" fg:w="732"/><text x="32.8892%" y="159.50"></text></g><g><title>mach_absolute_time (503 samples, 0.06%)</title><rect x="32.6670%" y="133" width="0.0611%" height="15" fill="rgb(241,142,54)" fg:x="268747" fg:w="503"/><text x="32.9170%" y="143.50"></text></g><g><title>0x7ff80684e8b3 (946 samples, 0.11%)</title><rect x="32.6323%" y="181" width="0.1150%" height="15" fill="rgb(222,85,15)" fg:x="268461" fg:w="946"/><text x="32.8823%" y="191.50"></text></g><g><title>__commpage_gettimeofday (91 samples, 0.01%)</title><rect x="32.7362%" y="165" width="0.0111%" height="15" fill="rgb(210,85,47)" fg:x="269316" fg:w="91"/><text x="32.9862%" y="175.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2,160 samples, 0.26%)</title><rect x="32.4927%" y="197" width="0.2626%" height="15" fill="rgb(224,206,25)" fg:x="267313" fg:w="2160"/><text x="32.7427%" y="207.50"></text></g><g><title>0x7ff80683f8c6 (369 samples, 0.04%)</title><rect x="32.7652%" y="149" width="0.0449%" height="15" fill="rgb(243,201,19)" fg:x="269555" fg:w="369"/><text x="33.0152%" y="159.50"></text></g><g><title>mach_timebase_info (369 samples, 0.04%)</title><rect x="32.7652%" y="133" width="0.0449%" height="15" fill="rgb(236,59,4)" fg:x="269555" fg:w="369"/><text x="33.0152%" y="143.50"></text></g><g><title>0x7ff80683f91d (122 samples, 0.01%)</title><rect x="32.8117%" y="149" width="0.0148%" height="15" fill="rgb(254,179,45)" fg:x="269937" fg:w="122"/><text x="33.0617%" y="159.50"></text></g><g><title>mach_absolute_time (122 samples, 0.01%)</title><rect x="32.8117%" y="133" width="0.0148%" height="15" fill="rgb(226,14,10)" fg:x="269937" fg:w="122"/><text x="33.0617%" y="143.50"></text></g><g><title>0x7ff80684e86d (590 samples, 0.07%)</title><rect x="32.7640%" y="165" width="0.0717%" height="15" fill="rgb(244,27,41)" fg:x="269545" fg:w="590"/><text x="33.0140%" y="175.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (638 samples, 0.08%)</title><rect x="32.7605%" y="181" width="0.0776%" height="15" fill="rgb(235,35,32)" fg:x="269516" fg:w="638"/><text x="33.0105%" y="191.50"></text></g><g><title>std::time::Instant::elapsed (701 samples, 0.09%)</title><rect x="32.7553%" y="197" width="0.0852%" height="15" fill="rgb(218,68,31)" fg:x="269473" fg:w="701"/><text x="33.0053%" y="207.50"></text></g><g><title>std::time::SystemTime::duration_since (148 samples, 0.02%)</title><rect x="32.8411%" y="197" width="0.0180%" height="15" fill="rgb(207,120,37)" fg:x="270179" fg:w="148"/><text x="33.0911%" y="207.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked::h75cb40919419cfec (.llvm.6710397505999662456) (95 samples, 0.01%)</title><rect x="32.8600%" y="197" width="0.0115%" height="15" fill="rgb(227,98,0)" fg:x="270335" fg:w="95"/><text x="33.1100%" y="207.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (100 samples, 0.01%)</title><rect x="32.9598%" y="181" width="0.0122%" height="15" fill="rgb(207,7,3)" fg:x="271156" fg:w="100"/><text x="33.2098%" y="191.50"></text></g><g><title>storagev2::disk::writer::buffer::PartitionWriterBuffer::flush::_{{closure}} (93,983 samples, 11.42%)</title><rect x="21.5486%" y="213" width="11.4239%" height="15" fill="rgb(206,98,19)" fg:x="177277" fg:w="93983"/><text x="21.7986%" y="223.50">storagev2::disk::..</text></g><g><title>tokio::sync::rwlock::RwLock&lt;T&gt;::write::_{{closure}} (830 samples, 0.10%)</title><rect x="32.8716%" y="197" width="0.1009%" height="15" fill="rgb(217,5,26)" fg:x="270430" fg:w="830"/><text x="33.1216%" y="207.50"></text></g><g><title>storagev2::disk::writer::flusher::Flusher::new::_$u7b$$u7b$closure$u7d$$u7d$::hfdd5c17341b69c6f (.llvm.14280434548401472387) (96,630 samples, 11.75%)</title><rect x="21.2322%" y="229" width="11.7457%" height="15" fill="rgb(235,190,38)" fg:x="174674" fg:w="96630"/><text x="21.4822%" y="239.50">storagev2::disk::..</text></g><g><title>0x7ff8067b636d (158 samples, 0.02%)</title><rect x="33.2390%" y="197" width="0.0192%" height="15" fill="rgb(247,86,24)" fg:x="273453" fg:w="158"/><text x="33.4890%" y="207.50"></text></g><g><title>0x7ff8067b63ad (166 samples, 0.02%)</title><rect x="33.2628%" y="197" width="0.0202%" height="15" fill="rgb(205,101,16)" fg:x="273648" fg:w="166"/><text x="33.5128%" y="207.50"></text></g><g><title>0x7ff8067b63f1 (145 samples, 0.02%)</title><rect x="33.2861%" y="197" width="0.0176%" height="15" fill="rgb(246,168,33)" fg:x="273840" fg:w="145"/><text x="33.5361%" y="207.50"></text></g><g><title>0x7ff8067b6254 (728 samples, 0.09%)</title><rect x="33.2365%" y="213" width="0.0885%" height="15" fill="rgb(231,114,1)" fg:x="273432" fg:w="728"/><text x="33.4865%" y="223.50"></text></g><g><title>0x7ff8067cdfda (106 samples, 0.01%)</title><rect x="33.3121%" y="197" width="0.0129%" height="15" fill="rgb(207,184,53)" fg:x="274054" fg:w="106"/><text x="33.5621%" y="207.50"></text></g><g><title>0x7ff8067b89af (144 samples, 0.02%)</title><rect x="33.3443%" y="213" width="0.0175%" height="15" fill="rgb(224,95,51)" fg:x="274319" fg:w="144"/><text x="33.5943%" y="223.50"></text></g><g><title>0x7ff8067b8da4 (127 samples, 0.02%)</title><rect x="33.3655%" y="213" width="0.0154%" height="15" fill="rgb(212,188,45)" fg:x="274493" fg:w="127"/><text x="33.6155%" y="223.50"></text></g><g><title>&lt;futures_timer::native::delay::Delay as core::future::future::Future&gt;::poll (914 samples, 0.11%)</title><rect x="33.4462%" y="213" width="0.1111%" height="15" fill="rgb(223,154,38)" fg:x="275157" fg:w="914"/><text x="33.6962%" y="223.50"></text></g><g><title>0x7ff8067f724b (1,193 samples, 0.15%)</title><rect x="33.6589%" y="165" width="0.1450%" height="15" fill="rgb(251,22,52)" fg:x="276907" fg:w="1193"/><text x="33.9089%" y="175.50"></text></g><g><title>semaphore_signal_trap (1,183 samples, 0.14%)</title><rect x="33.6601%" y="149" width="0.1438%" height="15" fill="rgb(229,209,22)" fg:x="276917" fg:w="1183"/><text x="33.9101%" y="159.50"></text></g><g><title>0x7ff8067f76f7 (1,217 samples, 0.15%)</title><rect x="33.6588%" y="181" width="0.1479%" height="15" fill="rgb(234,138,34)" fg:x="276906" fg:w="1217"/><text x="33.9088%" y="191.50"></text></g><g><title>futures_timer::native::global::raw_wake (1,288 samples, 0.16%)</title><rect x="33.6531%" y="197" width="0.1566%" height="15" fill="rgb(212,95,11)" fg:x="276859" fg:w="1288"/><text x="33.9031%" y="207.50"></text></g><g><title>pthread_mutex_unlock (120 samples, 0.01%)</title><rect x="33.8096%" y="197" width="0.0146%" height="15" fill="rgb(240,179,47)" fg:x="278147" fg:w="120"/><text x="34.0596%" y="207.50"></text></g><g><title>&lt;futures_timer::native::delay::Delay as core::ops::drop::Drop&gt;::drop (2,940 samples, 0.36%)</title><rect x="33.5573%" y="213" width="0.3574%" height="15" fill="rgb(240,163,11)" fg:x="276071" fg:w="2940"/><text x="33.8073%" y="223.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (744 samples, 0.09%)</title><rect x="33.8242%" y="197" width="0.0904%" height="15" fill="rgb(236,37,12)" fg:x="278267" fg:w="744"/><text x="34.0742%" y="207.50"></text></g><g><title>pthread_mutex_lock (738 samples, 0.09%)</title><rect x="33.8249%" y="181" width="0.0897%" height="15" fill="rgb(232,164,16)" fg:x="278273" fg:w="738"/><text x="34.0749%" y="191.50"></text></g><g><title>&lt;futures_timer::native::timer::TimerHandle as core::default::Default&gt;::default (293 samples, 0.04%)</title><rect x="33.9146%" y="213" width="0.0356%" height="15" fill="rgb(244,205,15)" fg:x="279011" fg:w="293"/><text x="34.1646%" y="223.50"></text></g><g><title>&lt;governor::clock::quanta::QuantaClock as governor::clock::Clock&gt;::now (158 samples, 0.02%)</title><rect x="33.9503%" y="213" width="0.0192%" height="15" fill="rgb(223,117,47)" fg:x="279304" fg:w="158"/><text x="34.2003%" y="223.50"></text></g><g><title>&lt;governor::state::in_memory::InMemoryState as governor::state::StateStore&gt;::measure_and_replace (302 samples, 0.04%)</title><rect x="33.9832%" y="213" width="0.0367%" height="15" fill="rgb(244,107,35)" fg:x="279575" fg:w="302"/><text x="34.2332%" y="223.50"></text></g><g><title>0x7ff8067b7306 (475 samples, 0.06%)</title><rect x="34.8660%" y="181" width="0.0577%" height="15" fill="rgb(205,140,8)" fg:x="286838" fg:w="475"/><text x="35.1160%" y="191.50"></text></g><g><title>0x7ff8067b734b (578 samples, 0.07%)</title><rect x="34.9370%" y="181" width="0.0703%" height="15" fill="rgb(228,84,46)" fg:x="287422" fg:w="578"/><text x="35.1870%" y="191.50"></text></g><g><title>0x7ff8067b7359 (404 samples, 0.05%)</title><rect x="35.0078%" y="181" width="0.0491%" height="15" fill="rgb(254,188,9)" fg:x="288004" fg:w="404"/><text x="35.2578%" y="191.50"></text></g><g><title>_os_unfair_lock_lock_slow (398 samples, 0.05%)</title><rect x="35.0085%" y="165" width="0.0484%" height="15" fill="rgb(206,112,54)" fg:x="288010" fg:w="398"/><text x="35.2585%" y="175.50"></text></g><g><title>__ulock_wait2 (347 samples, 0.04%)</title><rect x="35.0147%" y="149" width="0.0422%" height="15" fill="rgb(216,84,49)" fg:x="288061" fg:w="347"/><text x="35.2647%" y="159.50"></text></g><g><title>0x7ff8067b7395 (161 samples, 0.02%)</title><rect x="35.0619%" y="181" width="0.0196%" height="15" fill="rgb(214,194,35)" fg:x="288449" fg:w="161"/><text x="35.3119%" y="191.50"></text></g><g><title>0x7ff8067b739e (169 samples, 0.02%)</title><rect x="35.0814%" y="181" width="0.0205%" height="15" fill="rgb(249,28,3)" fg:x="288610" fg:w="169"/><text x="35.3314%" y="191.50"></text></g><g><title>_os_unfair_lock_unlock_slow (153 samples, 0.02%)</title><rect x="35.0834%" y="165" width="0.0186%" height="15" fill="rgb(222,56,52)" fg:x="288626" fg:w="153"/><text x="35.3334%" y="175.50"></text></g><g><title>__ulock_wake (146 samples, 0.02%)</title><rect x="35.0842%" y="149" width="0.0177%" height="15" fill="rgb(245,217,50)" fg:x="288633" fg:w="146"/><text x="35.3342%" y="159.50"></text></g><g><title>0x7ff8067b7ab1 (100 samples, 0.01%)</title><rect x="35.1164%" y="165" width="0.0122%" height="15" fill="rgb(213,201,24)" fg:x="288898" fg:w="100"/><text x="35.3664%" y="175.50"></text></g><g><title>0x7ff8067b7b03 (103 samples, 0.01%)</title><rect x="35.1407%" y="165" width="0.0125%" height="15" fill="rgb(248,116,28)" fg:x="289098" fg:w="103"/><text x="35.3907%" y="175.50"></text></g><g><title>0x7ff8067b7b9b (91 samples, 0.01%)</title><rect x="35.1709%" y="165" width="0.0111%" height="15" fill="rgb(219,72,43)" fg:x="289346" fg:w="91"/><text x="35.4209%" y="175.50"></text></g><g><title>0x7ff8067b7c46 (164 samples, 0.02%)</title><rect x="35.1937%" y="165" width="0.0199%" height="15" fill="rgb(209,138,14)" fg:x="289534" fg:w="164"/><text x="35.4437%" y="175.50"></text></g><g><title>0x7ff8067b7faf (140 samples, 0.02%)</title><rect x="35.2198%" y="165" width="0.0170%" height="15" fill="rgb(222,18,33)" fg:x="289748" fg:w="140"/><text x="35.4698%" y="175.50"></text></g><g><title>0x7ff8067b80ce (191 samples, 0.02%)</title><rect x="35.2508%" y="165" width="0.0232%" height="15" fill="rgb(213,199,7)" fg:x="290003" fg:w="191"/><text x="35.5008%" y="175.50"></text></g><g><title>0x7ff8067b8247 (217 samples, 0.03%)</title><rect x="35.3072%" y="165" width="0.0264%" height="15" fill="rgb(250,110,10)" fg:x="290467" fg:w="217"/><text x="35.5572%" y="175.50"></text></g><g><title>0x7ff8067b742f (2,094 samples, 0.25%)</title><rect x="35.1083%" y="181" width="0.2545%" height="15" fill="rgb(248,123,6)" fg:x="288831" fg:w="2094"/><text x="35.3583%" y="191.50"></text></g><g><title>0x7ff8067b76f2 (447 samples, 0.05%)</title><rect x="35.3651%" y="181" width="0.0543%" height="15" fill="rgb(206,91,31)" fg:x="290944" fg:w="447"/><text x="35.6151%" y="191.50"></text></g><g><title>0x7ff8067cdfd1 (95 samples, 0.01%)</title><rect x="35.4333%" y="181" width="0.0115%" height="15" fill="rgb(211,154,13)" fg:x="291505" fg:w="95"/><text x="35.6833%" y="191.50"></text></g><g><title>0x7ff8067cdfda (299 samples, 0.04%)</title><rect x="35.4477%" y="181" width="0.0363%" height="15" fill="rgb(225,148,7)" fg:x="291623" fg:w="299"/><text x="35.6977%" y="191.50"></text></g><g><title>0x7ff8067b622a (5,192 samples, 0.63%)</title><rect x="34.8572%" y="197" width="0.6311%" height="15" fill="rgb(220,160,43)" fg:x="286765" fg:w="5192"/><text x="35.1072%" y="207.50"></text></g><g><title>_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$::write::hb824622b973a5f90 (.llvm.17815140968249597325) (902 samples, 0.11%)</title><rect x="35.9355%" y="181" width="0.1096%" height="15" fill="rgb(213,52,39)" fg:x="295636" fg:w="902"/><text x="36.1855%" y="191.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (4,601 samples, 0.56%)</title><rect x="35.5255%" y="197" width="0.5593%" height="15" fill="rgb(243,137,7)" fg:x="292263" fg:w="4601"/><text x="35.7755%" y="207.50"></text></g><g><title>_platform_memcmp$VARIANT$Base (326 samples, 0.04%)</title><rect x="36.0451%" y="181" width="0.0396%" height="15" fill="rgb(230,79,13)" fg:x="296538" fg:w="326"/><text x="36.2951%" y="191.50"></text></g><g><title>pthread_mutex_unlock (187 samples, 0.02%)</title><rect x="36.1036%" y="181" width="0.0227%" height="15" fill="rgb(247,105,23)" fg:x="297019" fg:w="187"/><text x="36.3536%" y="191.50"></text></g><g><title>&lt;tokio_util::sync::cancellation_token::CancellationToken as core::clone::Clone&gt;::clone (688 samples, 0.08%)</title><rect x="36.0847%" y="197" width="0.0836%" height="15" fill="rgb(223,179,41)" fg:x="296864" fg:w="688"/><text x="36.3347%" y="207.50"></text></g><g><title>tokio_util::sync::cancellation_token::tree_node::increase_handle_refcount (340 samples, 0.04%)</title><rect x="36.1270%" y="181" width="0.0413%" height="15" fill="rgb(218,9,34)" fg:x="297212" fg:w="340"/><text x="36.3770%" y="191.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (265 samples, 0.03%)</title><rect x="36.1361%" y="165" width="0.0322%" height="15" fill="rgb(222,106,8)" fg:x="297287" fg:w="265"/><text x="36.3861%" y="175.50"></text></g><g><title>pthread_mutex_lock (258 samples, 0.03%)</title><rect x="36.1370%" y="149" width="0.0314%" height="15" fill="rgb(211,220,0)" fg:x="297294" fg:w="258"/><text x="36.3870%" y="159.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (1,895 samples, 0.23%)</title><rect x="36.1726%" y="197" width="0.2303%" height="15" fill="rgb(229,52,16)" fg:x="297587" fg:w="1895"/><text x="36.4226%" y="207.50"></text></g><g><title>bytes::bytes::shared_drop::h2f4486fd7f0a6f4b (.llvm.6858511044588184240) (215 samples, 0.03%)</title><rect x="36.4033%" y="197" width="0.0261%" height="15" fill="rgb(212,155,18)" fg:x="299485" fg:w="215"/><text x="36.6533%" y="207.50"></text></g><g><title>_platform_bzero$VARIANT$Haswell (134 samples, 0.02%)</title><rect x="36.5450%" y="165" width="0.0163%" height="15" fill="rgb(242,21,14)" fg:x="300651" fg:w="134"/><text x="36.7950%" y="175.50"></text></g><g><title>0x7ff8067b9b8b (247 samples, 0.03%)</title><rect x="36.5438%" y="181" width="0.0300%" height="15" fill="rgb(222,19,48)" fg:x="300641" fg:w="247"/><text x="36.7938%" y="191.50"></text></g><g><title>_platform_memset$VARIANT$Haswell (103 samples, 0.01%)</title><rect x="36.5613%" y="165" width="0.0125%" height="15" fill="rgb(232,45,27)" fg:x="300785" fg:w="103"/><text x="36.8113%" y="175.50"></text></g><g><title>0x7ff8067b9ba8 (257 samples, 0.03%)</title><rect x="36.5756%" y="181" width="0.0312%" height="15" fill="rgb(249,103,42)" fg:x="300902" fg:w="257"/><text x="36.8256%" y="191.50"></text></g><g><title>0x7ff8067b9bbd (140 samples, 0.02%)</title><rect x="36.6069%" y="181" width="0.0170%" height="15" fill="rgb(246,81,33)" fg:x="301160" fg:w="140"/><text x="36.8569%" y="191.50"></text></g><g><title>_os_unfair_lock_lock_slow (138 samples, 0.02%)</title><rect x="36.6072%" y="165" width="0.0168%" height="15" fill="rgb(252,33,42)" fg:x="301162" fg:w="138"/><text x="36.8572%" y="175.50"></text></g><g><title>__ulock_wait2 (120 samples, 0.01%)</title><rect x="36.6094%" y="149" width="0.0146%" height="15" fill="rgb(209,212,41)" fg:x="301180" fg:w="120"/><text x="36.8594%" y="159.50"></text></g><g><title>0x7ff8067ba2bc (349 samples, 0.04%)</title><rect x="36.6845%" y="165" width="0.0424%" height="15" fill="rgb(207,154,6)" fg:x="301798" fg:w="349"/><text x="36.9345%" y="175.50"></text></g><g><title>0x7ff8067b9d11 (955 samples, 0.12%)</title><rect x="36.6413%" y="181" width="0.1161%" height="15" fill="rgb(223,64,47)" fg:x="301443" fg:w="955"/><text x="36.8913%" y="191.50"></text></g><g><title>0x7ff8067b9d24 (291 samples, 0.04%)</title><rect x="36.7590%" y="181" width="0.0354%" height="15" fill="rgb(211,161,38)" fg:x="302411" fg:w="291"/><text x="37.0090%" y="191.50"></text></g><g><title>_os_unfair_lock_unlock_slow (128 samples, 0.02%)</title><rect x="36.8522%" y="181" width="0.0156%" height="15" fill="rgb(219,138,40)" fg:x="303178" fg:w="128"/><text x="37.1022%" y="191.50"></text></g><g><title>__ulock_wake (128 samples, 0.02%)</title><rect x="36.8522%" y="165" width="0.0156%" height="15" fill="rgb(241,228,46)" fg:x="303178" fg:w="128"/><text x="37.1022%" y="175.50"></text></g><g><title>pthread_mutex_unlock (217 samples, 0.03%)</title><rect x="37.0123%" y="149" width="0.0264%" height="15" fill="rgb(223,209,38)" fg:x="304495" fg:w="217"/><text x="37.2623%" y="159.50"></text></g><g><title>std::sys::pal::unix::sync::mutex::Mutex::lock (219 samples, 0.03%)</title><rect x="37.0387%" y="149" width="0.0266%" height="15" fill="rgb(236,164,45)" fg:x="304712" fg:w="219"/><text x="37.2887%" y="159.50"></text></g><g><title>pthread_mutex_lock (218 samples, 0.03%)</title><rect x="37.0388%" y="133" width="0.0265%" height="15" fill="rgb(231,15,5)" fg:x="304713" fg:w="218"/><text x="37.2888%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;storagev2::disk::writer::flusher::Flusher&gt; (1,627 samples, 0.20%)</title><rect x="36.8678%" y="181" width="0.1978%" height="15" fill="rgb(252,35,15)" fg:x="303306" fg:w="1627"/><text x="37.1178%" y="191.50"></text></g><g><title>tokio_util::sync::cancellation_token::tree_node::decrease_handle_refcount (558 samples, 0.07%)</title><rect x="36.9977%" y="165" width="0.0678%" height="15" fill="rgb(248,181,18)" fg:x="304375" fg:w="558"/><text x="37.2477%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;storagev2::disk::writer::buffer::PartitionWriterBuffer&gt; (5,242 samples, 0.64%)</title><rect x="36.4295%" y="197" width="0.6372%" height="15" fill="rgb(233,39,42)" fg:x="299700" fg:w="5242"/><text x="36.6795%" y="207.50"></text></g><g><title>0x7ff8067b6b32 (153 samples, 0.02%)</title><rect x="37.4432%" y="149" width="0.0186%" height="15" fill="rgb(238,110,33)" fg:x="308040" fg:w="153"/><text x="37.6932%" y="159.50"></text></g><g><title>0x7ff8067baee4 (255 samples, 0.03%)</title><rect x="37.4743%" y="133" width="0.0310%" height="15" fill="rgb(233,195,10)" fg:x="308296" fg:w="255"/><text x="37.7243%" y="143.50"></text></g><g><title>0x7ff8067b6c33 (276 samples, 0.03%)</title><rect x="37.4729%" y="149" width="0.0335%" height="15" fill="rgb(254,105,3)" fg:x="308284" fg:w="276"/><text x="37.7229%" y="159.50"></text></g><g><title>0x7ff8067b643d (553 samples, 0.07%)</title><rect x="37.4425%" y="165" width="0.0672%" height="15" fill="rgb(221,225,9)" fg:x="308034" fg:w="553"/><text x="37.6925%" y="175.50"></text></g><g><title>0x7ff8067b6254 (600 samples, 0.07%)</title><rect x="37.4387%" y="181" width="0.0729%" height="15" fill="rgb(224,227,45)" fg:x="308003" fg:w="600"/><text x="37.6887%" y="191.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::push (3,714 samples, 0.45%)</title><rect x="37.0666%" y="197" width="0.4514%" height="15" fill="rgb(229,198,43)" fg:x="304942" fg:w="3714"/><text x="37.3166%" y="207.50"></text></g><g><title>_platform_memcmp$VARIANT$Base (110 samples, 0.01%)</title><rect x="37.8104%" y="149" width="0.0134%" height="15" fill="rgb(206,209,35)" fg:x="311061" fg:w="110"/><text x="38.0604%" y="159.50"></text></g><g><title>_$LT$std..path..PathBuf$u20$as$u20$core..cmp..PartialEq$GT$::eq::ha8ca9e43c08bccd1 (.llvm.17815140968249597325) (1,060 samples, 0.13%)</title><rect x="37.7995%" y="165" width="0.1288%" height="15" fill="rgb(245,195,53)" fg:x="310971" fg:w="1060"/><text x="38.0495%" y="175.50"></text></g><g><title>std::path::Path::components (837 samples, 0.10%)</title><rect x="37.8266%" y="149" width="0.1017%" height="15" fill="rgb(240,92,26)" fg:x="311194" fg:w="837"/><text x="38.0766%" y="159.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get_mut (5,223 samples, 0.63%)</title><rect x="37.5575%" y="181" width="0.6349%" height="15" fill="rgb(207,40,23)" fg:x="308980" fg:w="5223"/><text x="37.8075%" y="191.50"></text></g><g><title>dashmap::DashMap$LT$K$C$V$C$S$GT$::hash_u64::hbd53c616c4e8f94e (.llvm.17815140968249597325) (2,172 samples, 0.26%)</title><rect x="37.9283%" y="165" width="0.2640%" height="15" fill="rgb(223,111,35)" fg:x="312031" fg:w="2172"/><text x="38.1783%" y="175.50"></text></g><g><title>&lt;std::path::PathBuf as core::hash::Hash&gt;::hash (1,861 samples, 0.23%)</title><rect x="37.9661%" y="149" width="0.2262%" height="15" fill="rgb(229,147,28)" fg:x="312342" fg:w="1861"/><text x="38.2161%" y="159.50"></text></g><g><title>_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$::write::hb824622b973a5f90 (.llvm.17815140968249597325) (1,099 samples, 0.13%)</title><rect x="38.0587%" y="133" width="0.1336%" height="15" fill="rgb(211,29,28)" fg:x="313104" fg:w="1099"/><text x="38.3087%" y="143.50"></text></g><g><title>0x7ff80683f8c6 (109 samples, 0.01%)</title><rect x="38.2242%" y="149" width="0.0132%" height="15" fill="rgb(228,72,33)" fg:x="314465" fg:w="109"/><text x="38.4742%" y="159.50"></text></g><g><title>mach_timebase_info (108 samples, 0.01%)</title><rect x="38.2243%" y="133" width="0.0131%" height="15" fill="rgb(205,214,31)" fg:x="314466" fg:w="108"/><text x="38.4743%" y="143.50"></text></g><g><title>0x7ff80683f91d (786 samples, 0.10%)</title><rect x="38.2424%" y="149" width="0.0955%" height="15" fill="rgb(224,111,15)" fg:x="314615" fg:w="786"/><text x="38.4924%" y="159.50"></text></g><g><title>mach_absolute_time (786 samples, 0.10%)</title><rect x="38.2424%" y="133" width="0.0955%" height="15" fill="rgb(253,21,26)" fg:x="314615" fg:w="786"/><text x="38.4924%" y="143.50"></text></g><g><title>0x7ff80683f93d (420 samples, 0.05%)</title><rect x="38.3431%" y="149" width="0.0511%" height="15" fill="rgb(245,139,43)" fg:x="315443" fg:w="420"/><text x="38.5931%" y="159.50"></text></g><g><title>0x7ff80684e86d (1,471 samples, 0.18%)</title><rect x="38.2183%" y="165" width="0.1788%" height="15" fill="rgb(252,170,7)" fg:x="314417" fg:w="1471"/><text x="38.4683%" y="175.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1,839 samples, 0.22%)</title><rect x="38.1931%" y="181" width="0.2235%" height="15" fill="rgb(231,118,14)" fg:x="314209" fg:w="1839"/><text x="38.4431%" y="191.50"></text></g><g><title>std::time::Instant::duration_since (111 samples, 0.01%)</title><rect x="38.4166%" y="181" width="0.0135%" height="15" fill="rgb(238,83,0)" fg:x="316048" fg:w="111"/><text x="38.6666%" y="191.50"></text></g><g><title>_$LT$storagev2..disk..writer..DiskStorageWriter$u20$as$u20$storagev2..StorageWriter$GT$::store::_$u7b$$u7b$closure$u7d$$u7d$::hc4054498ccc3d3ce (.llvm.18010357656557696342) (36,196 samples, 4.40%)</title><rect x="34.0312%" y="213" width="4.3997%" height="15" fill="rgb(221,39,39)" fg:x="279970" fg:w="36196"/><text x="34.2812%" y="223.50">_$LT$..</text></g><g><title>storagev2::disk::writer::flusher::Flusher::update_partition_write_count (7,485 samples, 0.91%)</title><rect x="37.5211%" y="197" width="0.9098%" height="15" fill="rgb(222,119,46)" fg:x="308681" fg:w="7485"/><text x="37.7711%" y="207.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (515 samples, 0.06%)</title><rect x="38.4435%" y="213" width="0.0626%" height="15" fill="rgb(222,165,49)" fg:x="316269" fg:w="515"/><text x="38.6935%" y="223.50"></text></g><g><title>bytes::bytes::promotable_even_clone (473 samples, 0.06%)</title><rect x="38.5102%" y="213" width="0.0575%" height="15" fill="rgb(219,113,52)" fg:x="316818" fg:w="473"/><text x="38.7602%" y="223.50"></text></g><g><title>bytes::bytes::shared_clone::had8607b974c311e6 (.llvm.6858511044588184240) (158 samples, 0.02%)</title><rect x="38.5677%" y="213" width="0.0192%" height="15" fill="rgb(214,7,15)" fg:x="317291" fg:w="158"/><text x="38.8177%" y="223.50"></text></g><g><title>0x7ff8067b734b (111 samples, 0.01%)</title><rect x="38.6851%" y="181" width="0.0135%" height="15" fill="rgb(235,32,4)" fg:x="318257" fg:w="111"/><text x="38.9351%" y="191.50"></text></g><g><title>0x7ff8067e58ec (143 samples, 0.02%)</title><rect x="38.7477%" y="149" width="0.0174%" height="15" fill="rgb(238,90,54)" fg:x="318772" fg:w="143"/><text x="38.9977%" y="159.50"></text></g><g><title>0x7ff8067b7c46 (168 samples, 0.02%)</title><rect x="38.7448%" y="165" width="0.0204%" height="15" fill="rgb(213,208,19)" fg:x="318748" fg:w="168"/><text x="38.9948%" y="175.50"></text></g><g><title>0x7ff8067b7faf (115 samples, 0.01%)</title><rect x="38.7702%" y="165" width="0.0140%" height="15" fill="rgb(233,156,4)" fg:x="318957" fg:w="115"/><text x="39.0202%" y="175.50"></text></g><g><title>0x7ff8067b809a (228 samples, 0.03%)</title><rect x="38.7882%" y="165" width="0.0277%" height="15" fill="rgb(207,194,5)" fg:x="319105" fg:w="228"/><text x="39.0382%" y="175.50"></text></g><g><title>0x7ff8067e58ec (204 samples, 0.02%)</title><rect x="38.7911%" y="149" width="0.0248%" height="15" fill="rgb(206,111,30)" fg:x="319129" fg:w="204"/><text x="39.0411%" y="159.50"></text></g><g><title>0x7ff8067b742f (1,103 samples, 0.13%)</title><rect x="38.7126%" y="181" width="0.1341%" height="15" fill="rgb(243,70,54)" fg:x="318483" fg:w="1103"/><text x="38.9626%" y="191.50"></text></g><g><title>0x7ff8067b76f2 (146 samples, 0.02%)</title><rect x="38.8474%" y="181" width="0.0177%" height="15" fill="rgb(242,28,8)" fg:x="319592" fg:w="146"/><text x="39.0974%" y="191.50"></text></g><g><title>0x7ff8067b622a (1,672 samples, 0.20%)</title><rect x="38.6722%" y="197" width="0.2032%" height="15" fill="rgb(219,106,18)" fg:x="318151" fg:w="1672"/><text x="38.9222%" y="207.50"></text></g><g><title>0x7ff8067f7709 (98 samples, 0.01%)</title><rect x="38.8795%" y="197" width="0.0119%" height="15" fill="rgb(244,222,10)" fg:x="319856" fg:w="98"/><text x="39.1295%" y="207.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (136 samples, 0.02%)</title><rect x="38.8918%" y="197" width="0.0165%" height="15" fill="rgb(236,179,52)" fg:x="319957" fg:w="136"/><text x="39.1418%" y="207.50"></text></g><g><title>0x7ff8067f724b (4,648 samples, 0.56%)</title><rect x="38.9350%" y="165" width="0.5650%" height="15" fill="rgb(213,23,39)" fg:x="320313" fg:w="4648"/><text x="39.1850%" y="175.50"></text></g><g><title>semaphore_signal_trap (4,627 samples, 0.56%)</title><rect x="38.9376%" y="149" width="0.5624%" height="15" fill="rgb(238,48,10)" fg:x="320334" fg:w="4627"/><text x="39.1876%" y="159.50"></text></g><g><title>0x7ff8067f76f7 (4,729 samples, 0.57%)</title><rect x="38.9325%" y="181" width="0.5748%" height="15" fill="rgb(251,196,23)" fg:x="320292" fg:w="4729"/><text x="39.1825%" y="191.50"></text></g><g><title>futures_timer::native::delay::Delay::new_handle (7,744 samples, 0.94%)</title><rect x="38.5905%" y="213" width="0.9413%" height="15" fill="rgb(250,152,24)" fg:x="317479" fg:w="7744"/><text x="38.8405%" y="223.50"></text></g><g><title>futures_timer::native::global::raw_wake (5,130 samples, 0.62%)</title><rect x="38.9083%" y="197" width="0.6236%" height="15" fill="rgb(209,150,17)" fg:x="320093" fg:w="5130"/><text x="39.1583%" y="207.50"></text></g><g><title>std::sys::sync::thread_parking::darwin::Parker::unpark (179 samples, 0.02%)</title><rect x="39.5101%" y="181" width="0.0218%" height="15" fill="rgb(234,202,34)" fg:x="325044" fg:w="179"/><text x="39.7601%" y="191.50"></text></g><g><title>quanta::Clock::raw (213 samples, 0.03%)</title><rect x="39.5319%" y="213" width="0.0259%" height="15" fill="rgb(253,148,53)" fg:x="325223" fg:w="213"/><text x="39.7819%" y="223.50"></text></g><g><title>rand::rngs::thread::rng (203 samples, 0.02%)</title><rect x="39.5614%" y="213" width="0.0247%" height="15" fill="rgb(218,129,16)" fg:x="325466" fg:w="203"/><text x="39.8114%" y="223.50"></text></g><g><title>0x7ff80683f91d (147 samples, 0.02%)</title><rect x="39.6043%" y="181" width="0.0179%" height="15" fill="rgb(216,85,19)" fg:x="325819" fg:w="147"/><text x="39.8543%" y="191.50"></text></g><g><title>mach_absolute_time (147 samples, 0.02%)</title><rect x="39.6043%" y="165" width="0.0179%" height="15" fill="rgb(235,228,7)" fg:x="325819" fg:w="147"/><text x="39.8543%" y="175.50"></text></g><g><title>0x7ff80683f93d (112 samples, 0.01%)</title><rect x="39.6231%" y="181" width="0.0136%" height="15" fill="rgb(245,175,0)" fg:x="325974" fg:w="112"/><text x="39.8731%" y="191.50"></text></g><g><title>0x7ff80684e86d (339 samples, 0.04%)</title><rect x="39.5964%" y="197" width="0.0412%" height="15" fill="rgb(208,168,36)" fg:x="325754" fg:w="339"/><text x="39.8464%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (407 samples, 0.05%)</title><rect x="39.5920%" y="213" width="0.0495%" height="15" fill="rgb(246,171,24)" fg:x="325718" fg:w="407"/><text x="39.8420%" y="223.50"></text></g><g><title>0x7ff80683f8c6 (227 samples, 0.03%)</title><rect x="39.7013%" y="165" width="0.0276%" height="15" fill="rgb(215,142,24)" fg:x="326617" fg:w="227"/><text x="39.9513%" y="175.50"></text></g><g><title>mach_timebase_info (227 samples, 0.03%)</title><rect x="39.7013%" y="149" width="0.0276%" height="15" fill="rgb(250,187,7)" fg:x="326617" fg:w="227"/><text x="39.9513%" y="159.50"></text></g><g><title>0x7ff80683f91d (793 samples, 0.10%)</title><rect x="39.7350%" y="165" width="0.0964%" height="15" fill="rgb(228,66,33)" fg:x="326894" fg:w="793"/><text x="39.9850%" y="175.50"></text></g><g><title>mach_absolute_time (792 samples, 0.10%)</title><rect x="39.7351%" y="149" width="0.0963%" height="15" fill="rgb(234,215,21)" fg:x="326895" fg:w="792"/><text x="39.9851%" y="159.50"></text></g><g><title>0x7ff80683f93d (462 samples, 0.06%)</title><rect x="39.8354%" y="165" width="0.0562%" height="15" fill="rgb(222,191,20)" fg:x="327720" fg:w="462"/><text x="40.0854%" y="175.50"></text></g><g><title>0x7ff80684e86d (1,643 samples, 0.20%)</title><rect x="39.6958%" y="181" width="0.1997%" height="15" fill="rgb(245,79,54)" fg:x="326572" fg:w="1643"/><text x="39.9458%" y="191.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2,030 samples, 0.25%)</title><rect x="39.6693%" y="197" width="0.2468%" height="15" fill="rgb(240,10,37)" fg:x="326354" fg:w="2030"/><text x="39.9193%" y="207.50"></text></g><g><title>std::time::Instant::duration_since (257 samples, 0.03%)</title><rect x="39.9161%" y="197" width="0.0312%" height="15" fill="rgb(214,192,32)" fg:x="328384" fg:w="257"/><text x="40.1661%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (151 samples, 0.02%)</title><rect x="39.9290%" y="181" width="0.0184%" height="15" fill="rgb(209,36,54)" fg:x="328490" fg:w="151"/><text x="40.1790%" y="191.50"></text></g><g><title>storagev2::disk::writer::test::test_flush_speed_with_dynamic_rate_multi_partition::_$u7b$$u7b$closure$u7d$$u7d$::_$u7b$$u7b$closure$u7d$$u7d$::h7ebeee8bb82fcb11 (.llvm.14280434548401472387) (57,367 samples, 6.97%)</title><rect x="32.9778%" y="229" width="6.9731%" height="15" fill="rgb(220,10,11)" fg:x="271304" fg:w="57367"/><text x="33.2278%" y="239.50">storagev2..</text></g><g><title>tokio::time::instant::Instant::elapsed (2,439 samples, 0.30%)</title><rect x="39.6545%" y="213" width="0.2965%" height="15" fill="rgb(221,106,17)" fg:x="326232" fg:w="2439"/><text x="39.9045%" y="223.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (146 samples, 0.02%)</title><rect x="39.9812%" y="213" width="0.0177%" height="15" fill="rgb(251,142,44)" fg:x="328920" fg:w="146"/><text x="40.2312%" y="223.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::poll_elapsed (126 samples, 0.02%)</title><rect x="39.9837%" y="197" width="0.0153%" height="15" fill="rgb(238,13,15)" fg:x="328940" fg:w="126"/><text x="40.2337%" y="207.50"></text></g><g><title>0x7ff8067b742f (102 samples, 0.01%)</title><rect x="40.0804%" y="181" width="0.0124%" height="15" fill="rgb(208,107,27)" fg:x="329736" fg:w="102"/><text x="40.3304%" y="191.50"></text></g><g><title>0x7ff8067b622a (224 samples, 0.03%)</title><rect x="40.0712%" y="197" width="0.0272%" height="15" fill="rgb(205,136,37)" fg:x="329660" fg:w="224"/><text x="40.3212%" y="207.50"></text></g><g><title>_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$::write::hb824622b973a5f90 (.llvm.17815140968249597325) (120 samples, 0.01%)</title><rect x="40.1327%" y="181" width="0.0146%" height="15" fill="rgb(250,205,27)" fg:x="330166" fg:w="120"/><text x="40.3827%" y="191.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (401 samples, 0.05%)</title><rect x="40.1004%" y="197" width="0.0487%" height="15" fill="rgb(210,80,43)" fg:x="329900" fg:w="401"/><text x="40.3504%" y="207.50"></text></g><g><title>_platform_memmove$VARIANT$Haswell (212 samples, 0.03%)</title><rect x="40.1560%" y="197" width="0.0258%" height="15" fill="rgb(247,160,36)" fg:x="330358" fg:w="212"/><text x="40.4060%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;storagev2::disk::writer::buffer::PartitionWriterBuffer&gt; (261 samples, 0.03%)</title><rect x="40.1851%" y="197" width="0.0317%" height="15" fill="rgb(234,13,49)" fg:x="330597" fg:w="261"/><text x="40.4351%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;storagev2::disk::writer::flusher::Flusher&gt; (87 samples, 0.01%)</title><rect x="40.2062%" y="181" width="0.0106%" height="15" fill="rgb(234,122,0)" fg:x="330771" fg:w="87"/><text x="40.4562%" y="191.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::push (241 samples, 0.03%)</title><rect x="40.2168%" y="197" width="0.0293%" height="15" fill="rgb(207,146,38)" fg:x="330858" fg:w="241"/><text x="40.4668%" y="207.50"></text></g><g><title>_$LT$std..path..PathBuf$u20$as$u20$core..cmp..PartialEq$GT$::eq::ha8ca9e43c08bccd1 (.llvm.17815140968249597325) (113 samples, 0.01%)</title><rect x="40.2742%" y="165" width="0.0137%" height="15" fill="rgb(207,177,25)" fg:x="331330" fg:w="113"/><text x="40.5242%" y="175.50"></text></g><g><title>std::path::Path::components (85 samples, 0.01%)</title><rect x="40.2776%" y="149" width="0.0103%" height="15" fill="rgb(211,178,42)" fg:x="331358" fg:w="85"/><text x="40.5276%" y="159.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get_mut (432 samples, 0.05%)</title><rect x="40.2504%" y="181" width="0.0525%" height="15" fill="rgb(230,69,54)" fg:x="331134" fg:w="432"/><text x="40.5004%" y="191.50"></text></g><g><title>dashmap::DashMap$LT$K$C$V$C$S$GT$::hash_u64::hbd53c616c4e8f94e (.llvm.17815140968249597325) (123 samples, 0.01%)</title><rect x="40.2879%" y="165" width="0.0150%" height="15" fill="rgb(214,135,41)" fg:x="331443" fg:w="123"/><text x="40.5379%" y="175.50"></text></g><g><title>&lt;std::path::PathBuf as core::hash::Hash&gt;::hash (104 samples, 0.01%)</title><rect x="40.2902%" y="149" width="0.0126%" height="15" fill="rgb(237,67,25)" fg:x="331462" fg:w="104"/><text x="40.5402%" y="159.50"></text></g><g><title>storagev2::disk::writer::flusher::Flusher::update_partition_write_count (547 samples, 0.07%)</title><rect x="40.2469%" y="197" width="0.0665%" height="15" fill="rgb(222,189,50)" fg:x="331106" fg:w="547"/><text x="40.4969%" y="207.50"></text></g><g><title>_$LT$storagev2..disk..writer..DiskStorageWriter$u20$as$u20$storagev2..StorageWriter$GT$::store::_$u7b$$u7b$closure$u7d$$u7d$::hc4054498ccc3d3ce (.llvm.18010357656557696342) (2,586 samples, 0.31%)</title><rect x="39.9993%" y="213" width="0.3143%" height="15" fill="rgb(245,148,34)" fg:x="329069" fg:w="2586"/><text x="40.2493%" y="223.50"></text></g><g><title>storagev2::disk::writer::test::test_flush_speed_with_dynamic_rate_multi_partition::_$u7b$$u7b$closure$u7d$$u7d$::_$u7b$$u7b$closure$u7d$$u7d$::hfd3aee0d071c6501 (.llvm.14280434548401472387) (3,274 samples, 0.40%)</title><rect x="39.9510%" y="229" width="0.3980%" height="15" fill="rgb(222,29,6)" fg:x="328671" fg:w="3274"/><text x="40.2010%" y="239.50"></text></g><g><title>tokio::time::sleep::sleep (86 samples, 0.01%)</title><rect x="40.3385%" y="213" width="0.0105%" height="15" fill="rgb(221,189,43)" fg:x="331859" fg:w="86"/><text x="40.5885%" y="223.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (212,714 samples, 25.86%)</title><rect x="14.5007%" y="245" width="25.8560%" height="15" fill="rgb(207,36,27)" fg:x="119295" fg:w="212714"/><text x="14.7507%" y="255.50">tokio::runtime::task::core::Core&lt;T,S&gt;::po..</text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (184 samples, 0.02%)</title><rect x="40.3676%" y="245" width="0.0224%" height="15" fill="rgb(217,90,24)" fg:x="332099" fg:w="184"/><text x="40.6176%" y="255.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (213,259 samples, 25.92%)</title><rect x="14.4826%" y="261" width="25.9223%" height="15" fill="rgb(224,66,35)" fg:x="119146" fg:w="213259"/><text x="14.7326%" y="271.50">tokio::runtime::task::harness::Harness&lt;T,..</text></g><g><title>tokio::runtime::task::state::State::transition_to_running (122 samples, 0.01%)</title><rect x="40.3900%" y="245" width="0.0148%" height="15" fill="rgb(221,13,50)" fg:x="332283" fg:w="122"/><text x="40.6400%" y="255.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (158 samples, 0.02%)</title><rect x="40.4048%" y="261" width="0.0192%" height="15" fill="rgb(236,68,49)" fg:x="332405" fg:w="158"/><text x="40.6548%" y="271.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (275,606 samples, 33.50%)</title><rect x="6.9294%" y="277" width="33.5008%" height="15" fill="rgb(229,146,28)" fg:x="57007" fg:w="275606"/><text x="7.1794%" y="287.50">tokio::runtime::runtime::Runtime::block_on</text></g><g><title>test::run_test::_{{closure}} (275,685 samples, 33.51%)</title><rect x="6.9205%" y="341" width="33.5104%" height="15" fill="rgb(225,31,38)" fg:x="56934" fg:w="275685"/><text x="7.1705%" y="351.50">test::run_test::_{{closure}}</text></g><g><title>test::__rust_begin_short_backtrace (275,685 samples, 33.51%)</title><rect x="6.9205%" y="325" width="33.5104%" height="15" fill="rgb(250,208,3)" fg:x="56934" fg:w="275685"/><text x="7.1705%" y="335.50">test::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (275,685 samples, 33.51%)</title><rect x="6.9205%" y="309" width="33.5104%" height="15" fill="rgb(246,54,23)" fg:x="56934" fg:w="275685"/><text x="7.1705%" y="319.50">core::ops::function::FnOnce::call_once</text></g><g><title>storagev2::disk::writer::test::run_flush_benchmark (275,685 samples, 33.51%)</title><rect x="6.9205%" y="293" width="33.5104%" height="15" fill="rgb(243,76,11)" fg:x="56934" fg:w="275685"/><text x="7.1705%" y="303.50">storagev2::disk::writer::test::run_flush_benchmark</text></g><g><title>0x7ff80699f89f (92 samples, 0.01%)</title><rect x="40.6238%" y="325" width="0.0112%" height="15" fill="rgb(245,21,50)" fg:x="334206" fg:w="92"/><text x="40.8738%" y="335.50"></text></g><g><title>&lt;Unknown Address&gt; (112 samples, 0.01%)</title><rect x="40.6353%" y="325" width="0.0136%" height="15" fill="rgb(228,9,43)" fg:x="334301" fg:w="112"/><text x="40.8853%" y="335.50"></text></g><g><title>0x7ff806846923 (124 samples, 0.02%)</title><rect x="40.7729%" y="309" width="0.0151%" height="15" fill="rgb(208,100,47)" fg:x="335433" fg:w="124"/><text x="41.0229%" y="319.50"></text></g><g><title>__commpage_gettimeofday_internal (123 samples, 0.01%)</title><rect x="40.7730%" y="293" width="0.0150%" height="15" fill="rgb(232,26,8)" fg:x="335434" fg:w="123"/><text x="41.0230%" y="303.50"></text></g><g><title>__gettimeofday (83 samples, 0.01%)</title><rect x="40.8142%" y="309" width="0.0101%" height="15" fill="rgb(216,166,38)" fg:x="335773" fg:w="83"/><text x="41.0642%" y="319.50"></text></g><g><title>__gettimeofday (2,796 samples, 0.34%)</title><rect x="41.0524%" y="293" width="0.3399%" height="15" fill="rgb(251,202,51)" fg:x="337732" fg:w="2796"/><text x="41.3024%" y="303.50"></text></g><g><title>__psynch_cvwait (30,753 samples, 3.74%)</title><rect x="41.3922%" y="293" width="3.7381%" height="15" fill="rgb(254,216,34)" fg:x="340528" fg:w="30753"/><text x="41.6422%" y="303.50">__ps..</text></g><g><title>_pthread_mutex_droplock (87 samples, 0.01%)</title><rect x="45.1303%" y="293" width="0.0106%" height="15" fill="rgb(251,32,27)" fg:x="371281" fg:w="87"/><text x="45.3803%" y="303.50"></text></g><g><title>_pthread_mutex_firstfit_lock_slow (2,639 samples, 0.32%)</title><rect x="45.1409%" y="293" width="0.3208%" height="15" fill="rgb(208,127,28)" fg:x="371368" fg:w="2639"/><text x="45.3909%" y="303.50"></text></g><g><title>_pthread_mutex_firstfit_lock_wait (2,604 samples, 0.32%)</title><rect x="45.1452%" y="277" width="0.3165%" height="15" fill="rgb(224,137,22)" fg:x="371403" fg:w="2604"/><text x="45.3952%" y="287.50"></text></g><g><title>__psynch_mutexwait (2,520 samples, 0.31%)</title><rect x="45.1554%" y="261" width="0.3063%" height="15" fill="rgb(254,70,32)" fg:x="371487" fg:w="2520"/><text x="45.4054%" y="271.50"></text></g><g><title>pthread_mutex_lock (225 samples, 0.03%)</title><rect x="45.4617%" y="293" width="0.0273%" height="15" fill="rgb(229,75,37)" fg:x="374007" fg:w="225"/><text x="45.7117%" y="303.50"></text></g><g><title>_pthread_cond_wait (39,007 samples, 4.74%)</title><rect x="40.8271%" y="309" width="4.7414%" height="15" fill="rgb(252,64,23)" fg:x="335879" fg:w="39007"/><text x="41.0771%" y="319.50">_pthre..</text></g><g><title>pthread_testcancel (654 samples, 0.08%)</title><rect x="45.4890%" y="293" width="0.0795%" height="15" fill="rgb(232,162,48)" fg:x="374232" fg:w="654"/><text x="45.7390%" y="303.50"></text></g><g><title>__psynch_cvwait (91 samples, 0.01%)</title><rect x="45.5856%" y="277" width="0.0111%" height="15" fill="rgb(246,160,12)" fg:x="375026" fg:w="91"/><text x="45.8356%" y="287.50"></text></g><g><title>_pthread_cond_wait (118 samples, 0.01%)</title><rect x="45.5854%" y="293" width="0.0143%" height="15" fill="rgb(247,166,0)" fg:x="375025" fg:w="118"/><text x="45.8354%" y="303.50"></text></g><g><title>cthread_yield (599 samples, 0.07%)</title><rect x="45.5998%" y="293" width="0.0728%" height="15" fill="rgb(249,219,21)" fg:x="375143" fg:w="599"/><text x="45.8498%" y="303.50"></text></g><g><title>swtch_pri (546 samples, 0.07%)</title><rect x="45.6062%" y="277" width="0.0664%" height="15" fill="rgb(205,209,3)" fg:x="375196" fg:w="546"/><text x="45.8562%" y="287.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (876 samples, 0.11%)</title><rect x="45.5699%" y="309" width="0.1065%" height="15" fill="rgb(243,44,1)" fg:x="374897" fg:w="876"/><text x="45.8199%" y="319.50"></text></g><g><title>__psynch_cvsignal (95 samples, 0.01%)</title><rect x="45.6775%" y="277" width="0.0115%" height="15" fill="rgb(206,159,16)" fg:x="375782" fg:w="95"/><text x="45.9275%" y="287.50"></text></g><g><title>pthread_cond_signal (101 samples, 0.01%)</title><rect x="45.6768%" y="293" width="0.0123%" height="15" fill="rgb(244,77,30)" fg:x="375777" fg:w="101"/><text x="45.9268%" y="303.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (107 samples, 0.01%)</title><rect x="45.6764%" y="309" width="0.0130%" height="15" fill="rgb(218,69,12)" fg:x="375773" fg:w="107"/><text x="45.9264%" y="319.50"></text></g><g><title>pthread_mutex_unlock (109 samples, 0.01%)</title><rect x="45.6988%" y="309" width="0.0132%" height="15" fill="rgb(212,87,7)" fg:x="375958" fg:w="109"/><text x="45.9488%" y="319.50"></text></g><g><title>0x7ff80684e86d (146 samples, 0.02%)</title><rect x="45.7143%" y="293" width="0.0177%" height="15" fill="rgb(245,114,25)" fg:x="376085" fg:w="146"/><text x="45.9643%" y="303.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (175 samples, 0.02%)</title><rect x="45.7121%" y="309" width="0.0213%" height="15" fill="rgb(210,61,42)" fg:x="376067" fg:w="175"/><text x="45.9621%" y="319.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (41,737 samples, 5.07%)</title><rect x="40.6602%" y="325" width="5.0733%" height="15" fill="rgb(211,52,33)" fg:x="334506" fg:w="41737"/><text x="40.9102%" y="335.50">parkin..</text></g><g><title>__psynch_cvwait (298 samples, 0.04%)</title><rect x="45.7888%" y="293" width="0.0362%" height="15" fill="rgb(234,58,33)" fg:x="376698" fg:w="298"/><text x="46.0388%" y="303.50"></text></g><g><title>_pthread_cond_wait (359 samples, 0.04%)</title><rect x="45.7876%" y="309" width="0.0436%" height="15" fill="rgb(220,115,36)" fg:x="376688" fg:w="359"/><text x="46.0376%" y="319.50"></text></g><g><title>cthread_yield (2,251 samples, 0.27%)</title><rect x="45.8312%" y="309" width="0.2736%" height="15" fill="rgb(243,153,54)" fg:x="377047" fg:w="2251"/><text x="46.0812%" y="319.50"></text></g><g><title>swtch_pri (2,056 samples, 0.25%)</title><rect x="45.8549%" y="293" width="0.2499%" height="15" fill="rgb(251,47,18)" fg:x="377242" fg:w="2056"/><text x="46.1049%" y="303.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (3,117 samples, 0.38%)</title><rect x="45.7335%" y="325" width="0.3789%" height="15" fill="rgb(242,102,42)" fg:x="376243" fg:w="3117"/><text x="45.9835%" y="335.50"></text></g><g><title>__psynch_cvsignal (120 samples, 0.01%)</title><rect x="46.1135%" y="293" width="0.0146%" height="15" fill="rgb(234,31,38)" fg:x="379369" fg:w="120"/><text x="46.3635%" y="303.50"></text></g><g><title>pthread_cond_signal (125 samples, 0.02%)</title><rect x="46.1132%" y="309" width="0.0152%" height="15" fill="rgb(221,117,51)" fg:x="379367" fg:w="125"/><text x="46.3632%" y="319.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (156 samples, 0.02%)</title><rect x="46.1124%" y="325" width="0.0190%" height="15" fill="rgb(212,20,18)" fg:x="379360" fg:w="156"/><text x="46.3624%" y="335.50"></text></g><g><title>0x7ff80683f8c6 (1,418 samples, 0.17%)</title><rect x="46.1515%" y="293" width="0.1724%" height="15" fill="rgb(245,133,36)" fg:x="379682" fg:w="1418"/><text x="46.4015%" y="303.50"></text></g><g><title>mach_timebase_info (1,416 samples, 0.17%)</title><rect x="46.1518%" y="277" width="0.1721%" height="15" fill="rgb(212,6,19)" fg:x="379684" fg:w="1416"/><text x="46.4018%" y="287.50"></text></g><g><title>0x7ff80683f91d (133 samples, 0.02%)</title><rect x="46.3251%" y="293" width="0.0162%" height="15" fill="rgb(218,1,36)" fg:x="381110" fg:w="133"/><text x="46.5751%" y="303.50"></text></g><g><title>mach_absolute_time (133 samples, 0.02%)</title><rect x="46.3251%" y="277" width="0.0162%" height="15" fill="rgb(246,84,54)" fg:x="381110" fg:w="133"/><text x="46.5751%" y="287.50"></text></g><g><title>0x7ff80684e86d (1,655 samples, 0.20%)</title><rect x="46.1504%" y="309" width="0.2012%" height="15" fill="rgb(242,110,6)" fg:x="379673" fg:w="1655"/><text x="46.4004%" y="319.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1,772 samples, 0.22%)</title><rect x="46.1378%" y="325" width="0.2154%" height="15" fill="rgb(214,47,5)" fg:x="379569" fg:w="1772"/><text x="46.3878%" y="335.50"></text></g><g><title>0x7ff80699f892 (264 samples, 0.03%)</title><rect x="47.1640%" y="309" width="0.0321%" height="15" fill="rgb(218,159,25)" fg:x="388012" fg:w="264"/><text x="47.4140%" y="319.50"></text></g><g><title>0x7ff80699f896 (91 samples, 0.01%)</title><rect x="47.1961%" y="309" width="0.0111%" height="15" fill="rgb(215,211,28)" fg:x="388276" fg:w="91"/><text x="47.4461%" y="319.50"></text></g><g><title>0x7ff80699f89f (887 samples, 0.11%)</title><rect x="47.2072%" y="309" width="0.1078%" height="15" fill="rgb(238,59,32)" fg:x="388367" fg:w="887"/><text x="47.4572%" y="319.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Seek&gt;::seek (349 samples, 0.04%)</title><rect x="47.8084%" y="277" width="0.0424%" height="15" fill="rgb(226,82,3)" fg:x="393313" fg:w="349"/><text x="48.0584%" y="287.50"></text></g><g><title>__lseek (336 samples, 0.04%)</title><rect x="47.8100%" y="261" width="0.0408%" height="15" fill="rgb(240,164,32)" fg:x="393326" fg:w="336"/><text x="48.0600%" y="271.50"></text></g><g><title>std::fs::DirBuilder::create_dir_all (1,951 samples, 0.24%)</title><rect x="47.8525%" y="277" width="0.2372%" height="15" fill="rgb(232,46,7)" fg:x="393676" fg:w="1951"/><text x="48.1025%" y="287.50"></text></g><g><title>mkdir (1,935 samples, 0.24%)</title><rect x="47.8545%" y="261" width="0.2352%" height="15" fill="rgb(229,129,53)" fg:x="393692" fg:w="1935"/><text x="48.1045%" y="271.50"></text></g><g><title>std::fs::File::set_len (28,170 samples, 3.42%)</title><rect x="48.0897%" y="277" width="3.4241%" height="15" fill="rgb(234,188,29)" fg:x="395627" fg:w="28170"/><text x="48.3397%" y="287.50">std..</text></g><g><title>ftruncate (28,122 samples, 3.42%)</title><rect x="48.0955%" y="261" width="3.4183%" height="15" fill="rgb(246,141,4)" fg:x="395675" fg:w="28122"/><text x="48.3455%" y="271.50">ftr..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (393,621 samples, 47.85%)</title><rect x="51.6304%" y="261" width="47.8458%" height="15" fill="rgb(229,23,39)" fg:x="424756" fg:w="393621"/><text x="51.8804%" y="271.50">&lt;&amp;std::fs::File as std::io::Write&gt;::write</text></g><g><title>write (391,816 samples, 47.63%)</title><rect x="51.8498%" y="245" width="47.6264%" height="15" fill="rgb(206,12,3)" fg:x="426561" fg:w="391816"/><text x="52.0998%" y="255.50">write</text></g><g><title>tokio::io::blocking::Buf::write_to (394,594 samples, 47.96%)</title><rect x="51.5148%" y="277" width="47.9641%" height="15" fill="rgb(252,226,20)" fg:x="423805" fg:w="394594"/><text x="51.7648%" y="287.50">tokio::io::blocking::Buf::write_to</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (427,334 samples, 51.94%)</title><rect x="47.5355%" y="293" width="51.9438%" height="15" fill="rgb(216,123,35)" fg:x="391068" fg:w="427334"/><text x="47.7855%" y="303.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>core::ptr::drop_in_place$LT$tokio..runtime..task..core..Stage$LT$tokio..runtime..blocking..task..BlockingTask$LT$$LT$tokio..fs..file..File$u20$as$u20$tokio..io..async_write..AsyncWrite$GT$..poll_write..$u7b$$u7b$closure$u7d$$u7d$$GT$$GT$$GT$::he5aa7062414bca57 (.llvm.2572065288955653979) (87 samples, 0.01%)</title><rect x="99.4823%" y="293" width="0.0106%" height="15" fill="rgb(212,68,40)" fg:x="818427" fg:w="87"/><text x="99.7323%" y="303.50"></text></g><g><title>0x7ff80686baa3 (122 samples, 0.01%)</title><rect x="99.5020%" y="229" width="0.0148%" height="15" fill="rgb(254,125,32)" fg:x="818589" fg:w="122"/><text x="99.7520%" y="239.50"></text></g><g><title>0x7ff80684603b (100 samples, 0.01%)</title><rect x="99.5047%" y="213" width="0.0122%" height="15" fill="rgb(253,97,22)" fg:x="818611" fg:w="100"/><text x="99.7547%" y="223.50"></text></g><g><title>__getdirentries64 (100 samples, 0.01%)</title><rect x="99.5047%" y="197" width="0.0122%" height="15" fill="rgb(241,101,14)" fg:x="818611" fg:w="100"/><text x="99.7547%" y="207.50"></text></g><g><title>openat (355 samples, 0.04%)</title><rect x="99.5219%" y="229" width="0.0432%" height="15" fill="rgb(238,103,29)" fg:x="818753" fg:w="355"/><text x="99.7719%" y="239.50"></text></g><g><title>__openat (353 samples, 0.04%)</title><rect x="99.5222%" y="213" width="0.0429%" height="15" fill="rgb(233,195,47)" fg:x="818755" fg:w="353"/><text x="99.7722%" y="223.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_recursive (2,482 samples, 0.30%)</title><rect x="99.4930%" y="261" width="0.3017%" height="15" fill="rgb(246,218,30)" fg:x="818515" fg:w="2482"/><text x="99.7430%" y="271.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_recursive (2,455 samples, 0.30%)</title><rect x="99.4963%" y="245" width="0.2984%" height="15" fill="rgb(219,145,47)" fg:x="818542" fg:w="2455"/><text x="99.7463%" y="255.50"></text></g><g><title>unlinkat (1,889 samples, 0.23%)</title><rect x="99.5651%" y="229" width="0.2296%" height="15" fill="rgb(243,12,26)" fg:x="819108" fg:w="1889"/><text x="99.8151%" y="239.50"></text></g><g><title>__unlinkat (1,888 samples, 0.23%)</title><rect x="99.5652%" y="213" width="0.2295%" height="15" fill="rgb(214,87,16)" fg:x="819109" fg:w="1888"/><text x="99.8152%" y="223.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all (2,484 samples, 0.30%)</title><rect x="99.4929%" y="293" width="0.3019%" height="15" fill="rgb(208,99,42)" fg:x="818514" fg:w="2484"/><text x="99.7429%" y="303.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_recursive (2,484 samples, 0.30%)</title><rect x="99.4929%" y="277" width="0.3019%" height="15" fill="rgb(253,99,2)" fg:x="818514" fg:w="2484"/><text x="99.7429%" y="287.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (431,718 samples, 52.48%)</title><rect x="47.3226%" y="309" width="52.4766%" height="15" fill="rgb(220,168,23)" fg:x="389316" fg:w="431718"/><text x="47.5726%" y="319.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (214 samples, 0.03%)</title><rect x="99.7992%" y="309" width="0.0260%" height="15" fill="rgb(242,38,24)" fg:x="821034" fg:w="214"/><text x="100.0492%" y="319.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (268 samples, 0.03%)</title><rect x="99.8289%" y="277" width="0.0326%" height="15" fill="rgb(225,182,9)" fg:x="821278" fg:w="268"/><text x="100.0789%" y="287.50"></text></g><g><title>mio::waker::Waker::wake (263 samples, 0.03%)</title><rect x="99.8295%" y="261" width="0.0320%" height="15" fill="rgb(243,178,37)" fg:x="821283" fg:w="263"/><text x="100.0795%" y="271.50"></text></g><g><title>kevent (258 samples, 0.03%)</title><rect x="99.8301%" y="245" width="0.0314%" height="15" fill="rgb(232,139,19)" fg:x="821288" fg:w="258"/><text x="100.0801%" y="255.50"></text></g><g><title>tokio::runtime::context::with_scheduler (283 samples, 0.03%)</title><rect x="99.8284%" y="293" width="0.0344%" height="15" fill="rgb(225,201,24)" fg:x="821274" fg:w="283"/><text x="100.0784%" y="303.50"></text></g><g><title>tokio::runtime::task::harness::Harness$LT$T$C$S$GT$::complete::h0ce3e0d66899a5eb (.llvm.15480949991314898764) (317 samples, 0.04%)</title><rect x="99.8262%" y="309" width="0.0385%" height="15" fill="rgb(221,47,46)" fg:x="821256" fg:w="317"/><text x="100.0762%" y="319.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (340 samples, 0.04%)</title><rect x="99.8725%" y="277" width="0.0413%" height="15" fill="rgb(249,23,13)" fg:x="821637" fg:w="340"/><text x="100.1225%" y="287.50"></text></g><g><title>mio::waker::Waker::wake (332 samples, 0.04%)</title><rect x="99.8735%" y="261" width="0.0404%" height="15" fill="rgb(219,9,5)" fg:x="821645" fg:w="332"/><text x="100.1235%" y="271.50"></text></g><g><title>kevent (322 samples, 0.04%)</title><rect x="99.8747%" y="245" width="0.0391%" height="15" fill="rgb(254,171,16)" fg:x="821655" fg:w="322"/><text x="100.1247%" y="255.50"></text></g><g><title>tokio::runtime::context::with_scheduler (370 samples, 0.04%)</title><rect x="99.8716%" y="293" width="0.0450%" height="15" fill="rgb(230,171,20)" fg:x="821630" fg:w="370"/><text x="100.1216%" y="303.50"></text></g><g><title>tokio::runtime::task::harness::Harness$LT$T$C$S$GT$::complete::h58ad049546bf370c (.llvm.7482237286087222455) (407 samples, 0.05%)</title><rect x="99.8710%" y="309" width="0.0495%" height="15" fill="rgb(210,71,41)" fg:x="821625" fg:w="407"/><text x="100.1210%" y="319.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (144 samples, 0.02%)</title><rect x="99.9567%" y="277" width="0.0175%" height="15" fill="rgb(206,173,20)" fg:x="822330" fg:w="144"/><text x="100.2067%" y="287.50"></text></g><g><title>mio::waker::Waker::wake (138 samples, 0.02%)</title><rect x="99.9575%" y="261" width="0.0168%" height="15" fill="rgb(233,88,34)" fg:x="822336" fg:w="138"/><text x="100.2075%" y="271.50"></text></g><g><title>kevent (134 samples, 0.02%)</title><rect x="99.9579%" y="245" width="0.0163%" height="15" fill="rgb(223,209,46)" fg:x="822340" fg:w="134"/><text x="100.2079%" y="255.50"></text></g><g><title>tokio::runtime::context::with_scheduler (159 samples, 0.02%)</title><rect x="99.9566%" y="293" width="0.0193%" height="15" fill="rgb(250,43,18)" fg:x="822329" fg:w="159"/><text x="100.2066%" y="303.50"></text></g><g><title>tokio::runtime::task::harness::Harness$LT$T$C$S$GT$::complete::hdd5cd30a9a4b1154 (.llvm.15480949991314898764) (481 samples, 0.06%)</title><rect x="99.9205%" y="309" width="0.0585%" height="15" fill="rgb(208,13,10)" fg:x="822032" fg:w="481"/><text x="100.1705%" y="319.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (441,117 samples, 53.62%)</title><rect x="46.3608%" y="325" width="53.6191%" height="15" fill="rgb(212,200,36)" fg:x="381404" fg:w="441117"/><text x="46.6108%" y="335.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (490,045 samples, 59.57%)</title><rect x="40.4309%" y="341" width="59.5665%" height="15" fill="rgb(225,90,30)" fg:x="332619" fg:w="490045"/><text x="40.6809%" y="351.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::task::raw::poll (143 samples, 0.02%)</title><rect x="99.9799%" y="325" width="0.0174%" height="15" fill="rgb(236,182,39)" fg:x="822521" fg:w="143"/><text x="100.2299%" y="335.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (822,651 samples, 100.00%)</title><rect x="0.0017%" y="357" width="99.9957%" height="15" fill="rgb(212,144,35)" fg:x="14" fg:w="822651"/><text x="0.2517%" y="367.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (822,653 samples, 100.00%)</title><rect x="0.0017%" y="373" width="99.9960%" height="15" fill="rgb(228,63,44)" fg:x="14" fg:w="822653"/><text x="0.2517%" y="383.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>_pthread_start (822,668 samples, 100.00%)</title><rect x="0.0011%" y="405" width="99.9978%" height="15" fill="rgb(228,109,6)" fg:x="9" fg:w="822668"/><text x="0.2511%" y="415.50">_pthread_start</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (822,664 samples, 100.00%)</title><rect x="0.0016%" y="389" width="99.9973%" height="15" fill="rgb(238,117,24)" fg:x="13" fg:w="822664"/><text x="0.2516%" y="399.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>all (822,686 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(242,26,26)" fg:x="0" fg:w="822686"/><text x="0.2500%" y="447.50"></text></g><g><title>thread_start (822,677 samples, 100.00%)</title><rect x="0.0011%" y="421" width="99.9989%" height="15" fill="rgb(221,92,48)" fg:x="9" fg:w="822677"/><text x="0.2511%" y="431.50">thread_start</text></g></svg></svg>