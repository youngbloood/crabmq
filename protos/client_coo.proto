// client 与 coo 交互协议
syntax = "proto3";
package clientcoosvc;

// 导入 Empty 类型
// import "google/protobuf/empty.proto";
import "common.proto";

service ClientCooService {
    rpc Auth (AuthReq) returns (AuthResp);
    rpc List (commonsvc.CooListReq) returns (stream commonsvc.CooListResp);
    rpc NewTopic (NewTopicReq) returns (NewTopicResp);
    rpc AddPartitions (AddPartitionsReq) returns (AddPartitionsResp);
    rpc Pull (PullReq) returns (stream commonsvc.TopicPartitionResp);

    rpc JoinGroup(GroupJoinRequest) returns (GroupJoinResponse);
    rpc SyncConsumerAssignments(SyncConsumerAssignmentsReq) returns (stream SyncConsumerAssignmentsResp);
}

message AuthReq {
    string username = 1;
    string password = 2;
    string nonce = 3;
    string crypto_type = 4;
}

message AuthResp {
    string error = 1;
    string token = 2;
}

message NewTopicReq {
    // topic 
    string topic = 1;
    // 该 topic 的分区数量
    uint32 partitio_num = 2;
}

message NewTopicResp {
    bool success = 1;
    string error = 2;
    optional commonsvc.TopicPartitionResp detail = 3;
}

message AddPartitionsReq {
    // topic 
    string topic = 1;
    // 该 topic 的增加的分区数量
    uint32 partitio_num = 2; 
    string key = 3;
}

message AddPartitionsResp {
    bool success = 1;
    string error = 2;
    optional commonsvc.TopicPartitionResp detail = 3;
}

message PullReq {
    // 过滤条件
    repeated string topics = 1;
    repeated uint32 partition_ids = 2;
    repeated uint32 broker_ids = 3;
    repeated string keys = 4;
}

message GroupJoinRequest {
    uint32 group_id = 1;
    // 加入group的可选参数
    // 该 group 中的第一个客户端必须填该值
    // 该 group 中的后续客户端不填该值，默认使用第一个的；若填，则需要校验
    optional GroupJoinRequestOption opt = 2;
}

message GroupJoinRequestOption{
    repeated GroupJoinSubTopic sub_topics = 1;
    // 自动 commit   
    bool auto_commit = 2; 
    // 设置滑动窗口大小，用于 broker 中单个 consumer 限制 read_ptr 与 commit_ptr 之间的窗口大小，防止consumer过度占用资源
    uint64 consumer_slide_window_size = 3;
}

// 仅每个消费者组中的第一个 SubTopic 有效
message GroupJoinSubTopic {
    string topic = 1; 
    // 起始消费位移（1表示最新，0表示从头开始消费）
    // 仅每个组中的第一个消费者的 offset 设置有效
    uint32 offset = 2;         
}

message GroupJoinResponse {
    uint32 group_id = 1;
    string member_id = 2;
    // 正确的 opt 参数
    GroupJoinRequestOption opt = 3;
    repeated commonsvc.TopicPartitionMeta list = 4;
    commonsvc.GroupStatus status = 6;
    enum ErrorCode {
        NONE = 0;
        FirstMemberMustSetConfig = 1; // 首成员必须设置
        InvalidTopic = 2;
        SUBSCRIPTION_CONFLICT = 3;
        AUTO_COMMIT_CONFLICT = 4;
        SLIDE_WINDOW_CONFLICT = 5;
    }
    ErrorCode error = 7;
    string error_msg = 8;
}

message SyncConsumerAssignmentsReq {
    uint32 group_id = 1;
    string member_id = 2;
    int32 generation_id = 3;
}

message SyncConsumerAssignmentsResp {
    uint32 group_id = 1;
    string member_id = 2;
    // 客户端存储成 map: (topic, partition_id) -> commonsvc.TopicPartitionMeta
    // 并从该分区不断 Fetch 消息
    repeated commonsvc.TopicPartitionMeta list = 3;
    commonsvc.GroupStatus status = 4;
}
