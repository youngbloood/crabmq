syntax = "proto3";
package clientbrokersvc;

service ClientBrokerService {
  // 生产消息（客户端流式）
  rpc Publish(stream PublishReq) returns (stream PublishResp);
  
  // 消费消息（双向流式）
  rpc Subscribe(stream SubscribeReq) returns (stream MessageBatch);
}

// ========== 生产消息协议 ==========
message PublishReq {
  string topic = 1;
  uint32 partition = 2;      // 更合理的数值范围
  bytes payload = 3;
  optional string message_id = 4;  // 可选客户端生成ID
}

message PublishResp {
  string message_id = 1;    // Broker生成的唯一ID
  Status status = 2;        // 统一状态返回
}

// ========== 消费消息协议 ==========
message SubscribeReq {
  oneof request {
    Subscription sub = 1;       // 初始化订阅
    Fetch fetch = 2;
    Ack ack = 3;                // 消息确认
    Commit commit = 4;
    Heartbeat heartbeat = 5;    // 新增：心跳包
  }
}

message Subscription {
  string member_id =1;
}

message Fetch {
  string topic = 1;
  uint32 partition_id = 2;
  uint64 max_partition_bytes = 3;
  uint64 max_partition_batch_count = 4;
}

message Ack {
  string batch_id = 1;           // 批次ID
}


message Commit {
  SegmentOffset commit_pos = 1;  // 提交位置
}

message Heartbeat {
  uint32 credit_request = 1;    // 请求的信用额度（字节数）
}


message MessageBatch {
  string batch_id = 1;     
  string topic = 2;
  uint32 partition_id = 3;         
  repeated Message messages = 4;
}

message SegmentOffset {
  string segment = 1;     // 段文件名称
  uint64 offset = 2;       // 段内偏移量
}




// ========== 通用结构 ==========
message Message {
  string topic = 1;
  uint32 partition = 2;
  string message_id = 3;
  bytes payload = 4;
  SegmentOffset offset = 5;         // Broker维护的位移
  map<string,string> metadata = 6;  // 扩展元数据
  // 新增流控元数据
  uint32 credit_remaining = 7;      // Broker端剩余信用额度
  uint32 credit_consumed = 8;       // 本条消息消耗的信用
  uint32 recommended_next_bytes = 9; // 建议下次请求字节数
}

enum Status {
  SUCCESS = 0;
  INVALID_PARTITION = 1;    // 分区不属于当前节点
  STORAGE_ERROR = 2;
  RATE_LIMITED = 3;
}