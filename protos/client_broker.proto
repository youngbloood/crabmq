syntax = "proto3";
package clientbrokersvc;

service ClientBrokerService {
  // 生产消息（客户端流式）
  rpc Publish(stream PublishReq) returns (stream PublishResp);
  
  // 消费消息（双向流式）
  rpc Subscribe(stream SubscribeReq) returns (stream MessageBatch);
}

// ========== 生产消息协议 ==========
message PublishReq {
  string topic = 1;
  uint32 partition = 2;      // 更合理的数值范围
  PublishAckType ack = 3;     // 设置消息的 ack 类型
  string batch_id = 4; // 批量消息 ID
  repeated MessageReq messages = 5; // 多条消息
}

message MessageReq {
  string message_id = 1; // 客户端生成 ID
  bytes payload = 2;
  map<string, string> metadata = 3; // 可选元数据
}

// ack 类型，有宽松至严格
enum PublishAckType {
  None = 0; // 无需ack
  MasterMem = 1; // master broker 内存收到即确认返回
  MasterStorage = 2; // master storage 确认刷盘才返回
  QUORUM = 3; // 多数派确认
}

message PublishResp {
  string batch_id = 1;
  Status overall_status = 2; // 整体批次状态
  // 详细消息响应
  repeated MessageAck message_acks = 3; 
}

message MessageAck {
  string message_id = 1;
  Status status = 2;
}

// ========== 消费消息协议 ==========
message SubscribeReq {
  oneof request {
    Subscription sub = 1;       // 初始化订阅
    Fetch fetch = 2; // 拉取消息配置
    Commit commit = 3; // 确认消息已成功处理
    Heartbeat heartbeat = 4;    // 心跳包，用于broker定期清理资源
  }
}

message Subscription {
  string member_id =1;
}

message Fetch {
  string topic = 1;
  uint32 partition_id = 2;
  uint64 max_partition_bytes = 3;
  uint64 max_partition_batch_count = 4;
}

message Commit {
  string topic = 1;
  uint32 partition_id = 2;
  SegmentOffset commit_pos = 3;  // 提交位置
}

message Heartbeat {
  uint32 credit_request = 1;    // 请求的信用额度（字节数）
}


message MessageBatch {
  string batch_id = 1;     
  string topic = 2;
  uint32 partition_id = 3;  
  repeated MessageResp messages = 4;
}

message SegmentOffset {
  uint64 segment_id = 1;     // 段id
  uint64 offset = 2;       // 段内偏移量
}




// ========== 通用结构 ==========
message MessageResp {
  optional string message_id = 1; // 客户端生成 ID
  bytes payload = 2; // 消息体
  map<string, string> metadata = 3; // 可选元数据
  SegmentOffset offset = 4;         // Broker维护的位移
}

enum Status {
  SUCCESS = 0;
  INVALID_PARTITION = 1;    // 分区不属于当前节点
  STORAGE_ERROR = 2;
  RATE_LIMITED = 3;
  PARTIAL_FAILURE = 4;
}